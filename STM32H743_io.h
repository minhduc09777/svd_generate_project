// Device STM32H743

// Peripheral ADC1 @ base_addess=0x40022000
typedef struct adc1_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t jqovf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd3_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeos_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeoc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eos_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eoc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosmp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adrdy_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } isr_bits;
    };

    // IER @ offset=0x00000004
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t jqovfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd3ie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeosie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeocie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eocie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosmpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adrdyie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // CR @ offset=0x00000008
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t adcal_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adcaldif_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deeppwd_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t advregen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw5_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adcallin_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t boost_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jadstp_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adstp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jadstart_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adstart_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aden_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t jqdis_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdch1ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jauto_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jawd1en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1sgl_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jqm_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdiscen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discnum_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t discen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autdly_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrmod_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exten_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t extsel_bit : 5; // bit offset=5  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t res_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmngt_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t cfgr2_reg;

        // bit fields
        struct {
            __IO uint32_t rovse_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovse_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ovss_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t trovs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovsm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t osr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t lshift_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } cfgr2_bits;
    };

    // SMPR1 @ offset=0x00000014
    union {
        __IO uint32_t smpr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t smp9_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp8_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp7_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp6_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp5_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp4_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp3_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp2_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp1_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
        } smpr1_bits;
    };

    // SMPR2 @ offset=0x00000018
    union {
        __IO uint32_t smpr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t smp19_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp18_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp17_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp16_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp15_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp14_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp13_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp12_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp11_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp10_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } smpr2_bits;
    };

    // PCSEL @ offset=0x0000001C
    __IO uint32_t pcsel_reg;

    // LTR1 @ offset=0x00000020
    __IO uint32_t ltr1_reg;

    // LHTR1 @ offset=0x00000024
    __IO uint32_t lhtr1_reg;

    __IO uint8_t reserved0[8];

    // SQR1 @ offset=0x00000030
    union {
        __IO uint32_t sqr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq4_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq3_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq2_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr1_bits;
    };

    // SQR2 @ offset=0x00000034
    union {
        __IO uint32_t sqr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq9_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq8_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq7_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq6_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq5_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr2_bits;
    };

    // SQR3 @ offset=0x00000038
    union {
        __IO uint32_t sqr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq14_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq13_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq12_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq11_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq10_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr3_bits;
    };

    // SQR4 @ offset=0x0000003C
    union {
        __IO uint32_t sqr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t sq16_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq15_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 24;
        } sqr4_bits;
    };

    // DR @ offset=0x00000040
    __IO uint32_t dr_reg;

    __IO uint8_t reserved1[8];

    // JSQR @ offset=0x0000004C
    union {
        __IO uint32_t jsqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t jsq4_bit : 5; // bit offset=27  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq3_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq2_bit : 5; // bit offset=15  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq1_bit : 5; // bit offset=9  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jexten_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t jextsel_bit : 5; // bit offset=2  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jl_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } jsqr_bits;
    };

    __IO uint8_t reserved2[16];

    // OFR1 @ offset=0x00000060
    union {
        __IO uint32_t ofr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr1_bits;
    };

    // OFR2 @ offset=0x00000064
    union {
        __IO uint32_t ofr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr2_bits;
    };

    // OFR3 @ offset=0x00000068
    union {
        __IO uint32_t ofr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr3_bits;
    };

    // OFR4 @ offset=0x0000006C
    union {
        __IO uint32_t ofr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr4_bits;
    };

    __IO uint8_t reserved3[16];

    // JDR1 @ offset=0x00000080
    __IO uint32_t jdr1_reg;

    // JDR2 @ offset=0x00000084
    __IO uint32_t jdr2_reg;

    // JDR3 @ offset=0x00000088
    __IO uint32_t jdr3_reg;

    // JDR4 @ offset=0x0000008C
    __IO uint32_t jdr4_reg;

    __IO uint8_t reserved4[16];

    // AWD2CR @ offset=0x000000A0
    __IO uint32_t awd2cr_reg;

    // AWD3CR @ offset=0x000000A4
    __IO uint32_t awd3cr_reg;

    __IO uint8_t reserved5[8];

    // LTR2 @ offset=0x000000B0
    __IO uint32_t ltr2_reg;

    // HTR2 @ offset=0x000000B4
    __IO uint32_t htr2_reg;

    // LTR3 @ offset=0x000000B8
    __IO uint32_t ltr3_reg;

    // HTR3 @ offset=0x000000BC
    __IO uint32_t htr3_reg;

    // DIFSEL @ offset=0x000000C0
    __IO uint32_t difsel_reg;

    // CALFACT @ offset=0x000000C4
    union {
        __IO uint32_t calfact_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t calfact_d_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t calfact_s_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } calfact_bits;
    };

    // CALFACT2 @ offset=0x000000C8
    __IO uint32_t calfact2_reg;

} adc1_t;

// Peripheral ADC12_Common @ base_addess=0x40022300
typedef struct adc12_common_t {

    // CSR @ offset=0x00000000
    union {
        __IO uint32_t csr_reg;

        // bit fields
        struct {
            __IO uint32_t adrdy_mst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eosmp_mst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eoc_mst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eos_mst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_mst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeoc_mst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeos_mst_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd1_mst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd2_mst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd3_mst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jqovf_mst_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 5;
            __IO uint32_t adrdy_slv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eosmp_slv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eoc_slv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eos_slv_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_slv_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeoc_slv_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeos_slv_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd1_slv_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd2_slv_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd3_slv_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jqovf_slv_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 5;
        } csr_bits;
    };

    __IO uint8_t reserved0[4];

    // CCR @ offset=0x00000008
    union {
        __IO uint32_t ccr_reg;

        // bit fields
        struct {
            __IO uint32_t dual_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t delay_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t damdf_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ckmode_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t presc_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t vrefen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vsenseen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbaten_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 7;
        } ccr_bits;
    };

    // CDR @ offset=0x0000000C
    union {
        __IO uint32_t cdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t rdata_slv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rdata_mst_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } cdr_bits;
    };

    // CDR2 @ offset=0x00000010
    __IO uint32_t cdr2_reg;

} adc12_common_t;

// Peripheral ADC2 @ base_addess=0x40022100
typedef struct adc2_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t jqovf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd3_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeos_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeoc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eos_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eoc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosmp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adrdy_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } isr_bits;
    };

    // IER @ offset=0x00000004
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t jqovfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd3ie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeosie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeocie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eocie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosmpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adrdyie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // CR @ offset=0x00000008
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t adcal_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adcaldif_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deeppwd_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t advregen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw5_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adcallin_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t boost_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jadstp_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adstp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jadstart_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adstart_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aden_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t jqdis_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdch1ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jauto_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jawd1en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1sgl_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jqm_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdiscen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discnum_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t discen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autdly_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrmod_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exten_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t extsel_bit : 5; // bit offset=5  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t res_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmngt_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t cfgr2_reg;

        // bit fields
        struct {
            __IO uint32_t rovse_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovse_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ovss_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t trovs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovsm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t osr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t lshift_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } cfgr2_bits;
    };

    // SMPR1 @ offset=0x00000014
    union {
        __IO uint32_t smpr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t smp9_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp8_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp7_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp6_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp5_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp4_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp3_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp2_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp1_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
        } smpr1_bits;
    };

    // SMPR2 @ offset=0x00000018
    union {
        __IO uint32_t smpr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t smp19_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp18_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp17_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp16_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp15_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp14_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp13_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp12_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp11_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp10_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } smpr2_bits;
    };

    // PCSEL @ offset=0x0000001C
    __IO uint32_t pcsel_reg;

    // LTR1 @ offset=0x00000020
    __IO uint32_t ltr1_reg;

    // LHTR1 @ offset=0x00000024
    __IO uint32_t lhtr1_reg;

    __IO uint8_t reserved0[8];

    // SQR1 @ offset=0x00000030
    union {
        __IO uint32_t sqr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq4_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq3_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq2_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr1_bits;
    };

    // SQR2 @ offset=0x00000034
    union {
        __IO uint32_t sqr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq9_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq8_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq7_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq6_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq5_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr2_bits;
    };

    // SQR3 @ offset=0x00000038
    union {
        __IO uint32_t sqr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq14_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq13_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq12_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq11_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq10_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr3_bits;
    };

    // SQR4 @ offset=0x0000003C
    union {
        __IO uint32_t sqr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t sq16_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq15_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 24;
        } sqr4_bits;
    };

    // DR @ offset=0x00000040
    __IO uint32_t dr_reg;

    __IO uint8_t reserved1[8];

    // JSQR @ offset=0x0000004C
    union {
        __IO uint32_t jsqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t jsq4_bit : 5; // bit offset=27  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq3_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq2_bit : 5; // bit offset=15  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq1_bit : 5; // bit offset=9  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jexten_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t jextsel_bit : 5; // bit offset=2  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jl_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } jsqr_bits;
    };

    __IO uint8_t reserved2[16];

    // OFR1 @ offset=0x00000060
    union {
        __IO uint32_t ofr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr1_bits;
    };

    // OFR2 @ offset=0x00000064
    union {
        __IO uint32_t ofr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr2_bits;
    };

    // OFR3 @ offset=0x00000068
    union {
        __IO uint32_t ofr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr3_bits;
    };

    // OFR4 @ offset=0x0000006C
    union {
        __IO uint32_t ofr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr4_bits;
    };

    __IO uint8_t reserved3[16];

    // JDR1 @ offset=0x00000080
    __IO uint32_t jdr1_reg;

    // JDR2 @ offset=0x00000084
    __IO uint32_t jdr2_reg;

    // JDR3 @ offset=0x00000088
    __IO uint32_t jdr3_reg;

    // JDR4 @ offset=0x0000008C
    __IO uint32_t jdr4_reg;

    __IO uint8_t reserved4[16];

    // AWD2CR @ offset=0x000000A0
    __IO uint32_t awd2cr_reg;

    // AWD3CR @ offset=0x000000A4
    __IO uint32_t awd3cr_reg;

    __IO uint8_t reserved5[8];

    // LTR2 @ offset=0x000000B0
    __IO uint32_t ltr2_reg;

    // HTR2 @ offset=0x000000B4
    __IO uint32_t htr2_reg;

    // LTR3 @ offset=0x000000B8
    __IO uint32_t ltr3_reg;

    // HTR3 @ offset=0x000000BC
    __IO uint32_t htr3_reg;

    // DIFSEL @ offset=0x000000C0
    __IO uint32_t difsel_reg;

    // CALFACT @ offset=0x000000C4
    union {
        __IO uint32_t calfact_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t calfact_d_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t calfact_s_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } calfact_bits;
    };

    // CALFACT2 @ offset=0x000000C8
    __IO uint32_t calfact2_reg;

} adc2_t;

// Peripheral ADC3 @ base_addess=0x58026000
typedef struct adc3_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t jqovf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd3_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeos_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeoc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eos_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eoc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosmp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adrdy_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } isr_bits;
    };

    // IER @ offset=0x00000004
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t jqovfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd3ie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeosie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jeocie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eocie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eosmpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adrdyie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // CR @ offset=0x00000008
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t adcal_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adcaldif_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deeppwd_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t advregen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw5_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lincalrdyw1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adcallin_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t boost_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jadstp_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adstp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jadstart_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adstart_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aden_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t jqdis_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdch1ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jauto_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jawd1en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awd1sgl_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jqm_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdiscen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discnum_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t discen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autdly_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrmod_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exten_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t extsel_bit : 5; // bit offset=5  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t res_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmngt_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t cfgr2_reg;

        // bit fields
        struct {
            __IO uint32_t rovse_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovse_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ovss_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t trovs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovsm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rshift4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t osr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t lshift_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } cfgr2_bits;
    };

    // SMPR1 @ offset=0x00000014
    union {
        __IO uint32_t smpr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t smp9_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp8_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp7_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp6_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp5_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp4_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp3_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp2_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp1_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
        } smpr1_bits;
    };

    // SMPR2 @ offset=0x00000018
    union {
        __IO uint32_t smpr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t smp19_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp18_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp17_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp16_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp15_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp14_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp13_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp12_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp11_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t smp10_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } smpr2_bits;
    };

    // PCSEL @ offset=0x0000001C
    __IO uint32_t pcsel_reg;

    // LTR1 @ offset=0x00000020
    __IO uint32_t ltr1_reg;

    // LHTR1 @ offset=0x00000024
    __IO uint32_t lhtr1_reg;

    __IO uint8_t reserved0[8];

    // SQR1 @ offset=0x00000030
    union {
        __IO uint32_t sqr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq4_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq3_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq2_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr1_bits;
    };

    // SQR2 @ offset=0x00000034
    union {
        __IO uint32_t sqr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq9_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq8_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq7_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq6_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq5_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr2_bits;
    };

    // SQR3 @ offset=0x00000038
    union {
        __IO uint32_t sqr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t sq14_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq13_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq12_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq11_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq10_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } sqr3_bits;
    };

    // SQR4 @ offset=0x0000003C
    union {
        __IO uint32_t sqr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t sq16_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t sq15_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 24;
        } sqr4_bits;
    };

    // DR @ offset=0x00000040
    __IO uint32_t dr_reg;

    __IO uint8_t reserved1[8];

    // JSQR @ offset=0x0000004C
    union {
        __IO uint32_t jsqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t jsq4_bit : 5; // bit offset=27  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq3_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq2_bit : 5; // bit offset=15  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jsq1_bit : 5; // bit offset=9  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jexten_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t jextsel_bit : 5; // bit offset=2  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t jl_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } jsqr_bits;
    };

    __IO uint8_t reserved2[16];

    // OFR1 @ offset=0x00000060
    union {
        __IO uint32_t ofr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr1_bits;
    };

    // OFR2 @ offset=0x00000064
    union {
        __IO uint32_t ofr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr2_bits;
    };

    // OFR3 @ offset=0x00000068
    union {
        __IO uint32_t ofr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr3_bits;
    };

    // OFR4 @ offset=0x0000006C
    union {
        __IO uint32_t ofr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ssate_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_ch_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t offset1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
        } ofr4_bits;
    };

    __IO uint8_t reserved3[16];

    // JDR1 @ offset=0x00000080
    __IO uint32_t jdr1_reg;

    // JDR2 @ offset=0x00000084
    __IO uint32_t jdr2_reg;

    // JDR3 @ offset=0x00000088
    __IO uint32_t jdr3_reg;

    // JDR4 @ offset=0x0000008C
    __IO uint32_t jdr4_reg;

    __IO uint8_t reserved4[16];

    // AWD2CR @ offset=0x000000A0
    __IO uint32_t awd2cr_reg;

    // AWD3CR @ offset=0x000000A4
    __IO uint32_t awd3cr_reg;

    __IO uint8_t reserved5[8];

    // LTR2 @ offset=0x000000B0
    __IO uint32_t ltr2_reg;

    // HTR2 @ offset=0x000000B4
    __IO uint32_t htr2_reg;

    // LTR3 @ offset=0x000000B8
    __IO uint32_t ltr3_reg;

    // HTR3 @ offset=0x000000BC
    __IO uint32_t htr3_reg;

    // DIFSEL @ offset=0x000000C0
    __IO uint32_t difsel_reg;

    // CALFACT @ offset=0x000000C4
    union {
        __IO uint32_t calfact_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t calfact_d_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t calfact_s_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } calfact_bits;
    };

    // CALFACT2 @ offset=0x000000C8
    __IO uint32_t calfact2_reg;

} adc3_t;

// Peripheral ADC3_Common @ base_addess=0x58026300
typedef struct adc3_common_t {

    // CSR @ offset=0x00000000
    union {
        __IO uint32_t csr_reg;

        // bit fields
        struct {
            __IO uint32_t adrdy_mst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eosmp_mst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eoc_mst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eos_mst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_mst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeoc_mst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeos_mst_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd1_mst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd2_mst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd3_mst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jqovf_mst_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 5;
            __IO uint32_t adrdy_slv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eosmp_slv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eoc_slv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eos_slv_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_slv_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeoc_slv_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jeos_slv_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd1_slv_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd2_slv_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awd3_slv_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jqovf_slv_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 5;
        } csr_bits;
    };

    __IO uint8_t reserved0[4];

    // CCR @ offset=0x00000008
    union {
        __IO uint32_t ccr_reg;

        // bit fields
        struct {
            __IO uint32_t dual_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t delay_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t damdf_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ckmode_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t presc_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t vrefen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vsenseen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbaten_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 7;
        } ccr_bits;
    };

    // CDR @ offset=0x0000000C
    union {
        __IO uint32_t cdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t rdata_slv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rdata_mst_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } cdr_bits;
    };

    // CDR2 @ offset=0x00000010
    __IO uint32_t cdr2_reg;

} adc3_common_t;

// Peripheral AXI @ base_addess=0x51000000
typedef struct axi_t {

    __IO uint8_t reserved0[8144];

    // AXI_PERIPH_ID_4 @ offset=0x00001FD0
    union {
        __IO uint32_t axi_periph_id_4_reg;

        // bit fields
        struct {
            __IO uint32_t jep106con_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t kcount4_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } axi_periph_id_4_bits;
    };

    __IO uint8_t reserved1[12];

    // AXI_PERIPH_ID_0 @ offset=0x00001FE0
    __IO uint32_t axi_periph_id_0_reg;

    // AXI_PERIPH_ID_1 @ offset=0x00001FE4
    union {
        __IO uint32_t axi_periph_id_1_reg;

        // bit fields
        struct {
            __IO uint32_t partnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t jep106i_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } axi_periph_id_1_bits;
    };

    // AXI_PERIPH_ID_2 @ offset=0x00001FE8
    union {
        __IO uint32_t axi_periph_id_2_reg;

        // bit fields
        struct {
            __IO uint32_t jep106id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t jedec_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t revision_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } axi_periph_id_2_bits;
    };

    // AXI_PERIPH_ID_3 @ offset=0x00001FEC
    union {
        __IO uint32_t axi_periph_id_3_reg;

        // bit fields
        struct {
            __IO uint32_t cust_mod_num_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t rev_and_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } axi_periph_id_3_bits;
    };

    // AXI_COMP_ID_0 @ offset=0x00001FF0
    __IO uint32_t axi_comp_id_0_reg;

    // AXI_COMP_ID_1 @ offset=0x00001FF4
    union {
        __IO uint32_t axi_comp_id_1_reg;

        // bit fields
        struct {
            __IO uint32_t preamble_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t class_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } axi_comp_id_1_bits;
    };

    // AXI_COMP_ID_2 @ offset=0x00001FF8
    __IO uint32_t axi_comp_id_2_reg;

    // AXI_COMP_ID_3 @ offset=0x00001FFC
    __IO uint32_t axi_comp_id_3_reg;

    __IO uint8_t reserved2[8];

    // AXI_TARG1_FN_MOD_ISS_BM @ offset=0x00002008
    union {
        __IO uint32_t axi_targ1_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ1_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved3[24];

    // AXI_TARG1_FN_MOD2 @ offset=0x00002024
    __IO uint32_t axi_targ1_fn_mod2_reg;

    __IO uint8_t reserved4[4];

    // AXI_TARG1_FN_MOD_LB @ offset=0x0000202C
    __IO uint32_t axi_targ1_fn_mod_lb_reg;

    __IO uint8_t reserved5[216];

    // AXI_TARG1_FN_MOD @ offset=0x00002108
    union {
        __IO uint32_t axi_targ1_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ1_fn_mod_bits;
    };

    __IO uint8_t reserved6[3836];

    // AXI_TARG2_FN_MOD_ISS_BM @ offset=0x00003008
    union {
        __IO uint32_t axi_targ2_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ2_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved7[24];

    // AXI_TARG2_FN_MOD2 @ offset=0x00003024
    __IO uint32_t axi_targ2_fn_mod2_reg;

    __IO uint8_t reserved8[4];

    // AXI_TARG2_FN_MOD_LB @ offset=0x0000302C
    __IO uint32_t axi_targ2_fn_mod_lb_reg;

    __IO uint8_t reserved9[216];

    // AXI_TARG2_FN_MOD @ offset=0x00003108
    union {
        __IO uint32_t axi_targ2_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ2_fn_mod_bits;
    };

    __IO uint8_t reserved10[3836];

    // AXI_TARG3_FN_MOD_ISS_BM @ offset=0x00004008
    union {
        __IO uint32_t axi_targ3_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ3_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved11[4092];

    // AXI_TARG4_FN_MOD_ISS_BM @ offset=0x00005008
    union {
        __IO uint32_t axi_targ4_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ4_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved12[4092];

    // AXI_TARG5_FN_MOD_ISS_BM @ offset=0x00006008
    union {
        __IO uint32_t axi_targ5_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ5_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved13[4092];

    // AXI_TARG6_FN_MOD_ISS_BM @ offset=0x00007008
    union {
        __IO uint32_t axi_targ6_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ6_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved14[4096];

    // AXI_TARG7_FN_MOD_ISS_BM @ offset=0x0000800C
    union {
        __IO uint32_t axi_targ7_fn_mod_iss_bm_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ7_fn_mod_iss_bm_bits;
    };

    __IO uint8_t reserved15[20];

    // AXI_TARG7_FN_MOD2 @ offset=0x00008024
    __IO uint32_t axi_targ7_fn_mod2_reg;

    __IO uint8_t reserved16[224];

    // AXI_TARG7_FN_MOD @ offset=0x00008108
    union {
        __IO uint32_t axi_targ7_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_targ7_fn_mod_bits;
    };

    __IO uint8_t reserved17[237336];

    // AXI_INI1_FN_MOD2 @ offset=0x00042024
    __IO uint32_t axi_ini1_fn_mod2_reg;

    // AXI_INI1_FN_MOD_AHB @ offset=0x00042028
    union {
        __IO uint32_t axi_ini1_fn_mod_ahb_reg;

        // bit fields
        struct {
            __IO uint32_t rd_inc_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wr_inc_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini1_fn_mod_ahb_bits;
    };

    __IO uint8_t reserved18[212];

    // AXI_INI1_READ_QOS @ offset=0x00042100
    __IO uint32_t axi_ini1_read_qos_reg;

    // AXI_INI1_WRITE_QOS @ offset=0x00042104
    __IO uint32_t axi_ini1_write_qos_reg;

    // AXI_INI1_FN_MOD @ offset=0x00042108
    union {
        __IO uint32_t axi_ini1_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini1_fn_mod_bits;
    };

    __IO uint8_t reserved19[4084];

    // AXI_INI2_READ_QOS @ offset=0x00043100
    __IO uint32_t axi_ini2_read_qos_reg;

    // AXI_INI2_WRITE_QOS @ offset=0x00043104
    __IO uint32_t axi_ini2_write_qos_reg;

    // AXI_INI2_FN_MOD @ offset=0x00043108
    union {
        __IO uint32_t axi_ini2_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini2_fn_mod_bits;
    };

    __IO uint8_t reserved20[3864];

    // AXI_INI3_FN_MOD2 @ offset=0x00044024
    __IO uint32_t axi_ini3_fn_mod2_reg;

    // AXI_INI3_FN_MOD_AHB @ offset=0x00044028
    union {
        __IO uint32_t axi_ini3_fn_mod_ahb_reg;

        // bit fields
        struct {
            __IO uint32_t rd_inc_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wr_inc_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini3_fn_mod_ahb_bits;
    };

    __IO uint8_t reserved21[212];

    // AXI_INI3_READ_QOS @ offset=0x00044100
    __IO uint32_t axi_ini3_read_qos_reg;

    // AXI_INI3_WRITE_QOS @ offset=0x00044104
    __IO uint32_t axi_ini3_write_qos_reg;

    // AXI_INI3_FN_MOD @ offset=0x00044108
    union {
        __IO uint32_t axi_ini3_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini3_fn_mod_bits;
    };

    __IO uint8_t reserved22[4084];

    // AXI_INI4_READ_QOS @ offset=0x00045100
    __IO uint32_t axi_ini4_read_qos_reg;

    // AXI_INI4_WRITE_QOS @ offset=0x00045104
    __IO uint32_t axi_ini4_write_qos_reg;

    // AXI_INI4_FN_MOD @ offset=0x00045108
    union {
        __IO uint32_t axi_ini4_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini4_fn_mod_bits;
    };

    __IO uint8_t reserved23[4084];

    // AXI_INI5_READ_QOS @ offset=0x00046100
    __IO uint32_t axi_ini5_read_qos_reg;

    // AXI_INI5_WRITE_QOS @ offset=0x00046104
    __IO uint32_t axi_ini5_write_qos_reg;

    // AXI_INI5_FN_MOD @ offset=0x00046108
    union {
        __IO uint32_t axi_ini5_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini5_fn_mod_bits;
    };

    __IO uint8_t reserved24[4084];

    // AXI_INI6_READ_QOS @ offset=0x00047100
    __IO uint32_t axi_ini6_read_qos_reg;

    // AXI_INI6_WRITE_QOS @ offset=0x00047104
    __IO uint32_t axi_ini6_write_qos_reg;

    // AXI_INI6_FN_MOD @ offset=0x00047108
    union {
        __IO uint32_t axi_ini6_fn_mod_reg;

        // bit fields
        struct {
            __IO uint32_t read_iss_override_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t write_iss_override_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } axi_ini6_fn_mod_bits;
    };

} axi_t;

// Peripheral BDMA @ base_addess=0x58025400
typedef struct bdma_t {

    // BDMA_ISR @ offset=0x00000000
    union {
        __IO uint32_t bdma_isr_reg;

        // bit fields
        struct {
            __IO uint32_t gif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif4_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif4_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif5_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif5_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif5_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif6_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif6_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif7_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif7_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif7_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif7_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } bdma_isr_bits;
    };

    // BDMA_IFCR @ offset=0x00000004
    union {
        __IO uint32_t bdma_ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cgif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif4_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif4_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif5_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif5_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif5_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif6_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif6_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgif7_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctcif7_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t chtif7_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cteif7_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bdma_ifcr_bits;
    };

    // BDMA_CCR0 @ offset=0x00000008
    union {
        __IO uint32_t bdma_ccr0_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr0_bits;
    };

    // BDMA_CNDTR0 @ offset=0x0000000C
    __IO uint32_t bdma_cndtr0_reg;

    // BDMA_CPAR0 @ offset=0x00000010
    __IO uint32_t bdma_cpar0_reg;

    // BDMA_CM0AR0 @ offset=0x00000014
    __IO uint32_t bdma_cm0ar0_reg;

    // BDMA_CM1AR0 @ offset=0x00000018
    __IO uint32_t bdma_cm1ar0_reg;

    // BDMA_CCR1 @ offset=0x0000001C
    union {
        __IO uint32_t bdma_ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr1_bits;
    };

    // BDMA_CNDTR1 @ offset=0x00000020
    __IO uint32_t bdma_cndtr1_reg;

    // BDMA_CPAR1 @ offset=0x00000024
    __IO uint32_t bdma_cpar1_reg;

    // BDMA_CM0AR1 @ offset=0x00000028
    __IO uint32_t bdma_cm0ar1_reg;

    // BDMA_CM1AR1 @ offset=0x0000002C
    __IO uint32_t bdma_cm1ar1_reg;

    // BDMA_CCR2 @ offset=0x00000030
    union {
        __IO uint32_t bdma_ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr2_bits;
    };

    // BDMA_CNDTR2 @ offset=0x00000034
    __IO uint32_t bdma_cndtr2_reg;

    // BDMA_CPAR2 @ offset=0x00000038
    __IO uint32_t bdma_cpar2_reg;

    // BDMA_CM0AR2 @ offset=0x0000003C
    __IO uint32_t bdma_cm0ar2_reg;

    // BDMA_CM1AR2 @ offset=0x00000040
    __IO uint32_t bdma_cm1ar2_reg;

    // BDMA_CCR3 @ offset=0x00000044
    union {
        __IO uint32_t bdma_ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr3_bits;
    };

    // BDMA_CNDTR3 @ offset=0x00000048
    __IO uint32_t bdma_cndtr3_reg;

    // BDMA_CPAR3 @ offset=0x0000004C
    __IO uint32_t bdma_cpar3_reg;

    // BDMA_CM0AR3 @ offset=0x00000050
    __IO uint32_t bdma_cm0ar3_reg;

    // BDMA_CM1AR3 @ offset=0x00000054
    __IO uint32_t bdma_cm1ar3_reg;

    // BDMA_CCR4 @ offset=0x00000058
    union {
        __IO uint32_t bdma_ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr4_bits;
    };

    // BDMA_CNDTR4 @ offset=0x0000005C
    __IO uint32_t bdma_cndtr4_reg;

    // BDMA_CPAR4 @ offset=0x00000060
    __IO uint32_t bdma_cpar4_reg;

    // BDMA_CM0AR4 @ offset=0x00000064
    __IO uint32_t bdma_cm0ar4_reg;

    // BDMA_CM1AR4 @ offset=0x00000068
    __IO uint32_t bdma_cm1ar4_reg;

    // BDMA_CCR5 @ offset=0x0000006C
    union {
        __IO uint32_t bdma_ccr5_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr5_bits;
    };

    // BDMA_CNDTR5 @ offset=0x00000070
    __IO uint32_t bdma_cndtr5_reg;

    // BDMA_CPAR5 @ offset=0x00000074
    __IO uint32_t bdma_cpar5_reg;

    // BDMA_CM0AR5 @ offset=0x00000078
    __IO uint32_t bdma_cm0ar5_reg;

    // BDMA_CM1AR5 @ offset=0x0000007C
    __IO uint32_t bdma_cm1ar5_reg;

    // BDMA_CCR6 @ offset=0x00000080
    union {
        __IO uint32_t bdma_ccr6_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr6_bits;
    };

    // BDMA_CNDTR6 @ offset=0x00000084
    __IO uint32_t bdma_cndtr6_reg;

    // BDMA_CPAR6 @ offset=0x00000088
    __IO uint32_t bdma_cpar6_reg;

    // BDMA_CM0AR6 @ offset=0x0000008C
    __IO uint32_t bdma_cm0ar6_reg;

    // BDMA_CM1AR6 @ offset=0x00000090
    __IO uint32_t bdma_cm1ar6_reg;

    // BDMA_CCR7 @ offset=0x00000094
    union {
        __IO uint32_t bdma_ccr7_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t msize_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pl_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mem2mem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdma_ccr7_bits;
    };

    // BDMA_CNDTR7 @ offset=0x00000098
    __IO uint32_t bdma_cndtr7_reg;

    // BDMA_CPAR7 @ offset=0x0000009C
    __IO uint32_t bdma_cpar7_reg;

    // BDMA_CM0AR7 @ offset=0x000000A0
    __IO uint32_t bdma_cm0ar7_reg;

    // BDMA_CM1AR7 @ offset=0x000000A4
    __IO uint32_t bdma_cm1ar7_reg;

} bdma_t;

// Peripheral CAN_CCU @ base_addess=0x4000A800
typedef struct can_ccu_t {

    // CREL @ offset=0x00000000
    union {
        __IO uint32_t crel_reg;

        // bit fields
        struct {
            __IO uint32_t day_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t mon_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t year_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t substep_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t step_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t rel_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 3;
        } crel_bits;
    };

    // CCFG @ offset=0x00000004
    union {
        __IO uint32_t ccfg_reg;

        // bit fields
        struct {
            __IO uint32_t tqbt_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bcc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfl_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ocpm_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t cdiv_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t swr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ccfg_bits;
    };

    // CSTAT @ offset=0x00000008
    union {
        __IO uint32_t cstat_reg;

        // bit fields
        struct {
            __IO uint32_t ocpc_bit : 18; // bit offset=0  bit width=18  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t tqc_bit : 11; // bit offset=18  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 11;
            __IO uint32_t cals_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 1;
        } cstat_bits;
    };

    // CWD @ offset=0x0000000C
    union {
        __IO uint32_t cwd_reg;

        // bit fields
        struct {
            __IO uint32_t wdc_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t wdv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cwd_bits;
    };

    // IR @ offset=0x00000010
    union {
        __IO uint32_t ir_reg;

        // bit fields
        struct {
            __IO uint32_t cwe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } ir_bits;
    };

    // IE @ offset=0x00000014
    union {
        __IO uint32_t ie_reg;

        // bit fields
        struct {
            __IO uint32_t cwee_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csce_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } ie_bits;
    };

} can_ccu_t;

// Peripheral CEC @ base_addess=0x40006C00
typedef struct cec_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t cecen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txsom_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeom_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } cr_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t sft_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t rxtol_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brestp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bregen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbpegen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdnogen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sftopt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t oar_bit : 15; // bit offset=16  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t lstn_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // TXDR @ offset=0x00000008
    __IO uint32_t txdr_reg;

    // RXDR @ offset=0x0000000C
    __IO uint32_t rxdr_reg;

    // ISR @ offset=0x00000010
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t rxbr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxend_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxovr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bre_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbpe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbpe_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxacke_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arblst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txbr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txend_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txudr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txacke_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 19;
        } isr_bits;
    };

    // IER @ offset=0x00000014
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t rxbrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxendie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxovrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t breie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbpeie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbpeie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxackie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arblstie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txbrie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txendie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txudrie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txackie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 19;
        } ier_bits;
    };

} cec_t;

// Peripheral COMP1 @ base_addess=0x58003800
typedef struct comp1_t {

    // SR @ offset=0x00000000
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t c1val_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t c2val_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 14;
            __IO uint32_t c1if_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t c2if_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } sr_bits;
    };

    // ICFR @ offset=0x00000004
    union {
        __IO uint32_t icfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t cc1if_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2if_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 14;
        } icfr_bits;
    };

    // OR @ offset=0x00000008
    union {
        __IO uint32_t or_reg;

        // bit fields
        struct {
            __IO uint32_t afop_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t or_bit : 21; // bit offset=11  bit width=21  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } or_bits;
    };

    // CFGR1 @ offset=0x0000000C
    union {
        __IO uint32_t cfgr1_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brgen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scalen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t polarity_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t iten_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t hyst_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t pwrmode_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t inmsel_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t inpsel_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t blanking_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 6;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr1_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t cfgr2_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brgen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scalen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t polarity_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t winmode_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t iten_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t hyst_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t pwrmode_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t inmsel_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t inpsel_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t blanking_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 6;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr2_bits;
    };

} comp1_t;

// Peripheral CRC @ base_addess=0x58024C00
typedef struct crc_t {

    // DR @ offset=0x00000000
    __IO uint32_t dr_reg;

    // IDR @ offset=0x00000004
    __IO uint32_t idr_reg;

    // CR @ offset=0x00000008
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t reset_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t polysize_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t rev_in_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t rev_out_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 24;
        } cr_bits;
    };

    __IO uint8_t reserved0[4];

    // INIT @ offset=0x00000010
    __IO uint32_t init_reg;

    // POL @ offset=0x00000014
    __IO uint32_t pol_reg;

} crc_t;

// Peripheral CRS @ base_addess=0x40008400
typedef struct crs_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t syncokie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncwarnie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t errie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t esyncie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t cen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autotrimen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t trim_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } cr_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reload_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t felim_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t syncdiv_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t syncsrc_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t syncpol_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // ISR @ offset=0x00000008
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t syncokf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t syncwarnf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t errf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t esyncf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 4;
            __IO uint32_t syncerr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t syncmiss_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t trimovf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 4;
            __IO uint32_t fedir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fecap_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 15;
        } isr_bits;
    };

    // ICR @ offset=0x0000000C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t syncokc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncwarnc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t errc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t esyncc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 28;
        } icr_bits;
    };

} crs_t;

// Peripheral DAC @ base_addess=0x40007400
typedef struct dac_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t en1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ten1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsel1_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t wave1_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mamp1_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t dmaen1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaudrie1_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t en2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ten2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsel2_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t wave2_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mamp2_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dmaen2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaudrie2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 1;
        } cr_bits;
    };

    // SWTRGR @ offset=0x00000004
    union {
        __IO uint32_t swtrgr_reg;

        // bit fields
        struct {
            __IO uint32_t swtrig1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t swtrig2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 30;
        } swtrgr_bits;
    };

    // DHR12R1 @ offset=0x00000008
    __IO uint32_t dhr12r1_reg;

    // DHR12L1 @ offset=0x0000000C
    __IO uint32_t dhr12l1_reg;

    // DHR8R1 @ offset=0x00000010
    __IO uint32_t dhr8r1_reg;

    // DHR12R2 @ offset=0x00000014
    __IO uint32_t dhr12r2_reg;

    // DHR12L2 @ offset=0x00000018
    __IO uint32_t dhr12l2_reg;

    // DHR8R2 @ offset=0x0000001C
    __IO uint32_t dhr8r2_reg;

    // DHR12RD @ offset=0x00000020
    union {
        __IO uint32_t dhr12rd_reg;

        // bit fields
        struct {
            __IO uint32_t dacc1dhr_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t dacc2dhr_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dhr12rd_bits;
    };

    // DHR12LD @ offset=0x00000024
    union {
        __IO uint32_t dhr12ld_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t dacc1dhr_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 15;
            __IO uint32_t dacc2dhr_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 11;
        } dhr12ld_bits;
    };

    // DHR8RD @ offset=0x00000028
    union {
        __IO uint32_t dhr8rd_reg;

        // bit fields
        struct {
            __IO uint32_t dacc1dhr_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t dacc2dhr_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dhr8rd_bits;
    };

    // DOR1 @ offset=0x0000002C
    __IO uint32_t dor1_reg;

    // DOR2 @ offset=0x00000030
    __IO uint32_t dor2_reg;

    // SR @ offset=0x00000034
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 13;
            __IO uint32_t dmaudr1_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cal_flag1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bwst1_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 13;
            __IO uint32_t dmaudr2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cal_flag2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bwst2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // CCR @ offset=0x00000038
    union {
        __IO uint32_t ccr_reg;

        // bit fields
        struct {
            __IO uint32_t otrim1_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t otrim2_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } ccr_bits;
    };

    // MCR @ offset=0x0000003C
    union {
        __IO uint32_t mcr_reg;

        // bit fields
        struct {
            __IO uint32_t mode1_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t mode2_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mcr_bits;
    };

    // SHSR1 @ offset=0x00000040
    __IO uint32_t shsr1_reg;

    // SHSR2 @ offset=0x00000044
    __IO uint32_t shsr2_reg;

    // SHHR @ offset=0x00000048
    union {
        __IO uint32_t shhr_reg;

        // bit fields
        struct {
            __IO uint32_t thold1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t thold2_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } shhr_bits;
    };

    // SHRR @ offset=0x0000004C
    union {
        __IO uint32_t shrr_reg;

        // bit fields
        struct {
            __IO uint32_t trefresh1_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t trefresh2_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } shrr_bits;
    };

} dac_t;

// Peripheral DBGMCU @ base_addess=0x5C001000
typedef struct dbgmcu_t {

    // IDC @ offset=0x00000000
    union {
        __IO uint32_t idc_reg;

        // bit fields
        struct {
            __IO uint32_t dev_id_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t rev_id_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } idc_bits;
    };

    // CR @ offset=0x00000004
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t dbgsleep_d1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbgstop_d1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbgstby_d1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbgsleep_d2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbgstop_d2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbgstby_d2_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dbgstop_d3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbgstby_d3_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 11;
            __IO uint32_t traceclken_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t d1dbgcken_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t d3dbgcken_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t trgoen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } cr_bits;
    };

    __IO uint8_t reserved0[44];

    // APB3FZ1 @ offset=0x00000034
    __IO uint32_t apb3fz1_reg;

    __IO uint8_t reserved1[4];

    // APB1LFZ1 @ offset=0x0000003C
    union {
        __IO uint32_t apb1lfz1_reg;

        // bit fields
        struct {
            __IO uint32_t dbg_tim2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim3_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim5_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim6_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim7_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim12_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim13_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim14_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_lptim1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t dbg_i2c1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_i2c2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_i2c3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 8;
        } apb1lfz1_bits;
    };

    __IO uint8_t reserved2[12];

    // APB2FZ1 @ offset=0x0000004C
    union {
        __IO uint32_t apb2fz1_reg;

        // bit fields
        struct {
            __IO uint32_t dbg_tim1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim8_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t dbg_tim15_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim16_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_tim17_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 10;
            __IO uint32_t dbg_hrtim_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } apb2fz1_bits;
    };

    __IO uint8_t reserved3[4];

    // APB4FZ1 @ offset=0x00000054
    union {
        __IO uint32_t apb4fz1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t dbg_i2c4_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t dbg_lptim2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_lptim3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_lptim4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbg_lptim5_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t dbg_rtc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t dbg_iwdg1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 13;
        } apb4fz1_bits;
    };

} dbgmcu_t;

// Peripheral DCMI @ base_addess=0x48020000
typedef struct dcmi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t oels_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsm_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oebs_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bsm_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t enable_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t edm_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fcrc_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t vspol_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hspol_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pckpol_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ess_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jpeg_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crop_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t capture_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr_bits;
    };

    // SR @ offset=0x00000004
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t fne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vsync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hsync_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } sr_bits;
    };

    // RIS @ offset=0x00000008
    union {
        __IO uint32_t ris_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t line_ris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vsync_ris_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t err_ris_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_ris_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t frame_ris_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } ris_bits;
    };

    // IER @ offset=0x0000000C
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t line_ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vsync_ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t err_ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovr_ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frame_ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } ier_bits;
    };

    // MIS @ offset=0x00000010
    union {
        __IO uint32_t mis_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t line_mis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vsync_mis_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t err_mis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_mis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t frame_mis_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } mis_bits;
    };

    // ICR @ offset=0x00000014
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t line_isc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t vsync_isc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t err_isc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovr_isc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t frame_isc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } icr_bits;
    };

    // ESCR @ offset=0x00000018
    union {
        __IO uint32_t escr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t fec_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t lec_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsc_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 4;
        } escr_bits;
    };

    // ESUR @ offset=0x0000001C
    union {
        __IO uint32_t esur_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t feu_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t leu_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsu_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsu_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 4;
        } esur_bits;
    };

    // CWSTRT @ offset=0x00000020
    union {
        __IO uint32_t cwstrt_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t vst_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t hoffcnt_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cwstrt_bits;
    };

    // CWSIZE @ offset=0x00000024
    union {
        __IO uint32_t cwsize_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t vline_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t capcnt_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cwsize_bits;
    };

    // DR @ offset=0x00000028
    union {
        __IO uint32_t dr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t byte3_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t byte2_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t byte1_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t byte0_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 4;
        } dr_bits;
    };

} dcmi_t;

// Peripheral DELAY_Block_QUADSPI @ base_addess=0x52006000
typedef struct delay_block_quadspi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t den_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } cr_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t unit_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t lng_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t lngf_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

} delay_block_quadspi_t;

// Peripheral DELAY_Block_SDMMC1 @ base_addess=0x52008000
typedef struct delay_block_sdmmc1_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t den_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } cr_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t unit_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t lng_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t lngf_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

} delay_block_sdmmc1_t;

// Peripheral DELAY_Block_SDMMC2 @ base_addess=0x48022800
typedef struct delay_block_sdmmc2_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t den_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } cr_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t unit_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t lng_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t lngf_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

} delay_block_sdmmc2_t;

// Peripheral DFSDM @ base_addess=0x40017000
typedef struct dfsdm_t {

    // DFSDM_CHCFG0R1 @ offset=0x00000000
    union {
        __IO uint32_t dfsdm_chcfg0r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg0r1_bits;
    };

    // DFSDM_CHCFG1R1 @ offset=0x00000004
    union {
        __IO uint32_t dfsdm_chcfg1r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg1r1_bits;
    };

    // DFSDM_CHCFG2R1 @ offset=0x00000008
    union {
        __IO uint32_t dfsdm_chcfg2r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg2r1_bits;
    };

    // DFSDM_CHCFG3R1 @ offset=0x0000000C
    union {
        __IO uint32_t dfsdm_chcfg3r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg3r1_bits;
    };

    // DFSDM_CHCFG4R1 @ offset=0x00000010
    union {
        __IO uint32_t dfsdm_chcfg4r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg4r1_bits;
    };

    // DFSDM_CHCFG5R1 @ offset=0x00000014
    union {
        __IO uint32_t dfsdm_chcfg5r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg5r1_bits;
    };

    // DFSDM_CHCFG6R1 @ offset=0x00000018
    union {
        __IO uint32_t dfsdm_chcfg6r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg6r1_bits;
    };

    // DFSDM_CHCFG7R1 @ offset=0x0000001C
    union {
        __IO uint32_t dfsdm_chcfg7r1_reg;

        // bit fields
        struct {
            __IO uint32_t sitp_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t spicksel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t scden_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckaben_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chinsel_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t datmpx_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t datpack_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ckoutdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 13;
            __IO uint32_t ckoutsrc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dfsdmen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dfsdm_chcfg7r1_bits;
    };

    // DFSDM_CHCFG0R2 @ offset=0x00000020
    union {
        __IO uint32_t dfsdm_chcfg0r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg0r2_bits;
    };

    // DFSDM_CHCFG1R2 @ offset=0x00000024
    union {
        __IO uint32_t dfsdm_chcfg1r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg1r2_bits;
    };

    // DFSDM_CHCFG2R2 @ offset=0x00000028
    union {
        __IO uint32_t dfsdm_chcfg2r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg2r2_bits;
    };

    // DFSDM_CHCFG3R2 @ offset=0x0000002C
    union {
        __IO uint32_t dfsdm_chcfg3r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg3r2_bits;
    };

    // DFSDM_CHCFG4R2 @ offset=0x00000030
    union {
        __IO uint32_t dfsdm_chcfg4r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg4r2_bits;
    };

    // DFSDM_CHCFG5R2 @ offset=0x00000034
    union {
        __IO uint32_t dfsdm_chcfg5r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg5r2_bits;
    };

    // DFSDM_CHCFG6R2 @ offset=0x00000038
    union {
        __IO uint32_t dfsdm_chcfg6r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg6r2_bits;
    };

    // DFSDM_CHCFG7R2 @ offset=0x0000003C
    union {
        __IO uint32_t dfsdm_chcfg7r2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtrbs_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t offset_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } dfsdm_chcfg7r2_bits;
    };

    // DFSDM_AWSCD0R @ offset=0x00000040
    union {
        __IO uint32_t dfsdm_awscd0r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd0r_bits;
    };

    // DFSDM_AWSCD1R @ offset=0x00000044
    union {
        __IO uint32_t dfsdm_awscd1r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd1r_bits;
    };

    // DFSDM_AWSCD2R @ offset=0x00000048
    union {
        __IO uint32_t dfsdm_awscd2r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd2r_bits;
    };

    // DFSDM_AWSCD3R @ offset=0x0000004C
    union {
        __IO uint32_t dfsdm_awscd3r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd3r_bits;
    };

    // DFSDM_AWSCD4R @ offset=0x00000050
    union {
        __IO uint32_t dfsdm_awscd4r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd4r_bits;
    };

    // DFSDM_AWSCD5R @ offset=0x00000054
    union {
        __IO uint32_t dfsdm_awscd5r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd5r_bits;
    };

    // DFSDM_AWSCD6R @ offset=0x00000058
    union {
        __IO uint32_t dfsdm_awscd6r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd6r_bits;
    };

    // DFSDM_AWSCD7R @ offset=0x0000005C
    union {
        __IO uint32_t dfsdm_awscd7r_reg;

        // bit fields
        struct {
            __IO uint32_t scdt_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t bkscd_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t awfosr_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t awford_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 9;
        } dfsdm_awscd7r_bits;
    };

    // DFSDM_CHWDAT0R @ offset=0x00000060
    __IO uint32_t dfsdm_chwdat0r_reg;

    // DFSDM_CHWDAT1R @ offset=0x00000064
    __IO uint32_t dfsdm_chwdat1r_reg;

    // DFSDM_CHWDAT2R @ offset=0x00000068
    __IO uint32_t dfsdm_chwdat2r_reg;

    // DFSDM_CHWDAT3R @ offset=0x0000006C
    __IO uint32_t dfsdm_chwdat3r_reg;

    // DFSDM_CHWDAT4R @ offset=0x00000070
    __IO uint32_t dfsdm_chwdat4r_reg;

    // DFSDM_CHWDAT5R @ offset=0x00000074
    __IO uint32_t dfsdm_chwdat5r_reg;

    // DFSDM_CHWDAT6R @ offset=0x00000078
    __IO uint32_t dfsdm_chwdat6r_reg;

    // DFSDM_CHWDAT7R @ offset=0x0000007C
    __IO uint32_t dfsdm_chwdat7r_reg;

    // DFSDM_CHDATIN0R @ offset=0x00000080
    union {
        __IO uint32_t dfsdm_chdatin0r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin0r_bits;
    };

    // DFSDM_CHDATIN1R @ offset=0x00000084
    union {
        __IO uint32_t dfsdm_chdatin1r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin1r_bits;
    };

    // DFSDM_CHDATIN2R @ offset=0x00000088
    union {
        __IO uint32_t dfsdm_chdatin2r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin2r_bits;
    };

    // DFSDM_CHDATIN3R @ offset=0x0000008C
    union {
        __IO uint32_t dfsdm_chdatin3r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin3r_bits;
    };

    // DFSDM_CHDATIN4R @ offset=0x00000090
    union {
        __IO uint32_t dfsdm_chdatin4r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin4r_bits;
    };

    // DFSDM_CHDATIN5R @ offset=0x00000094
    union {
        __IO uint32_t dfsdm_chdatin5r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin5r_bits;
    };

    // DFSDM_CHDATIN6R @ offset=0x00000098
    union {
        __IO uint32_t dfsdm_chdatin6r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin6r_bits;
    };

    // DFSDM_CHDATIN7R @ offset=0x0000009C
    union {
        __IO uint32_t dfsdm_chdatin7r_reg;

        // bit fields
        struct {
            __IO uint32_t indat0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t indat1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } dfsdm_chdatin7r_bits;
    };

    // DFSDM0_CR1 @ offset=0x000000A0
    union {
        __IO uint32_t dfsdm0_cr1_reg;

        // bit fields
        struct {
            __IO uint32_t dfen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jswstart_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t jsync_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jscan_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdmaen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t jextsel_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t jexten_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t rswstart_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcont_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rsync_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t rdmaen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t rch_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t fast_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awfsel_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 1;
        } dfsdm0_cr1_bits;
    };

    // DFSDM1_CR1 @ offset=0x000000A4
    union {
        __IO uint32_t dfsdm1_cr1_reg;

        // bit fields
        struct {
            __IO uint32_t dfen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jswstart_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t jsync_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jscan_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdmaen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t jextsel_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t jexten_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t rswstart_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcont_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rsync_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t rdmaen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t rch_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t fast_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awfsel_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 1;
        } dfsdm1_cr1_bits;
    };

    // DFSDM2_CR1 @ offset=0x000000A8
    union {
        __IO uint32_t dfsdm2_cr1_reg;

        // bit fields
        struct {
            __IO uint32_t dfen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jswstart_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t jsync_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jscan_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdmaen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t jextsel_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t jexten_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t rswstart_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcont_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rsync_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t rdmaen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t rch_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t fast_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awfsel_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 1;
        } dfsdm2_cr1_bits;
    };

    // DFSDM3_CR1 @ offset=0x000000AC
    union {
        __IO uint32_t dfsdm3_cr1_reg;

        // bit fields
        struct {
            __IO uint32_t dfen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jswstart_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t jsync_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jscan_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jdmaen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t jextsel_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t jexten_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t rswstart_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcont_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rsync_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t rdmaen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t rch_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t fast_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awfsel_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 1;
        } dfsdm3_cr1_bits;
    };

    // DFSDM0_CR2 @ offset=0x000000B0
    union {
        __IO uint32_t dfsdm0_cr2_reg;

        // bit fields
        struct {
            __IO uint32_t jeocie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reocie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scdie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckabie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t exch_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t awdch_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } dfsdm0_cr2_bits;
    };

    // DFSDM1_CR2 @ offset=0x000000B4
    union {
        __IO uint32_t dfsdm1_cr2_reg;

        // bit fields
        struct {
            __IO uint32_t jeocie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reocie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scdie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckabie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t exch_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t awdch_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } dfsdm1_cr2_bits;
    };

    // DFSDM2_CR2 @ offset=0x000000B8
    union {
        __IO uint32_t dfsdm2_cr2_reg;

        // bit fields
        struct {
            __IO uint32_t jeocie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reocie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scdie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckabie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t exch_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t awdch_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } dfsdm2_cr2_bits;
    };

    // DFSDM3_CR2 @ offset=0x000000BC
    union {
        __IO uint32_t dfsdm3_cr2_reg;

        // bit fields
        struct {
            __IO uint32_t jeocie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reocie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jovrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rovrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awdie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scdie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckabie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t exch_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t awdch_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } dfsdm3_cr2_bits;
    };

    // DFSDM0_ISR @ offset=0x000000C0
    union {
        __IO uint32_t dfsdm0_isr_reg;

        // bit fields
        struct {
            __IO uint32_t jeocf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reocf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awdf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 8;
            __IO uint32_t jcip_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rcip_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t ckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 7;
            __IO uint32_t scdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 7;
        } dfsdm0_isr_bits;
    };

    // DFSDM1_ISR @ offset=0x000000C4
    union {
        __IO uint32_t dfsdm1_isr_reg;

        // bit fields
        struct {
            __IO uint32_t jeocf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reocf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awdf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 8;
            __IO uint32_t jcip_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rcip_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t ckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 7;
            __IO uint32_t scdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 7;
        } dfsdm1_isr_bits;
    };

    // DFSDM2_ISR @ offset=0x000000C8
    union {
        __IO uint32_t dfsdm2_isr_reg;

        // bit fields
        struct {
            __IO uint32_t jeocf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reocf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awdf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 8;
            __IO uint32_t jcip_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rcip_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t ckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 7;
            __IO uint32_t scdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 7;
        } dfsdm2_isr_bits;
    };

    // DFSDM3_ISR @ offset=0x000000CC
    union {
        __IO uint32_t dfsdm3_isr_reg;

        // bit fields
        struct {
            __IO uint32_t jeocf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reocf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t jovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t awdf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 8;
            __IO uint32_t jcip_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rcip_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t ckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 7;
            __IO uint32_t scdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 7;
        } dfsdm3_isr_bits;
    };

    // DFSDM0_ICR @ offset=0x000000D0
    union {
        __IO uint32_t dfsdm0_icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t clrjovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clrrovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t clrckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t clrscdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } dfsdm0_icr_bits;
    };

    // DFSDM1_ICR @ offset=0x000000D4
    union {
        __IO uint32_t dfsdm1_icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t clrjovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clrrovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t clrckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t clrscdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } dfsdm1_icr_bits;
    };

    // DFSDM2_ICR @ offset=0x000000D8
    union {
        __IO uint32_t dfsdm2_icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t clrjovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clrrovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t clrckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t clrscdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } dfsdm2_icr_bits;
    };

    // DFSDM3_ICR @ offset=0x000000DC
    union {
        __IO uint32_t dfsdm3_icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t clrjovrf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clrrovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t clrckabf_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t clrscdf_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } dfsdm3_icr_bits;
    };

    // DFSDM0_JCHGR @ offset=0x000000E0
    __IO uint32_t dfsdm0_jchgr_reg;

    // DFSDM1_JCHGR @ offset=0x000000E4
    __IO uint32_t dfsdm1_jchgr_reg;

    // DFSDM2_JCHGR @ offset=0x000000E8
    __IO uint32_t dfsdm2_jchgr_reg;

    // DFSDM3_JCHGR @ offset=0x000000EC
    __IO uint32_t dfsdm3_jchgr_reg;

    // DFSDM0_FCR @ offset=0x000000F0
    union {
        __IO uint32_t dfsdm0_fcr_reg;

        // bit fields
        struct {
            __IO uint32_t iosr_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t fosr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t ford_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } dfsdm0_fcr_bits;
    };

    // DFSDM1_FCR @ offset=0x000000F4
    union {
        __IO uint32_t dfsdm1_fcr_reg;

        // bit fields
        struct {
            __IO uint32_t iosr_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t fosr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t ford_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } dfsdm1_fcr_bits;
    };

    // DFSDM2_FCR @ offset=0x000000F8
    union {
        __IO uint32_t dfsdm2_fcr_reg;

        // bit fields
        struct {
            __IO uint32_t iosr_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t fosr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t ford_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } dfsdm2_fcr_bits;
    };

    // DFSDM3_FCR @ offset=0x000000FC
    union {
        __IO uint32_t dfsdm3_fcr_reg;

        // bit fields
        struct {
            __IO uint32_t iosr_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t fosr_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 12;
            __IO uint32_t ford_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } dfsdm3_fcr_bits;
    };

    // DFSDM0_JDATAR @ offset=0x00000100
    union {
        __IO uint32_t dfsdm0_jdatar_reg;

        // bit fields
        struct {
            __IO uint32_t jdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t jdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm0_jdatar_bits;
    };

    // DFSDM1_JDATAR @ offset=0x00000104
    union {
        __IO uint32_t dfsdm1_jdatar_reg;

        // bit fields
        struct {
            __IO uint32_t jdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t jdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm1_jdatar_bits;
    };

    // DFSDM2_JDATAR @ offset=0x00000108
    union {
        __IO uint32_t dfsdm2_jdatar_reg;

        // bit fields
        struct {
            __IO uint32_t jdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t jdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm2_jdatar_bits;
    };

    // DFSDM3_JDATAR @ offset=0x0000010C
    union {
        __IO uint32_t dfsdm3_jdatar_reg;

        // bit fields
        struct {
            __IO uint32_t jdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t jdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm3_jdatar_bits;
    };

    // DFSDM0_RDATAR @ offset=0x00000110
    union {
        __IO uint32_t dfsdm0_rdatar_reg;

        // bit fields
        struct {
            __IO uint32_t rdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t rpend_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t rdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 23;
        } dfsdm0_rdatar_bits;
    };

    // DFSDM1_RDATAR @ offset=0x00000114
    union {
        __IO uint32_t dfsdm1_rdatar_reg;

        // bit fields
        struct {
            __IO uint32_t rdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t rpend_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t rdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 23;
        } dfsdm1_rdatar_bits;
    };

    // DFSDM2_RDATAR @ offset=0x00000118
    union {
        __IO uint32_t dfsdm2_rdatar_reg;

        // bit fields
        struct {
            __IO uint32_t rdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t rpend_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t rdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 23;
        } dfsdm2_rdatar_bits;
    };

    // DFSDM3_RDATAR @ offset=0x0000011C
    union {
        __IO uint32_t dfsdm3_rdatar_reg;

        // bit fields
        struct {
            __IO uint32_t rdatach_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t rpend_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t rdata_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 23;
        } dfsdm3_rdatar_bits;
    };

    // DFSDM0_AWHTR @ offset=0x00000120
    union {
        __IO uint32_t dfsdm0_awhtr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawh_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awht_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm0_awhtr_bits;
    };

    // DFSDM1_AWHTR @ offset=0x00000124
    union {
        __IO uint32_t dfsdm1_awhtr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawh_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awht_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm1_awhtr_bits;
    };

    // DFSDM2_AWHTR @ offset=0x00000128
    union {
        __IO uint32_t dfsdm2_awhtr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawh_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awht_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm2_awhtr_bits;
    };

    // DFSDM3_AWHTR @ offset=0x0000012C
    union {
        __IO uint32_t dfsdm3_awhtr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawh_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awht_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm3_awhtr_bits;
    };

    // DFSDM0_AWLTR @ offset=0x00000130
    union {
        __IO uint32_t dfsdm0_awltr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawl_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awlt_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm0_awltr_bits;
    };

    // DFSDM1_AWLTR @ offset=0x00000134
    union {
        __IO uint32_t dfsdm1_awltr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawl_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awlt_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm1_awltr_bits;
    };

    // DFSDM2_AWLTR @ offset=0x00000138
    union {
        __IO uint32_t dfsdm2_awltr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawl_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awlt_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm2_awltr_bits;
    };

    // DFSDM3_AWLTR @ offset=0x0000013C
    union {
        __IO uint32_t dfsdm3_awltr_reg;

        // bit fields
        struct {
            __IO uint32_t bkawl_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t awlt_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm3_awltr_bits;
    };

    // DFSDM0_AWSR @ offset=0x00000140
    union {
        __IO uint32_t dfsdm0_awsr_reg;

        // bit fields
        struct {
            __IO uint32_t awltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t awhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm0_awsr_bits;
    };

    // DFSDM1_AWSR @ offset=0x00000144
    union {
        __IO uint32_t dfsdm1_awsr_reg;

        // bit fields
        struct {
            __IO uint32_t awltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t awhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm1_awsr_bits;
    };

    // DFSDM2_AWSR @ offset=0x00000148
    union {
        __IO uint32_t dfsdm2_awsr_reg;

        // bit fields
        struct {
            __IO uint32_t awltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t awhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm2_awsr_bits;
    };

    // DFSDM3_AWSR @ offset=0x0000014C
    union {
        __IO uint32_t dfsdm3_awsr_reg;

        // bit fields
        struct {
            __IO uint32_t awltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t awhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm3_awsr_bits;
    };

    // DFSDM0_AWCFR @ offset=0x00000150
    union {
        __IO uint32_t dfsdm0_awcfr_reg;

        // bit fields
        struct {
            __IO uint32_t clrawltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t clrawhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm0_awcfr_bits;
    };

    // DFSDM1_AWCFR @ offset=0x00000154
    union {
        __IO uint32_t dfsdm1_awcfr_reg;

        // bit fields
        struct {
            __IO uint32_t clrawltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t clrawhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm1_awcfr_bits;
    };

    // DFSDM2_AWCFR @ offset=0x00000158
    union {
        __IO uint32_t dfsdm2_awcfr_reg;

        // bit fields
        struct {
            __IO uint32_t clrawltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t clrawhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm2_awcfr_bits;
    };

    // DFSDM3_AWCFR @ offset=0x0000015C
    union {
        __IO uint32_t dfsdm3_awcfr_reg;

        // bit fields
        struct {
            __IO uint32_t clrawltf_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t clrawhtf_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } dfsdm3_awcfr_bits;
    };

    // DFSDM0_EXMAX @ offset=0x00000160
    union {
        __IO uint32_t dfsdm0_exmax_reg;

        // bit fields
        struct {
            __IO uint32_t exmaxch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmax_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm0_exmax_bits;
    };

    // DFSDM1_EXMAX @ offset=0x00000164
    union {
        __IO uint32_t dfsdm1_exmax_reg;

        // bit fields
        struct {
            __IO uint32_t exmaxch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmax_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm1_exmax_bits;
    };

    // DFSDM2_EXMAX @ offset=0x00000168
    union {
        __IO uint32_t dfsdm2_exmax_reg;

        // bit fields
        struct {
            __IO uint32_t exmaxch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmax_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm2_exmax_bits;
    };

    // DFSDM3_EXMAX @ offset=0x0000016C
    union {
        __IO uint32_t dfsdm3_exmax_reg;

        // bit fields
        struct {
            __IO uint32_t exmaxch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmax_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm3_exmax_bits;
    };

    // DFSDM0_EXMIN @ offset=0x00000170
    union {
        __IO uint32_t dfsdm0_exmin_reg;

        // bit fields
        struct {
            __IO uint32_t exminch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmin_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm0_exmin_bits;
    };

    // DFSDM1_EXMIN @ offset=0x00000174
    union {
        __IO uint32_t dfsdm1_exmin_reg;

        // bit fields
        struct {
            __IO uint32_t exminch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmin_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm1_exmin_bits;
    };

    // DFSDM2_EXMIN @ offset=0x00000178
    union {
        __IO uint32_t dfsdm2_exmin_reg;

        // bit fields
        struct {
            __IO uint32_t exminch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmin_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm2_exmin_bits;
    };

    // DFSDM3_EXMIN @ offset=0x0000017C
    union {
        __IO uint32_t dfsdm3_exmin_reg;

        // bit fields
        struct {
            __IO uint32_t exminch_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t exmin_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } dfsdm3_exmin_bits;
    };

    // DFSDM0_CNVTIMR @ offset=0x00000180
    __IO uint32_t dfsdm0_cnvtimr_reg;

    // DFSDM1_CNVTIMR @ offset=0x00000184
    __IO uint32_t dfsdm1_cnvtimr_reg;

    // DFSDM2_CNVTIMR @ offset=0x00000188
    __IO uint32_t dfsdm2_cnvtimr_reg;

    // DFSDM3_CNVTIMR @ offset=0x0000018C
    __IO uint32_t dfsdm3_cnvtimr_reg;

} dfsdm_t;

// Peripheral DMA1 @ base_addess=0x40020000
typedef struct dma1_t {

    // LISR @ offset=0x00000000
    union {
        __IO uint32_t lisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t tcif3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } lisr_bits;
    };

    // HISR @ offset=0x00000004
    union {
        __IO uint32_t hisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t tcif7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } hisr_bits;
    };

    // LIFCR @ offset=0x00000008
    union {
        __IO uint32_t lifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t ctcif3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } lifcr_bits;
    };

    // HIFCR @ offset=0x0000000C
    union {
        __IO uint32_t hifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t ctcif7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } hifcr_bits;
    };

    // S0CR @ offset=0x00000010
    union {
        __IO uint32_t s0cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s0cr_bits;
    };

    // S0NDTR @ offset=0x00000014
    __IO uint32_t s0ndtr_reg;

    // S0PAR @ offset=0x00000018
    __IO uint32_t s0par_reg;

    // S0M0AR @ offset=0x0000001C
    __IO uint32_t s0m0ar_reg;

    // S0M1AR @ offset=0x00000020
    __IO uint32_t s0m1ar_reg;

    // S0FCR @ offset=0x00000024
    union {
        __IO uint32_t s0fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s0fcr_bits;
    };

    // S1CR @ offset=0x00000028
    union {
        __IO uint32_t s1cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s1cr_bits;
    };

    // S1NDTR @ offset=0x0000002C
    __IO uint32_t s1ndtr_reg;

    // S1PAR @ offset=0x00000030
    __IO uint32_t s1par_reg;

    // S1M0AR @ offset=0x00000034
    __IO uint32_t s1m0ar_reg;

    // S1M1AR @ offset=0x00000038
    __IO uint32_t s1m1ar_reg;

    // S1FCR @ offset=0x0000003C
    union {
        __IO uint32_t s1fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s1fcr_bits;
    };

    // S2CR @ offset=0x00000040
    union {
        __IO uint32_t s2cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s2cr_bits;
    };

    // S2NDTR @ offset=0x00000044
    __IO uint32_t s2ndtr_reg;

    // S2PAR @ offset=0x00000048
    __IO uint32_t s2par_reg;

    // S2M0AR @ offset=0x0000004C
    __IO uint32_t s2m0ar_reg;

    // S2M1AR @ offset=0x00000050
    __IO uint32_t s2m1ar_reg;

    // S2FCR @ offset=0x00000054
    union {
        __IO uint32_t s2fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s2fcr_bits;
    };

    // S3CR @ offset=0x00000058
    union {
        __IO uint32_t s3cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s3cr_bits;
    };

    // S3NDTR @ offset=0x0000005C
    __IO uint32_t s3ndtr_reg;

    // S3PAR @ offset=0x00000060
    __IO uint32_t s3par_reg;

    // S3M0AR @ offset=0x00000064
    __IO uint32_t s3m0ar_reg;

    // S3M1AR @ offset=0x00000068
    __IO uint32_t s3m1ar_reg;

    // S3FCR @ offset=0x0000006C
    union {
        __IO uint32_t s3fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s3fcr_bits;
    };

    // S4CR @ offset=0x00000070
    union {
        __IO uint32_t s4cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s4cr_bits;
    };

    // S4NDTR @ offset=0x00000074
    __IO uint32_t s4ndtr_reg;

    // S4PAR @ offset=0x00000078
    __IO uint32_t s4par_reg;

    // S4M0AR @ offset=0x0000007C
    __IO uint32_t s4m0ar_reg;

    // S4M1AR @ offset=0x00000080
    __IO uint32_t s4m1ar_reg;

    // S4FCR @ offset=0x00000084
    union {
        __IO uint32_t s4fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s4fcr_bits;
    };

    // S5CR @ offset=0x00000088
    union {
        __IO uint32_t s5cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s5cr_bits;
    };

    // S5NDTR @ offset=0x0000008C
    __IO uint32_t s5ndtr_reg;

    // S5PAR @ offset=0x00000090
    __IO uint32_t s5par_reg;

    // S5M0AR @ offset=0x00000094
    __IO uint32_t s5m0ar_reg;

    // S5M1AR @ offset=0x00000098
    __IO uint32_t s5m1ar_reg;

    // S5FCR @ offset=0x0000009C
    union {
        __IO uint32_t s5fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s5fcr_bits;
    };

    // S6CR @ offset=0x000000A0
    union {
        __IO uint32_t s6cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s6cr_bits;
    };

    // S6NDTR @ offset=0x000000A4
    __IO uint32_t s6ndtr_reg;

    // S6PAR @ offset=0x000000A8
    __IO uint32_t s6par_reg;

    // S6M0AR @ offset=0x000000AC
    __IO uint32_t s6m0ar_reg;

    // S6M1AR @ offset=0x000000B0
    __IO uint32_t s6m1ar_reg;

    // S6FCR @ offset=0x000000B4
    union {
        __IO uint32_t s6fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s6fcr_bits;
    };

    // S7CR @ offset=0x000000B8
    union {
        __IO uint32_t s7cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s7cr_bits;
    };

    // S7NDTR @ offset=0x000000BC
    __IO uint32_t s7ndtr_reg;

    // S7PAR @ offset=0x000000C0
    __IO uint32_t s7par_reg;

    // S7M0AR @ offset=0x000000C4
    __IO uint32_t s7m0ar_reg;

    // S7M1AR @ offset=0x000000C8
    __IO uint32_t s7m1ar_reg;

    // S7FCR @ offset=0x000000CC
    union {
        __IO uint32_t s7fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s7fcr_bits;
    };

} dma1_t;

// Peripheral DMA2 @ base_addess=0x40020400
typedef struct dma2_t {

    // LISR @ offset=0x00000000
    union {
        __IO uint32_t lisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t tcif3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } lisr_bits;
    };

    // HISR @ offset=0x00000004
    union {
        __IO uint32_t hisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t tcif7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t htif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teif4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmeif4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t feif4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } hisr_bits;
    };

    // LIFCR @ offset=0x00000008
    union {
        __IO uint32_t lifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t ctcif3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } lifcr_bits;
    };

    // HIFCR @ offset=0x0000000C
    union {
        __IO uint32_t hifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t ctcif7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chtif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cteif4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdmeif4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfeif4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } hifcr_bits;
    };

    // S0CR @ offset=0x00000010
    union {
        __IO uint32_t s0cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s0cr_bits;
    };

    // S0NDTR @ offset=0x00000014
    __IO uint32_t s0ndtr_reg;

    // S0PAR @ offset=0x00000018
    __IO uint32_t s0par_reg;

    // S0M0AR @ offset=0x0000001C
    __IO uint32_t s0m0ar_reg;

    // S0M1AR @ offset=0x00000020
    __IO uint32_t s0m1ar_reg;

    // S0FCR @ offset=0x00000024
    union {
        __IO uint32_t s0fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s0fcr_bits;
    };

    // S1CR @ offset=0x00000028
    union {
        __IO uint32_t s1cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s1cr_bits;
    };

    // S1NDTR @ offset=0x0000002C
    __IO uint32_t s1ndtr_reg;

    // S1PAR @ offset=0x00000030
    __IO uint32_t s1par_reg;

    // S1M0AR @ offset=0x00000034
    __IO uint32_t s1m0ar_reg;

    // S1M1AR @ offset=0x00000038
    __IO uint32_t s1m1ar_reg;

    // S1FCR @ offset=0x0000003C
    union {
        __IO uint32_t s1fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s1fcr_bits;
    };

    // S2CR @ offset=0x00000040
    union {
        __IO uint32_t s2cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s2cr_bits;
    };

    // S2NDTR @ offset=0x00000044
    __IO uint32_t s2ndtr_reg;

    // S2PAR @ offset=0x00000048
    __IO uint32_t s2par_reg;

    // S2M0AR @ offset=0x0000004C
    __IO uint32_t s2m0ar_reg;

    // S2M1AR @ offset=0x00000050
    __IO uint32_t s2m1ar_reg;

    // S2FCR @ offset=0x00000054
    union {
        __IO uint32_t s2fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s2fcr_bits;
    };

    // S3CR @ offset=0x00000058
    union {
        __IO uint32_t s3cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s3cr_bits;
    };

    // S3NDTR @ offset=0x0000005C
    __IO uint32_t s3ndtr_reg;

    // S3PAR @ offset=0x00000060
    __IO uint32_t s3par_reg;

    // S3M0AR @ offset=0x00000064
    __IO uint32_t s3m0ar_reg;

    // S3M1AR @ offset=0x00000068
    __IO uint32_t s3m1ar_reg;

    // S3FCR @ offset=0x0000006C
    union {
        __IO uint32_t s3fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s3fcr_bits;
    };

    // S4CR @ offset=0x00000070
    union {
        __IO uint32_t s4cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s4cr_bits;
    };

    // S4NDTR @ offset=0x00000074
    __IO uint32_t s4ndtr_reg;

    // S4PAR @ offset=0x00000078
    __IO uint32_t s4par_reg;

    // S4M0AR @ offset=0x0000007C
    __IO uint32_t s4m0ar_reg;

    // S4M1AR @ offset=0x00000080
    __IO uint32_t s4m1ar_reg;

    // S4FCR @ offset=0x00000084
    union {
        __IO uint32_t s4fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s4fcr_bits;
    };

    // S5CR @ offset=0x00000088
    union {
        __IO uint32_t s5cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s5cr_bits;
    };

    // S5NDTR @ offset=0x0000008C
    __IO uint32_t s5ndtr_reg;

    // S5PAR @ offset=0x00000090
    __IO uint32_t s5par_reg;

    // S5M0AR @ offset=0x00000094
    __IO uint32_t s5m0ar_reg;

    // S5M1AR @ offset=0x00000098
    __IO uint32_t s5m1ar_reg;

    // S5FCR @ offset=0x0000009C
    union {
        __IO uint32_t s5fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s5fcr_bits;
    };

    // S6CR @ offset=0x000000A0
    union {
        __IO uint32_t s6cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s6cr_bits;
    };

    // S6NDTR @ offset=0x000000A4
    __IO uint32_t s6ndtr_reg;

    // S6PAR @ offset=0x000000A8
    __IO uint32_t s6par_reg;

    // S6M0AR @ offset=0x000000AC
    __IO uint32_t s6m0ar_reg;

    // S6M1AR @ offset=0x000000B0
    __IO uint32_t s6m1ar_reg;

    // S6FCR @ offset=0x000000B4
    union {
        __IO uint32_t s6fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s6fcr_bits;
    };

    // S7CR @ offset=0x000000B8
    union {
        __IO uint32_t s7cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t mburst_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pburst_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ct_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pincos_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msize_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t minc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t circ_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pfctrl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t htie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } s7cr_bits;
    };

    // S7NDTR @ offset=0x000000BC
    __IO uint32_t s7ndtr_reg;

    // S7PAR @ offset=0x000000C0
    __IO uint32_t s7par_reg;

    // S7M0AR @ offset=0x000000C4
    __IO uint32_t s7m0ar_reg;

    // S7M1AR @ offset=0x000000C8
    __IO uint32_t s7m1ar_reg;

    // S7FCR @ offset=0x000000CC
    union {
        __IO uint32_t s7fcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t feie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fs_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmdis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fth_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 21;
        } s7fcr_bits;
    };

} dma2_t;

// Peripheral DMA2D @ base_addess=0x52001000
typedef struct dma2d_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t start_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t susp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abort_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t teie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t twie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t caeie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ceie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t mode_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } cr_bits;
    };

    // ISR @ offset=0x00000004
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t twif_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t caeif_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ceif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 26;
        } isr_bits;
    };

    // IFCR @ offset=0x00000008
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcif_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctwif_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t caecif_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cctcif_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cceif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 26;
        } ifcr_bits;
    };

    // FGMAR @ offset=0x0000000C
    __IO uint32_t fgmar_reg;

    // FGOR @ offset=0x00000010
    __IO uint32_t fgor_reg;

    // BGMAR @ offset=0x00000014
    __IO uint32_t bgmar_reg;

    // BGOR @ offset=0x00000018
    __IO uint32_t bgor_reg;

    // FGPFCCR @ offset=0x0000001C
    union {
        __IO uint32_t fgpfccr_reg;

        // bit fields
        struct {
            __IO uint32_t cm_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ccm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t cs_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t am_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t css_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ai_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbs_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t alpha_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 7;
        } fgpfccr_bits;
    };

    // FGCOLR @ offset=0x00000020
    union {
        __IO uint32_t fgcolr_reg;

        // bit fields
        struct {
            __IO uint32_t blue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t green_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t red_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fgcolr_bits;
    };

    // BGPFCCR @ offset=0x00000024
    union {
        __IO uint32_t bgpfccr_reg;

        // bit fields
        struct {
            __IO uint32_t cm_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ccm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t cs_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t am_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t ai_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbs_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t alpha_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 7;
        } bgpfccr_bits;
    };

    // BGCOLR @ offset=0x00000028
    union {
        __IO uint32_t bgcolr_reg;

        // bit fields
        struct {
            __IO uint32_t blue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t green_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t red_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } bgcolr_bits;
    };

    // FGCMAR @ offset=0x0000002C
    __IO uint32_t fgcmar_reg;

    // BGCMAR @ offset=0x00000030
    __IO uint32_t bgcmar_reg;

    // OPFCCR @ offset=0x00000034
    union {
        __IO uint32_t opfccr_reg;

        // bit fields
        struct {
            __IO uint32_t cm_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 19;
            __IO uint32_t ai_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbs_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } opfccr_bits;
    };

    // OCOLR @ offset=0x00000038
    union {
        __IO uint32_t ocolr_reg;

        // bit fields
        struct {
            __IO uint32_t blue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t green_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t red_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t alpha_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } ocolr_bits;
    };

    // OMAR @ offset=0x0000003C
    __IO uint32_t omar_reg;

    // OOR @ offset=0x00000040
    __IO uint32_t oor_reg;

    // NLR @ offset=0x00000044
    union {
        __IO uint32_t nlr_reg;

        // bit fields
        struct {
            __IO uint32_t nl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t pl_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } nlr_bits;
    };

    // LWR @ offset=0x00000048
    __IO uint32_t lwr_reg;

    // AMTCR @ offset=0x0000004C
    union {
        __IO uint32_t amtcr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t dt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } amtcr_bits;
    };

} dma2d_t;

// Peripheral DMAMUX1 @ base_addess=0x40020800
typedef struct dmamux1_t {

    // DMAMUX_C0CR @ offset=0x00000000
    union {
        __IO uint32_t dmamux_c0cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c0cr_bits;
    };

    // DMAMUX_C1CR @ offset=0x00000004
    union {
        __IO uint32_t dmamux_c1cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c1cr_bits;
    };

    // DMAMUX_C2CR @ offset=0x00000008
    union {
        __IO uint32_t dmamux_c2cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c2cr_bits;
    };

    // DMAMUX_C3CR @ offset=0x0000000C
    union {
        __IO uint32_t dmamux_c3cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c3cr_bits;
    };

    // DMAMUX_C4CR @ offset=0x00000010
    union {
        __IO uint32_t dmamux_c4cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c4cr_bits;
    };

    // DMAMUX_C5CR @ offset=0x00000014
    union {
        __IO uint32_t dmamux_c5cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c5cr_bits;
    };

    // DMAMUX_C6CR @ offset=0x00000018
    union {
        __IO uint32_t dmamux_c6cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c6cr_bits;
    };

    // DMAMUX_C7CR @ offset=0x0000001C
    union {
        __IO uint32_t dmamux_c7cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c7cr_bits;
    };

    // DMAMUX_C8CR @ offset=0x00000020
    union {
        __IO uint32_t dmamux_c8cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c8cr_bits;
    };

    // DMAMUX_C9CR @ offset=0x00000024
    union {
        __IO uint32_t dmamux_c9cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c9cr_bits;
    };

    // DMAMUX_C10CR @ offset=0x00000028
    union {
        __IO uint32_t dmamux_c10cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c10cr_bits;
    };

    // DMAMUX_C11CR @ offset=0x0000002C
    union {
        __IO uint32_t dmamux_c11cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c11cr_bits;
    };

    // DMAMUX_C12CR @ offset=0x00000030
    union {
        __IO uint32_t dmamux_c12cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c12cr_bits;
    };

    // DMAMUX_C13CR @ offset=0x00000034
    union {
        __IO uint32_t dmamux_c13cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c13cr_bits;
    };

    // DMAMUX_C14CR @ offset=0x00000038
    union {
        __IO uint32_t dmamux_c14cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c14cr_bits;
    };

    // DMAMUX_C15CR @ offset=0x0000003C
    union {
        __IO uint32_t dmamux_c15cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } dmamux_c15cr_bits;
    };

    __IO uint8_t reserved0[64];

    // DMAMUX_CSR @ offset=0x00000080
    union {
        __IO uint32_t dmamux_csr_reg;

        // bit fields
        struct {
            __IO uint32_t sof0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } dmamux_csr_bits;
    };

    // DMAMUX_CFR @ offset=0x00000084
    union {
        __IO uint32_t dmamux_cfr_reg;

        // bit fields
        struct {
            __IO uint32_t csof0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 16;
        } dmamux_cfr_bits;
    };

    __IO uint8_t reserved1[120];

    // DMAMUX_RG0CR @ offset=0x00000100
    union {
        __IO uint32_t dmamux_rg0cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg0cr_bits;
    };

    // DMAMUX_RG1CR @ offset=0x00000104
    union {
        __IO uint32_t dmamux_rg1cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg1cr_bits;
    };

    // DMAMUX_RG2CR @ offset=0x00000108
    union {
        __IO uint32_t dmamux_rg2cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg2cr_bits;
    };

    // DMAMUX_RG3CR @ offset=0x0000010C
    union {
        __IO uint32_t dmamux_rg3cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg3cr_bits;
    };

    // DMAMUX_RG4CR @ offset=0x00000110
    union {
        __IO uint32_t dmamux_rg4cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg4cr_bits;
    };

    // DMAMUX_RG5CR @ offset=0x00000114
    union {
        __IO uint32_t dmamux_rg5cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg5cr_bits;
    };

    // DMAMUX_RG6CR @ offset=0x00000118
    union {
        __IO uint32_t dmamux_rg6cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg6cr_bits;
    };

    // DMAMUX_RG7CR @ offset=0x0000011C
    union {
        __IO uint32_t dmamux_rg7cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } dmamux_rg7cr_bits;
    };

    __IO uint8_t reserved2[32];

    // DMAMUX_RGSR @ offset=0x00000140
    union {
        __IO uint32_t dmamux_rgsr_reg;

        // bit fields
        struct {
            __IO uint32_t of0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 24;
        } dmamux_rgsr_bits;
    };

    // DMAMUX_RGCFR @ offset=0x00000144
    union {
        __IO uint32_t dmamux_rgcfr_reg;

        // bit fields
        struct {
            __IO uint32_t cof0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cof7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 24;
        } dmamux_rgcfr_bits;
    };

} dmamux1_t;

// Peripheral DMAMUX2 @ base_addess=0x58025800
typedef struct dmamux2_t {

    // C0CR @ offset=0x00000000
    union {
        __IO uint32_t c0cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c0cr_bits;
    };

    // C1CR @ offset=0x00000004
    union {
        __IO uint32_t c1cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c1cr_bits;
    };

    // C2CR @ offset=0x00000008
    union {
        __IO uint32_t c2cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c2cr_bits;
    };

    // C3CR @ offset=0x0000000C
    union {
        __IO uint32_t c3cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c3cr_bits;
    };

    // C4CR @ offset=0x00000010
    union {
        __IO uint32_t c4cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c4cr_bits;
    };

    // C5CR @ offset=0x00000014
    union {
        __IO uint32_t c5cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c5cr_bits;
    };

    // C6CR @ offset=0x00000018
    union {
        __IO uint32_t c6cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c6cr_bits;
    };

    // C7CR @ offset=0x0000001C
    union {
        __IO uint32_t c7cr_reg;

        // bit fields
        struct {
            __IO uint32_t dmareq_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t soie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ege_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t se_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t sync_id_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } c7cr_bits;
    };

    __IO uint8_t reserved0[96];

    // CSR @ offset=0x00000080
    union {
        __IO uint32_t csr_reg;

        // bit fields
        struct {
            __IO uint32_t sof0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 24;
        } csr_bits;
    };

    // CFR @ offset=0x00000084
    union {
        __IO uint32_t cfr_reg;

        // bit fields
        struct {
            __IO uint32_t csof0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csof7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 24;
        } cfr_bits;
    };

    __IO uint8_t reserved1[120];

    // RG0CR @ offset=0x00000100
    union {
        __IO uint32_t rg0cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg0cr_bits;
    };

    // RG1CR @ offset=0x00000104
    union {
        __IO uint32_t rg1cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg1cr_bits;
    };

    // RG2CR @ offset=0x00000108
    union {
        __IO uint32_t rg2cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg2cr_bits;
    };

    // RG3CR @ offset=0x0000010C
    union {
        __IO uint32_t rg3cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg3cr_bits;
    };

    // RG4CR @ offset=0x00000110
    union {
        __IO uint32_t rg4cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg4cr_bits;
    };

    // RG5CR @ offset=0x00000114
    union {
        __IO uint32_t rg5cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg5cr_bits;
    };

    // RG6CR @ offset=0x00000118
    union {
        __IO uint32_t rg6cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg6cr_bits;
    };

    // RG7CR @ offset=0x0000011C
    union {
        __IO uint32_t rg7cr_reg;

        // bit fields
        struct {
            __IO uint32_t sig_id_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t oie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpol_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gnbreq_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 12;
        } rg7cr_bits;
    };

    __IO uint8_t reserved2[32];

    // RGSR @ offset=0x00000140
    union {
        __IO uint32_t rgsr_reg;

        // bit fields
        struct {
            __IO uint32_t of0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t of7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 24;
        } rgsr_bits;
    };

    // RGCFR @ offset=0x00000144
    union {
        __IO uint32_t rgcfr_reg;

        // bit fields
        struct {
            __IO uint32_t cof0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 24;
        } rgcfr_bits;
    };

} dmamux2_t;

// Peripheral EXTI @ base_addess=0x58000000
typedef struct exti_t {

    // RTSR1 @ offset=0x00000000
    union {
        __IO uint32_t rtsr1_reg;

        // bit fields
        struct {
            __IO uint32_t tr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 10;
        } rtsr1_bits;
    };

    // FTSR1 @ offset=0x00000004
    union {
        __IO uint32_t ftsr1_reg;

        // bit fields
        struct {
            __IO uint32_t tr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 10;
        } ftsr1_bits;
    };

    // SWIER1 @ offset=0x00000008
    union {
        __IO uint32_t swier1_reg;

        // bit fields
        struct {
            __IO uint32_t swier0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 10;
        } swier1_bits;
    };

    // D3PMR1 @ offset=0x0000000C
    union {
        __IO uint32_t d3pmr1_reg;

        // bit fields
        struct {
            __IO uint32_t mr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t mr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t mr25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 6;
        } d3pmr1_bits;
    };

    // D3PCR1L @ offset=0x00000010
    union {
        __IO uint32_t d3pcr1l_reg;

        // bit fields
        struct {
            __IO uint32_t pcs0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pcs1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pcs2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pcs3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pcs4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pcs5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pcs6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pcs7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pcs8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pcs9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pcs10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pcs11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pcs12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pcs13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pcs14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pcs15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } d3pcr1l_bits;
    };

    // D3PCR1H @ offset=0x00000014
    union {
        __IO uint32_t d3pcr1h_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t pcs19_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pcs20_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pcs21_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t pcs25_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 13;
        } d3pcr1h_bits;
    };

    __IO uint8_t reserved0[8];

    // RTSR2 @ offset=0x00000020
    union {
        __IO uint32_t rtsr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t tr49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t tr51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 12;
        } rtsr2_bits;
    };

    // FTSR2 @ offset=0x00000024
    union {
        __IO uint32_t ftsr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t tr49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t tr51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 12;
        } ftsr2_bits;
    };

    // SWIER2 @ offset=0x00000028
    union {
        __IO uint32_t swier2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t swier49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swier51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 12;
        } swier2_bits;
    };

    // D3PMR2 @ offset=0x0000002C
    union {
        __IO uint32_t d3pmr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t mr34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t mr41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t mr48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 10;
        } d3pmr2_bits;
    };

    // D3PCR2L @ offset=0x00000030
    union {
        __IO uint32_t d3pcr2l_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t pcs35_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcs34_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 10;
            __IO uint32_t pcs41_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } d3pcr2l_bits;
    };

    // D3PCR2H @ offset=0x00000034
    union {
        __IO uint32_t d3pcr2h_reg;

        // bit fields
        struct {
            __IO uint32_t pcs48_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pcs49_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pcs50_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pcs51_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pcs52_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pcs53_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 21;
        } d3pcr2h_bits;
    };

    __IO uint8_t reserved1[8];

    // RTSR3 @ offset=0x00000040
    union {
        __IO uint32_t rtsr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 18;
            __IO uint32_t tr82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t tr84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 9;
        } rtsr3_bits;
    };

    // FTSR3 @ offset=0x00000044
    union {
        __IO uint32_t ftsr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 18;
            __IO uint32_t tr82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t tr84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tr86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 9;
        } ftsr3_bits;
    };

    // SWIER3 @ offset=0x00000048
    union {
        __IO uint32_t swier3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 18;
            __IO uint32_t swier82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swier84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swier86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 9;
        } swier3_bits;
    };

    // D3PMR3 @ offset=0x0000004C
    __IO uint32_t d3pmr3_reg;

    __IO uint8_t reserved2[4];

    // D3PCR3H @ offset=0x00000054
    __IO uint32_t d3pcr3h_reg;

    __IO uint8_t reserved3[40];

    // CPUIMR1 @ offset=0x00000080
    union {
        __IO uint32_t cpuimr1_reg;

        // bit fields
        struct {
            __IO uint32_t mr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cpuimr1_bits;
    };

    // CPUEMR1 @ offset=0x00000084
    union {
        __IO uint32_t cpuemr1_reg;

        // bit fields
        struct {
            __IO uint32_t mr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cpuemr1_bits;
    };

    // CPUPR1 @ offset=0x00000088
    union {
        __IO uint32_t cpupr1_reg;

        // bit fields
        struct {
            __IO uint32_t pr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 10;
        } cpupr1_bits;
    };

    __IO uint8_t reserved4[4];

    // CPUIMR2 @ offset=0x00000090
    union {
        __IO uint32_t cpuimr2_reg;

        // bit fields
        struct {
            __IO uint32_t mr0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mr14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cpuimr2_bits;
    };

    // CPUEMR2 @ offset=0x00000094
    union {
        __IO uint32_t cpuemr2_reg;

        // bit fields
        struct {
            __IO uint32_t mr32_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr33_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr36_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr37_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr38_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr39_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr40_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr42_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr43_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr44_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mr46_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr47_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr54_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr55_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr56_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr57_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr58_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr59_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr60_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr61_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr62_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mr63_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cpuemr2_bits;
    };

    // CPUPR2 @ offset=0x00000098
    union {
        __IO uint32_t cpupr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t pr49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t pr51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 12;
        } cpupr2_bits;
    };

    __IO uint8_t reserved5[4];

    // CPUIMR3 @ offset=0x000000A0
    union {
        __IO uint32_t cpuimr3_reg;

        // bit fields
        struct {
            __IO uint32_t mr64_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr65_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr66_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr67_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr68_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr69_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr70_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr71_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr72_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr73_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr74_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr75_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr76_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr77_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr78_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr79_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr80_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t mr82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t mr84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr87_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr88_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } cpuimr3_bits;
    };

    // CPUEMR3 @ offset=0x000000A4
    union {
        __IO uint32_t cpuemr3_reg;

        // bit fields
        struct {
            __IO uint32_t mr64_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr65_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr66_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr67_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr68_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr69_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr70_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr71_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr72_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr73_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr74_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr75_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr76_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr77_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr78_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr79_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr80_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t mr82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t mr84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr87_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mr88_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } cpuemr3_bits;
    };

    // CPUPR3 @ offset=0x000000A8
    union {
        __IO uint32_t cpupr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 18;
            __IO uint32_t pr82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t pr84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pr85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pr86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 9;
        } cpupr3_bits;
    };

} exti_t;

// Peripheral Ethernet_DMA @ base_addess=0x40029000
typedef struct ethernet_dma_t {

    // DMAMR @ offset=0x00000000
    union {
        __IO uint32_t dmamr_reg;

        // bit fields
        struct {
            __IO uint32_t swr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t da_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t txpr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pr_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t intm_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } dmamr_bits;
    };

    // DMASBMR @ offset=0x00000004
    union {
        __IO uint32_t dmasbmr_reg;

        // bit fields
        struct {
            __IO uint32_t fb_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t aal_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mb_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rb_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 16;
        } dmasbmr_bits;
    };

    // DMAISR @ offset=0x00000008
    union {
        __IO uint32_t dmaisr_reg;

        // bit fields
        struct {
            __IO uint32_t dc0is_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t mtlis_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t macis_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } dmaisr_bits;
    };

    // DMADSR @ offset=0x0000000C
    union {
        __IO uint32_t dmadsr_reg;

        // bit fields
        struct {
            __IO uint32_t axwhsts_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t rps0_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t tps0_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 19;
        } dmadsr_bits;
    };

    __IO uint8_t reserved0[240];

    // DMACCR @ offset=0x00000100
    union {
        __IO uint32_t dmaccr_reg;

        // bit fields
        struct {
            __IO uint32_t mss_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t pblx8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t dsl_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } dmaccr_bits;
    };

    // DMACTxCR @ offset=0x00000104
    union {
        __IO uint32_t dmactxcr_reg;

        // bit fields
        struct {
            __IO uint32_t st_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t osf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t tse_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t txpbl_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } dmactxcr_bits;
    };

    // DMACRxCR @ offset=0x00000108
    union {
        __IO uint32_t dmacrxcr_reg;

        // bit fields
        struct {
            __IO uint32_t sr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbsz_bit : 14; // bit offset=1  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t rxpbl_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t rpf_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } dmacrxcr_bits;
    };

    __IO uint8_t reserved1[8];

    // DMACTxDLAR @ offset=0x00000114
    __IO uint32_t dmactxdlar_reg;

    __IO uint8_t reserved2[4];

    // DMACRxDLAR @ offset=0x0000011C
    __IO uint32_t dmacrxdlar_reg;

    // DMACTxDTPR @ offset=0x00000120
    __IO uint32_t dmactxdtpr_reg;

    __IO uint8_t reserved3[4];

    // DMACRxDTPR @ offset=0x00000128
    __IO uint32_t dmacrxdtpr_reg;

    // DMACTxRLR @ offset=0x0000012C
    __IO uint32_t dmactxrlr_reg;

    // DMACRxRLR @ offset=0x00000130
    __IO uint32_t dmacrxrlr_reg;

    // DMACIER @ offset=0x00000134
    union {
        __IO uint32_t dmacier_reg;

        // bit fields
        struct {
            __IO uint32_t tie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txse_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbue_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t rie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbue_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwte_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t erie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fbee_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cdee_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nie_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } dmacier_bits;
    };

    // DMACRxIWTR @ offset=0x00000138
    __IO uint32_t dmacrxiwtr_reg;

    __IO uint8_t reserved4[8];

    // DMACCATxDR @ offset=0x00000144
    __IO uint32_t dmaccatxdr_reg;

    __IO uint8_t reserved5[4];

    // DMACCARxDR @ offset=0x0000014C
    __IO uint32_t dmaccarxdr_reg;

    __IO uint8_t reserved6[4];

    // DMACCATxBR @ offset=0x00000154
    __IO uint32_t dmaccatxbr_reg;

    __IO uint8_t reserved7[4];

    // DMACCARxBR @ offset=0x0000015C
    __IO uint32_t dmaccarxbr_reg;

    // DMACSR @ offset=0x00000160
    union {
        __IO uint32_t dmacsr_reg;

        // bit fields
        struct {
            __IO uint32_t ti_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tps_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbu_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ri_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbu_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rps_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t et_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t er_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fbe_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cde_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ais_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nis_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teb_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t reb_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 12;
        } dmacsr_bits;
    };

    __IO uint8_t reserved8[8];

    // DMACMFCR @ offset=0x0000016C
    union {
        __IO uint32_t dmacmfcr_reg;

        // bit fields
        struct {
            __IO uint32_t mfc_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 14;
            __IO uint32_t mfco_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 16;
        } dmacmfcr_bits;
    };

} ethernet_dma_t;

// Peripheral Ethernet_MAC @ base_addess=0x40028000
typedef struct ethernet_mac_t {

    // MACCR @ offset=0x00000000
    union {
        __IO uint32_t maccr_reg;

        // bit fields
        struct {
            __IO uint32_t re_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t prelen_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bl_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t dr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcrs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t do_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ecrsfd_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lm_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dm_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fes_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t je_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jd_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t wd_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t acs_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t s2kp_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpslce_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ipg_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t ipc_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sarc_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t arpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } maccr_bits;
    };

    // MACECR @ offset=0x00000004
    union {
        __IO uint32_t macecr_reg;

        // bit fields
        struct {
            __IO uint32_t gpsl_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t dcrcc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usp_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t eipgen_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eipg_bit : 5; // bit offset=25  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 6;
        } macecr_bits;
    };

    // MACPFR @ offset=0x00000008
    union {
        __IO uint32_t macpfr_reg;

        // bit fields
        struct {
            __IO uint32_t pr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t huc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hmc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t daif_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcf_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t saif_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t saf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hpf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t vtfe_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t ipfe_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dntu_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 9;
            __IO uint32_t ra_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } macpfr_bits;
    };

    // MACWTR @ offset=0x0000000C
    union {
        __IO uint32_t macwtr_reg;

        // bit fields
        struct {
            __IO uint32_t wto_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t pwe_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } macwtr_bits;
    };

    // MACHT0R @ offset=0x00000010
    __IO uint32_t macht0r_reg;

    // MACHT1R @ offset=0x00000014
    __IO uint32_t macht1r_reg;

    __IO uint8_t reserved0[56];

    // MACVTR @ offset=0x00000050
    union {
        __IO uint32_t macvtr_reg;

        // bit fields
        struct {
            __IO uint32_t vl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t etv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vtim_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t esvl_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ersvlm_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dovltc_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t evls_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t evlrxs_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vthm_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t edvlp_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t erivlt_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eivls_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t eivlrxs_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } macvtr_bits;
    };

    __IO uint8_t reserved1[4];

    // MACVHTR @ offset=0x00000058
    __IO uint32_t macvhtr_reg;

    __IO uint8_t reserved2[4];

    // MACVIR @ offset=0x00000060
    union {
        __IO uint32_t macvir_reg;

        // bit fields
        struct {
            __IO uint32_t vlt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t vlc_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t vlp_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csvl_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vlti_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 11;
        } macvir_bits;
    };

    // MACIVIR @ offset=0x00000064
    union {
        __IO uint32_t macivir_reg;

        // bit fields
        struct {
            __IO uint32_t vlt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t vlc_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t vlp_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csvl_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vlti_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 11;
        } macivir_bits;
    };

    __IO uint8_t reserved3[8];

    // MACQTxFCR @ offset=0x00000070
    union {
        __IO uint32_t macqtxfcr_reg;

        // bit fields
        struct {
            __IO uint32_t fcb_bpa_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tfe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t plt_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t dzpq_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 8;
            __IO uint32_t pt_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } macqtxfcr_bits;
    };

    __IO uint8_t reserved4[28];

    // MACRxFCR @ offset=0x00000090
    union {
        __IO uint32_t macrxfcr_reg;

        // bit fields
        struct {
            __IO uint32_t rfe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t up_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } macrxfcr_bits;
    };

    __IO uint8_t reserved5[28];

    // MACISR @ offset=0x000000B0
    union {
        __IO uint32_t macisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t phyis_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pmtis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lpiis_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t mmcis_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mmcrxis_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mmctxis_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t tsis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txstsis_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxstsis_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 17;
        } macisr_bits;
    };

    // MACIER @ offset=0x000000B4
    union {
        __IO uint32_t macier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t phyie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pmtie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpiie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t tsie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txstsie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxstsie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } macier_bits;
    };

    // MACRxTxSR @ offset=0x000000B8
    union {
        __IO uint32_t macrxtxsr_reg;

        // bit fields
        struct {
            __IO uint32_t tjt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ncarr_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lcarr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t exdef_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lcol_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t excol_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t rwt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } macrxtxsr_bits;
    };

    __IO uint8_t reserved6[4];

    // MACPCSR @ offset=0x000000C0
    union {
        __IO uint32_t macpcsr_reg;

        // bit fields
        struct {
            __IO uint32_t pwrdwn_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mgkpkten_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwkpkten_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t mgkprcvd_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwkprcvd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t glblucast_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwkpfe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 13;
            __IO uint32_t rwkptr_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 6;
            __IO uint32_t rwkfiltrst_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } macpcsr_bits;
    };

    // MACRWKPFR @ offset=0x000000C4
    __IO uint32_t macrwkpfr_reg;

    __IO uint8_t reserved7[8];

    // MACLCSR @ offset=0x000000D0
    union {
        __IO uint32_t maclcsr_reg;

        // bit fields
        struct {
            __IO uint32_t tlpien_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tlpiex_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rlpien_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rlpiex_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 4;
            __IO uint32_t tlpist_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rlpist_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 6;
            __IO uint32_t lpien_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pls_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t plsen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpitxa_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpite_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 11;
        } maclcsr_bits;
    };

    // MACLTCR @ offset=0x000000D4
    union {
        __IO uint32_t macltcr_reg;

        // bit fields
        struct {
            __IO uint32_t twt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t lst_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } macltcr_bits;
    };

    // MACLETR @ offset=0x000000D8
    __IO uint32_t macletr_reg;

    // MAC1USTCR @ offset=0x000000DC
    __IO uint32_t mac1ustcr_reg;

    __IO uint8_t reserved8[48];

    // MACVR @ offset=0x00000110
    union {
        __IO uint32_t macvr_reg;

        // bit fields
        struct {
            __IO uint32_t snpsver_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t userver_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } macvr_bits;
    };

    // MACDR @ offset=0x00000114
    union {
        __IO uint32_t macdr_reg;

        // bit fields
        struct {
            __IO uint32_t rpests_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rfcfcsts_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 14;
            __IO uint32_t tpests_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tfcsts_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } macdr_bits;
    };

    __IO uint8_t reserved9[8];

    // MACHWF1R @ offset=0x00000120
    union {
        __IO uint32_t machwf1r_reg;

        // bit fields
        struct {
            __IO uint32_t rxfifosize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 5;
            __IO uint32_t txfifosize_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 4;
            __IO uint32_t osten_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ptoen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t advthword_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addr64_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t dcben_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sphen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsoen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dbgmema_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t avsel_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 3;
            __IO uint32_t hashtblsz_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved4: 2;
            __IO uint32_t l3l4fnum_bit : 4; // bit offset=27  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved5 : 4;
        } machwf1r_bits;
    };

    // MACHWF2R @ offset=0x00000124
    union {
        __IO uint32_t machwf2r_reg;

        // bit fields
        struct {
            __IO uint32_t rxqcnt_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 5;
            __IO uint32_t txqcnt_bit : 4; // bit offset=6  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 5;
            __IO uint32_t rxchcnt_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 5;
            __IO uint32_t txchcnt_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 5;
            __IO uint32_t ppsoutnum_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved4: 3;
            __IO uint32_t auxsnapnum_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved5 : 3;
        } machwf2r_bits;
    };

    __IO uint8_t reserved10[216];

    // MACMDIOAR @ offset=0x00000200
    union {
        __IO uint32_t macmdioar_reg;

        // bit fields
        struct {
            __IO uint32_t mb_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t c45e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t goc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t skap_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cr_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t ntc_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t rda_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 4;
            __IO uint32_t pa_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 4;
            __IO uint32_t btb_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pse_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 4;
        } macmdioar_bits;
    };

    // MACMDIODR @ offset=0x00000204
    union {
        __IO uint32_t macmdiodr_reg;

        // bit fields
        struct {
            __IO uint32_t md_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ra_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } macmdiodr_bits;
    };

    __IO uint8_t reserved11[248];

    // MACA0HR @ offset=0x00000300
    union {
        __IO uint32_t maca0hr_reg;

        // bit fields
        struct {
            __IO uint32_t addrhi_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t ae_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } maca0hr_bits;
    };

    // MACA0LR @ offset=0x00000304
    __IO uint32_t maca0lr_reg;

    // MACA1HR @ offset=0x00000308
    union {
        __IO uint32_t maca1hr_reg;

        // bit fields
        struct {
            __IO uint32_t addrhi_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 23;
            __IO uint32_t mbc_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t sa_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ae_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } maca1hr_bits;
    };

    // MACA1LR @ offset=0x0000030C
    __IO uint32_t maca1lr_reg;

    // MACA2HR @ offset=0x00000310
    union {
        __IO uint32_t maca2hr_reg;

        // bit fields
        struct {
            __IO uint32_t addrhi_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 23;
            __IO uint32_t mbc_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t sa_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ae_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } maca2hr_bits;
    };

    // MACA2LR @ offset=0x00000314
    __IO uint32_t maca2lr_reg;

    // MACA3HR @ offset=0x00000318
    union {
        __IO uint32_t maca3hr_reg;

        // bit fields
        struct {
            __IO uint32_t addrhi_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 23;
            __IO uint32_t mbc_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t sa_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ae_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } maca3hr_bits;
    };

    // MACA3LR @ offset=0x0000031C
    __IO uint32_t maca3lr_reg;

    __IO uint8_t reserved12[992];

    // MMC_CONTROL @ offset=0x00000700
    union {
        __IO uint32_t mmc_control_reg;

        // bit fields
        struct {
            __IO uint32_t cntrst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntstopro_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstonrd_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntfreez_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntprst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntprstlvl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t ucdbc_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } mmc_control_bits;
    };

    // MMC_RX_INTERRUPT @ offset=0x00000704
    union {
        __IO uint32_t mmc_rx_interrupt_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 5;
            __IO uint32_t rxcrcerpis_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxalgnerpis_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 10;
            __IO uint32_t rxucgpis_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 8;
            __IO uint32_t rxlpiuscis_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxlpitrcis_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 4;
        } mmc_rx_interrupt_bits;
    };

    // MMC_TX_INTERRUPT @ offset=0x00000708
    union {
        __IO uint32_t mmc_tx_interrupt_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t txscolgpis_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txmcolgpis_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 5;
            __IO uint32_t txgpktis_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 4;
            __IO uint32_t txlpiuscis_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txlpitrcis_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 4;
        } mmc_tx_interrupt_bits;
    };

    // MMC_RX_INTERRUPT_MASK @ offset=0x0000070C
    union {
        __IO uint32_t mmc_rx_interrupt_mask_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 5;
            __IO uint32_t rxcrcerpim_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxalgnerpim_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 10;
            __IO uint32_t rxucgpim_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 8;
            __IO uint32_t rxlpiuscim_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxlpitrcim_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 4;
        } mmc_rx_interrupt_mask_bits;
    };

    // MMC_TX_INTERRUPT_MASK @ offset=0x00000710
    union {
        __IO uint32_t mmc_tx_interrupt_mask_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t txscolgpim_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txmcolgpim_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t txgpktim_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t txlpiuscim_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txlpitrcim_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 4;
        } mmc_tx_interrupt_mask_bits;
    };

    __IO uint8_t reserved13[56];

    // TX_SINGLE_COLLISION_GOOD_PACKETS @ offset=0x0000074C
    __IO uint32_t tx_single_collision_good_packets_reg;

    // TX_MULTIPLE_COLLISION_GOOD_PACKETS @ offset=0x00000750
    __IO uint32_t tx_multiple_collision_good_packets_reg;

    __IO uint8_t reserved14[20];

    // TX_PACKET_COUNT_GOOD @ offset=0x00000768
    __IO uint32_t tx_packet_count_good_reg;

    __IO uint8_t reserved15[40];

    // RX_CRC_ERROR_PACKETS @ offset=0x00000794
    __IO uint32_t rx_crc_error_packets_reg;

    // RX_ALIGNMENT_ERROR_PACKETS @ offset=0x00000798
    __IO uint32_t rx_alignment_error_packets_reg;

    __IO uint8_t reserved16[40];

    // RX_UNICAST_PACKETS_GOOD @ offset=0x000007C4
    __IO uint32_t rx_unicast_packets_good_reg;

    __IO uint8_t reserved17[36];

    // TX_LPI_USEC_CNTR @ offset=0x000007EC
    __IO uint32_t tx_lpi_usec_cntr_reg;

    // TX_LPI_TRAN_CNTR @ offset=0x000007F0
    __IO uint32_t tx_lpi_tran_cntr_reg;

    // RX_LPI_USEC_CNTR @ offset=0x000007F4
    __IO uint32_t rx_lpi_usec_cntr_reg;

    // RX_LPI_TRAN_CNTR @ offset=0x000007F8
    __IO uint32_t rx_lpi_tran_cntr_reg;

    __IO uint8_t reserved18[260];

    // MACL3L4C0R @ offset=0x00000900
    union {
        __IO uint32_t macl3l4c0r_reg;

        // bit fields
        struct {
            __IO uint32_t l3pen0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t l3sam0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3saim0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3dam0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3daim0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3hsbm0_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t l3hdbm0_bit : 5; // bit offset=11  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t l4pen0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t l4spm0_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l4spim0_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l4dpm0_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l4dpim0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 10;
        } macl3l4c0r_bits;
    };

    // MACL4A0R @ offset=0x00000904
    union {
        __IO uint32_t macl4a0r_reg;

        // bit fields
        struct {
            __IO uint32_t l4sp0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t l4dp0_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } macl4a0r_bits;
    };

    __IO uint8_t reserved19[8];

    // MACL3A00R @ offset=0x00000910
    __IO uint32_t macl3a00r_reg;

    // MACL3A10R @ offset=0x00000914
    __IO uint32_t macl3a10r_reg;

    // MACL3A20 @ offset=0x00000918
    __IO uint32_t macl3a20_reg;

    // MACL3A30 @ offset=0x0000091C
    __IO uint32_t macl3a30_reg;

    __IO uint8_t reserved20[16];

    // MACL3L4C1R @ offset=0x00000930
    union {
        __IO uint32_t macl3l4c1r_reg;

        // bit fields
        struct {
            __IO uint32_t l3pen1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t l3sam1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3saim1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3dam1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3daim1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l3hsbm1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t l3hdbm1_bit : 5; // bit offset=11  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t l4pen1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t l4spm1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l4spim1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l4dpm1_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t l4dpim1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 10;
        } macl3l4c1r_bits;
    };

    // MACL4A1R @ offset=0x00000934
    union {
        __IO uint32_t macl4a1r_reg;

        // bit fields
        struct {
            __IO uint32_t l4sp1_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t l4dp1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } macl4a1r_bits;
    };

    __IO uint8_t reserved21[8];

    // MACL3A01R @ offset=0x00000940
    __IO uint32_t macl3a01r_reg;

    // MACL3A11R @ offset=0x00000944
    __IO uint32_t macl3a11r_reg;

    // MACL3A21R @ offset=0x00000948
    __IO uint32_t macl3a21r_reg;

    // MACL3A31R @ offset=0x0000094C
    __IO uint32_t macl3a31r_reg;

    __IO uint8_t reserved22[400];

    // MACARPAR @ offset=0x00000AE0
    __IO uint32_t macarpar_reg;

    __IO uint8_t reserved23[28];

    // MACTSCR @ offset=0x00000B00
    union {
        __IO uint32_t mactscr_reg;

        // bit fields
        struct {
            __IO uint32_t tsena_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tscfupdt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsinit_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsupdt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t tsaddreg_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t tsenall_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsctrlssr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsver2ena_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsipena_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsipv6ena_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsipv4ena_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsevntena_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsmstrena_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t snaptypsel_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t tsenmacaddr_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csc_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 4;
            __IO uint32_t txtsstsm_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } mactscr_bits;
    };

    // MACSSIR @ offset=0x00000B04
    union {
        __IO uint32_t macssir_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t snsinc_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ssinc_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } macssir_bits;
    };

    // MACSTSR @ offset=0x00000B08
    __IO uint32_t macstsr_reg;

    // MACSTNR @ offset=0x00000B0C
    __IO uint32_t macstnr_reg;

    // MACSTSUR @ offset=0x00000B10
    __IO uint32_t macstsur_reg;

    // MACSTNUR @ offset=0x00000B14
    union {
        __IO uint32_t macstnur_reg;

        // bit fields
        struct {
            __IO uint32_t tsss_bit : 31; // bit offset=0  bit width=31  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t addsub_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } macstnur_bits;
    };

    // MACTSAR @ offset=0x00000B18
    __IO uint32_t mactsar_reg;

    __IO uint8_t reserved24[4];

    // MACTSSR @ offset=0x00000B20
    union {
        __IO uint32_t mactssr_reg;

        // bit fields
        struct {
            __IO uint32_t tssovf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tstargt0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t auxtstrig_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tstrgterr0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t txtssis_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t atsstn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t atsstm_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t atsns_bit : 5; // bit offset=25  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 6;
        } mactssr_bits;
    };

    __IO uint8_t reserved25[12];

    // MACTxTSSNR @ offset=0x00000B30
    union {
        __IO uint32_t mactxtssnr_reg;

        // bit fields
        struct {
            __IO uint32_t txtsslo_bit : 31; // bit offset=0  bit width=31  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 30;
            __IO uint32_t txtssmis_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } mactxtssnr_bits;
    };

    // MACTxTSSSR @ offset=0x00000B34
    __IO uint32_t mactxtsssr_reg;

    __IO uint8_t reserved26[8];

    // MACACR @ offset=0x00000B40
    union {
        __IO uint32_t macacr_reg;

        // bit fields
        struct {
            __IO uint32_t atsfc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t atsen0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t atsen1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t atsen2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t atsen3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 24;
        } macacr_bits;
    };

    __IO uint8_t reserved27[4];

    // MACATSNR @ offset=0x00000B48
    __IO uint32_t macatsnr_reg;

    // MACATSSR @ offset=0x00000B4C
    __IO uint32_t macatssr_reg;

    // MACTSIACR @ offset=0x00000B50
    __IO uint32_t mactsiacr_reg;

    // MACTSEACR @ offset=0x00000B54
    __IO uint32_t mactseacr_reg;

    // MACTSICNR @ offset=0x00000B58
    __IO uint32_t mactsicnr_reg;

    // MACTSECNR @ offset=0x00000B5C
    __IO uint32_t mactsecnr_reg;

    __IO uint8_t reserved28[16];

    // MACPPSCR @ offset=0x00000B70
    union {
        __IO uint32_t macppscr_reg;

        // bit fields
        struct {
            __IO uint32_t ppsctrl_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ppsen0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trgtmodsel0_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } macppscr_bits;
    };

    __IO uint8_t reserved29[12];

    // MACPPSTTSR @ offset=0x00000B80
    __IO uint32_t macppsttsr_reg;

    // MACPPSTTNR @ offset=0x00000B84
    union {
        __IO uint32_t macppsttnr_reg;

        // bit fields
        struct {
            __IO uint32_t ttsl0_bit : 31; // bit offset=0  bit width=31  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t trgtbusy0_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } macppsttnr_bits;
    };

    // MACPPSIR @ offset=0x00000B88
    __IO uint32_t macppsir_reg;

    // MACPPSWR @ offset=0x00000B8C
    __IO uint32_t macppswr_reg;

    __IO uint8_t reserved30[48];

    // MACPOCR @ offset=0x00000BC0
    union {
        __IO uint32_t macpocr_reg;

        // bit fields
        struct {
            __IO uint32_t ptoen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asyncen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t apdreqen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t asynctrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t apdreqtrig_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t drrdis_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t dn_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } macpocr_bits;
    };

    // MACSPI0R @ offset=0x00000BC4
    __IO uint32_t macspi0r_reg;

    // MACSPI1R @ offset=0x00000BC8
    __IO uint32_t macspi1r_reg;

    // MACSPI2R @ offset=0x00000BCC
    __IO uint32_t macspi2r_reg;

    // MACLMIR @ offset=0x00000BD0
    union {
        __IO uint32_t maclmir_reg;

        // bit fields
        struct {
            __IO uint32_t lsi_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t drsyncr_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 15;
            __IO uint32_t lmpdri_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 7;
        } maclmir_bits;
    };

} ethernet_mac_t;

// Peripheral Ethernet_MTL @ base_addess=0x40028C00
typedef struct ethernet_mtl_t {

    // MTLOMR @ offset=0x00000000
    union {
        __IO uint32_t mtlomr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t dtxsts_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t cntprst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntclr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 22;
        } mtlomr_bits;
    };

    __IO uint8_t reserved0[28];

    // MTLISR @ offset=0x00000020
    __IO uint32_t mtlisr_reg;

    __IO uint8_t reserved1[220];

    // MTLTxQOMR @ offset=0x00000100
    union {
        __IO uint32_t mtltxqomr_reg;

        // bit fields
        struct {
            __IO uint32_t ftq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txqen_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ttc_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 11;
            __IO uint32_t tqs_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } mtltxqomr_bits;
    };

    // MTLTxQUR @ offset=0x00000104
    union {
        __IO uint32_t mtltxqur_reg;

        // bit fields
        struct {
            __IO uint32_t uffrmcnt_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 10;
            __IO uint32_t ufcntovf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mtltxqur_bits;
    };

    // MTLTxQDR @ offset=0x00000108
    union {
        __IO uint32_t mtltxqdr_reg;

        // bit fields
        struct {
            __IO uint32_t txqpaused_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t trcsts_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t twcsts_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txqsts_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txstsfsts_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 10;
            __IO uint32_t ptxq_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 3;
            __IO uint32_t stxstsf_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 11;
        } mtltxqdr_bits;
    };

    __IO uint8_t reserved2[32];

    // MTLQICSR @ offset=0x0000012C
    union {
        __IO uint32_t mtlqicsr_reg;

        // bit fields
        struct {
            __IO uint32_t txunfis_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t txuie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t rxovfis_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t rxoie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } mtlqicsr_bits;
    };

    // MTLRxQOMR @ offset=0x00000130
    union {
        __IO uint32_t mtlrxqomr_reg;

        // bit fields
        struct {
            __IO uint32_t rtc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rsf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_tcp_ef_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ehfc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rfa_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t rfd_bit : 3; // bit offset=14  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t rqs_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 11;
        } mtlrxqomr_bits;
    };

    // MTLRxQMPOCR @ offset=0x00000134
    union {
        __IO uint32_t mtlrxqmpocr_reg;

        // bit fields
        struct {
            __IO uint32_t ovfpktcnt_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 10;
            __IO uint32_t ovfcntovf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 4;
            __IO uint32_t mispktcnt_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 10;
            __IO uint32_t miscntovf_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 4;
        } mtlrxqmpocr_bits;
    };

    // MTLRxQDR @ offset=0x00000138
    union {
        __IO uint32_t mtlrxqdr_reg;

        // bit fields
        struct {
            __IO uint32_t rwcsts_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rrcsts_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t rxqsts_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 11;
            __IO uint32_t prxq_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 15;
        } mtlrxqdr_bits;
    };

} ethernet_mtl_t;

// Peripheral FDCAN1 @ base_addess=0x4000A000
typedef struct fdcan1_t {

    // FDCAN_CREL @ offset=0x00000000
    union {
        __IO uint32_t fdcan_crel_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t rel_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t step_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t substep_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t year_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t mon_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t day_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
        } fdcan_crel_bits;
    };

    // FDCAN_ENDN @ offset=0x00000004
    __IO uint32_t fdcan_endn_reg;

    __IO uint8_t reserved0[4];

    // FDCAN_DBTP @ offset=0x0000000C
    union {
        __IO uint32_t fdcan_dbtp_reg;

        // bit fields
        struct {
            __IO uint32_t dsjw_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtseg2_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t dtseg1_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 7;
            __IO uint32_t dbrp_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 6;
            __IO uint32_t tdc_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved4 : 8;
        } fdcan_dbtp_bits;
    };

    // FDCAN_TEST @ offset=0x00000010
    union {
        __IO uint32_t fdcan_test_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t lbck_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tx_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t rx_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 24;
        } fdcan_test_bits;
    };

    // FDCAN_RWD @ offset=0x00000014
    union {
        __IO uint32_t fdcan_rwd_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t wdv_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 22;
        } fdcan_rwd_bits;
    };

    // FDCAN_CCCR @ offset=0x00000018
    union {
        __IO uint32_t fdcan_cccr_reg;

        // bit fields
        struct {
            __IO uint32_t init_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cce_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asm_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csa_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mon_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t test_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fdoe_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t pxhd_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t efbi_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txp_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t niso_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } fdcan_cccr_bits;
    };

    // FDCAN_NBTP @ offset=0x0000001C
    union {
        __IO uint32_t fdcan_nbtp_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t nsjw_bit : 7; // bit offset=25  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbrp_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t ntseg1_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t tseg2_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } fdcan_nbtp_bits;
    };

    // FDCAN_TSCC @ offset=0x00000020
    union {
        __IO uint32_t fdcan_tscc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tcp_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t tss_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } fdcan_tscc_bits;
    };

    // FDCAN_TSCV @ offset=0x00000024
    __IO uint32_t fdcan_tscv_reg;

    // FDCAN_TOCC @ offset=0x00000028
    union {
        __IO uint32_t fdcan_tocc_reg;

        // bit fields
        struct {
            __IO uint32_t etoc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tos_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t top_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } fdcan_tocc_bits;
    };

    // FDCAN_TOCV @ offset=0x0000002C
    __IO uint32_t fdcan_tocv_reg;

    __IO uint8_t reserved1[16];

    // FDCAN_ECR @ offset=0x00000040
    union {
        __IO uint32_t fdcan_ecr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t cel_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trec_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t tec_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } fdcan_ecr_bits;
    };

    // FDCAN_PSR @ offset=0x00000044
    union {
        __IO uint32_t fdcan_psr_reg;

        // bit fields
        struct {
            __IO uint32_t lec_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t act_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ep_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ew_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bo_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlec_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t resi_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbrs_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t redl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pxe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t tdcv_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 15;
        } fdcan_psr_bits;
    };

    // FDCAN_TDCR @ offset=0x00000048
    union {
        __IO uint32_t fdcan_tdcr_reg;

        // bit fields
        struct {
            __IO uint32_t tdcf_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t tdco_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } fdcan_tdcr_bits;
    };

    __IO uint8_t reserved2[4];

    // FDCAN_IR @ offset=0x00000050
    union {
        __IO uint32_t fdcan_ir_reg;

        // bit fields
        struct {
            __IO uint32_t rf0n_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0w_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0f_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0l_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1n_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1w_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1f_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1l_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tef_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefn_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefw_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teff_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefl_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsw_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mraf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t too_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t drx_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t elo_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ep_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ew_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bo_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdi_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pea_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ped_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ara_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 2;
        } fdcan_ir_bits;
    };

    // FDCAN_IE @ offset=0x00000054
    union {
        __IO uint32_t fdcan_ie_reg;

        // bit fields
        struct {
            __IO uint32_t rf0ne_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0we_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0le_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1ne_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1we_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1fe_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1le_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpme_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tce_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcfe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefne_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefwe_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teffe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefle_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tswe_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mrafe_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tooe_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t drxe_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bece_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t beue_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eloe_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t epe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ewe_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t boe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t peae_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pede_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arae_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 2;
        } fdcan_ie_bits;
    };

    // FDCAN_ILS @ offset=0x00000058
    union {
        __IO uint32_t fdcan_ils_reg;

        // bit fields
        struct {
            __IO uint32_t rf0nl_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0wl_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0fl_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0ll_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1nl_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1wl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1fl_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1ll_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpml_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcl_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcfl_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefl_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefnl_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefwl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teffl_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefll_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tswl_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mrafl_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tool_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t drxl_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t becl_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t beul_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t elol_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t epl_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ewl_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdil_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t peal_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pedl_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t aral_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 2;
        } fdcan_ils_bits;
    };

    // FDCAN_ILE @ offset=0x0000005C
    union {
        __IO uint32_t fdcan_ile_reg;

        // bit fields
        struct {
            __IO uint32_t eint0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eint1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } fdcan_ile_bits;
    };

    __IO uint8_t reserved3[32];

    // FDCAN_GFC @ offset=0x00000080
    union {
        __IO uint32_t fdcan_gfc_reg;

        // bit fields
        struct {
            __IO uint32_t rrfe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rrfs_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t anfe_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t anfs_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } fdcan_gfc_bits;
    };

    // FDCAN_SIDFC @ offset=0x00000084
    union {
        __IO uint32_t fdcan_sidfc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t flssa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t lss_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fdcan_sidfc_bits;
    };

    // FDCAN_XIDFC @ offset=0x00000088
    union {
        __IO uint32_t fdcan_xidfc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t flesa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t lse_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fdcan_xidfc_bits;
    };

    __IO uint8_t reserved4[4];

    // FDCAN_XIDAM @ offset=0x00000090
    __IO uint32_t fdcan_xidam_reg;

    // FDCAN_HPMS @ offset=0x00000094
    union {
        __IO uint32_t fdcan_hpms_reg;

        // bit fields
        struct {
            __IO uint32_t bidx_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 5;
            __IO uint32_t msi_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t fidx_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 6;
            __IO uint32_t flst_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 16;
        } fdcan_hpms_bits;
    };

    // FDCAN_NDAT1 @ offset=0x00000098
    union {
        __IO uint32_t fdcan_ndat1_reg;

        // bit fields
        struct {
            __IO uint32_t nd0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } fdcan_ndat1_bits;
    };

    // FDCAN_NDAT2 @ offset=0x0000009C
    union {
        __IO uint32_t fdcan_ndat2_reg;

        // bit fields
        struct {
            __IO uint32_t nd32_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd33_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd36_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd37_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd38_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd39_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd40_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd42_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd43_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd44_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd45_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd46_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd47_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd54_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd55_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd56_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd57_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd58_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd59_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd60_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd61_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd62_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd63_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } fdcan_ndat2_bits;
    };

    // FDCAN_RXF0C @ offset=0x000000A0
    union {
        __IO uint32_t fdcan_rxf0c_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t f0sa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t f0s_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f0wm_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } fdcan_rxf0c_bits;
    };

    // FDCAN_RXF0S @ offset=0x000000A4
    union {
        __IO uint32_t fdcan_rxf0s_reg;

        // bit fields
        struct {
            __IO uint32_t f0fl_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t f0g_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t f0p_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f0f_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rf0l_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 6;
        } fdcan_rxf0s_bits;
    };

    // FDCAN_RXF0A @ offset=0x000000A8
    __IO uint32_t fdcan_rxf0a_reg;

    // FDCAN_RXBC @ offset=0x000000AC
    __IO uint32_t fdcan_rxbc_reg;

    // FDCAN_RXF1C @ offset=0x000000B0
    union {
        __IO uint32_t fdcan_rxf1c_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t f1sa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t f1s_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f1wm_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } fdcan_rxf1c_bits;
    };

    // FDCAN_RXF1S @ offset=0x000000B4
    union {
        __IO uint32_t fdcan_rxf1s_reg;

        // bit fields
        struct {
            __IO uint32_t f1fl_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t f1gi_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t f1pi_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f1f_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rf1l_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t dms_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 1;
        } fdcan_rxf1s_bits;
    };

    // FDCAN_RXF1A @ offset=0x000000B8
    __IO uint32_t fdcan_rxf1a_reg;

    // FDCAN_RXESC @ offset=0x000000BC
    union {
        __IO uint32_t fdcan_rxesc_reg;

        // bit fields
        struct {
            __IO uint32_t f0ds_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t f1ds_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t rbds_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } fdcan_rxesc_bits;
    };

    // FDCAN_TXBC @ offset=0x000000C0
    union {
        __IO uint32_t fdcan_txbc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t tbsa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t ndtb_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t tfqs_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 5;
            __IO uint32_t tfqm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 1;
        } fdcan_txbc_bits;
    };

    // FDCAN_TXFQS @ offset=0x000000C4
    union {
        __IO uint32_t fdcan_txfqs_reg;

        // bit fields
        struct {
            __IO uint32_t tffl_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t tfgi_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t tfqpi_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 4;
            __IO uint32_t tfqf_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 10;
        } fdcan_txfqs_bits;
    };

    // FDCAN_TXESC @ offset=0x000000C8
    __IO uint32_t fdcan_txesc_reg;

    // FDCAN_TXBRP @ offset=0x000000CC
    __IO uint32_t fdcan_txbrp_reg;

    // FDCAN_TXBAR @ offset=0x000000D0
    __IO uint32_t fdcan_txbar_reg;

    // FDCAN_TXBCR @ offset=0x000000D4
    __IO uint32_t fdcan_txbcr_reg;

    // FDCAN_TXBTO @ offset=0x000000D8
    __IO uint32_t fdcan_txbto_reg;

    // FDCAN_TXBCF @ offset=0x000000DC
    __IO uint32_t fdcan_txbcf_reg;

    // FDCAN_TXBTIE @ offset=0x000000E0
    __IO uint32_t fdcan_txbtie_reg;

    // FDCAN_TXBCIE @ offset=0x000000E4
    __IO uint32_t fdcan_txbcie_reg;

    __IO uint8_t reserved5[8];

    // FDCAN_TXEFC @ offset=0x000000F0
    union {
        __IO uint32_t fdcan_txefc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t efsa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t efs_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t efwm_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } fdcan_txefc_bits;
    };

    // FDCAN_TXEFS @ offset=0x000000F4
    union {
        __IO uint32_t fdcan_txefs_reg;

        // bit fields
        struct {
            __IO uint32_t effl_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t efgi_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t efpi_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t eff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tefl_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 6;
        } fdcan_txefs_bits;
    };

    // FDCAN_TXEFA @ offset=0x000000F8
    __IO uint32_t fdcan_txefa_reg;

    __IO uint8_t reserved6[4];

    // FDCAN_TTTMC @ offset=0x00000100
    union {
        __IO uint32_t fdcan_tttmc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t tmsa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t tme_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fdcan_tttmc_bits;
    };

    // FDCAN_TTRMC @ offset=0x00000104
    union {
        __IO uint32_t fdcan_ttrmc_reg;

        // bit fields
        struct {
            __IO uint32_t rid_bit : 29; // bit offset=0  bit width=29  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 29;
            __IO uint32_t xtd_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rmps_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_ttrmc_bits;
    };

    // FDCAN_TTOCF @ offset=0x00000108
    union {
        __IO uint32_t fdcan_ttocf_reg;

        // bit fields
        struct {
            __IO uint32_t om_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t gen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ldsdl_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t irto_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t eecs_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awl_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t egtf_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ecc_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t evtp_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 5;
        } fdcan_ttocf_bits;
    };

    // FDCAN_TTMLM @ offset=0x0000010C
    union {
        __IO uint32_t fdcan_ttmlm_reg;

        // bit fields
        struct {
            __IO uint32_t ccm_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t css_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txew_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t entt_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } fdcan_ttmlm_bits;
    };

    // FDCAN_TURCF @ offset=0x00000110
    union {
        __IO uint32_t fdcan_turcf_reg;

        // bit fields
        struct {
            __IO uint32_t ncl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t dc_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t elt_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_turcf_bits;
    };

    // FDCAN_TTOCN @ offset=0x00000114
    union {
        __IO uint32_t fdcan_ttocn_reg;

        // bit fields
        struct {
            __IO uint32_t sgt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ecs_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sws_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t rtie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tmc_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ttie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gcs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fgp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tmg_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nig_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t escn_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lckc_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 16;
        } fdcan_ttocn_bits;
    };

    // CAN_TTGTP @ offset=0x00000118
    union {
        __IO uint32_t can_ttgtp_reg;

        // bit fields
        struct {
            __IO uint32_t ncl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ctp_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } can_ttgtp_bits;
    };

    // FDCAN_TTTMK @ offset=0x0000011C
    union {
        __IO uint32_t fdcan_tttmk_reg;

        // bit fields
        struct {
            __IO uint32_t tm_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ticc_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t lckm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_tttmk_bits;
    };

    // FDCAN_TTIR @ offset=0x00000120
    union {
        __IO uint32_t fdcan_ttir_reg;

        // bit fields
        struct {
            __IO uint32_t sbc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csm_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sog_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtmi_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ttmi_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swe_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtw_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtd_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gte_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txu_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txo_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t elc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwtg_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aw_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cer_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 13;
        } fdcan_ttir_bits;
    };

    // FDCAN_TTIE @ offset=0x00000124
    union {
        __IO uint32_t fdcan_ttie_reg;

        // bit fields
        struct {
            __IO uint32_t sbce_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smce_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csme_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t soge_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtmie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ttmie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swee_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtwe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtde_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtee_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txue_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txoe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se1e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se2e_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t elce_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwtge_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wte_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awe_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cere_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 13;
        } fdcan_ttie_bits;
    };

    // FDCAN_TTILS @ offset=0x00000128
    union {
        __IO uint32_t fdcan_ttils_reg;

        // bit fields
        struct {
            __IO uint32_t sbcl_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smcl_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csml_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sogl_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtmil_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ttmil_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swel_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtwl_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtdl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtel_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txul_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se1l_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se2l_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t elcl_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwtgl_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wtl_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awl_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cerl_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 13;
        } fdcan_ttils_bits;
    };

    // FDCAN_TTOST @ offset=0x0000012C
    union {
        __IO uint32_t fdcan_ttost_reg;

        // bit fields
        struct {
            __IO uint32_t el_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ms_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t sys_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gtp_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qcs_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 13;
            __IO uint32_t wgtd_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gfi_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tmp_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t gsi_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wfe_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wecs_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spl_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_ttost_bits;
    };

    // FDCAN_TURNA @ offset=0x00000130
    __IO uint32_t fdcan_turna_reg;

    // FDCAN_TTLGT @ offset=0x00000134
    union {
        __IO uint32_t fdcan_ttlgt_reg;

        // bit fields
        struct {
            __IO uint32_t lt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t gt_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } fdcan_ttlgt_bits;
    };

    // FDCAN_TTCTC @ offset=0x00000138
    union {
        __IO uint32_t fdcan_ttctc_reg;

        // bit fields
        struct {
            __IO uint32_t ct_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } fdcan_ttctc_bits;
    };

    // FDCAN_TTCPT @ offset=0x0000013C
    union {
        __IO uint32_t fdcan_ttcpt_reg;

        // bit fields
        struct {
            __IO uint32_t ct_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t swv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } fdcan_ttcpt_bits;
    };

    // FDCAN_TTCSM @ offset=0x00000140
    __IO uint32_t fdcan_ttcsm_reg;

    __IO uint8_t reserved7[444];

    // FDCAN_TTTS @ offset=0x00000300
    union {
        __IO uint32_t fdcan_ttts_reg;

        // bit fields
        struct {
            __IO uint32_t swtdel_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t evtsel_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } fdcan_ttts_bits;
    };

} fdcan1_t;

// Peripheral FDCAN2 @ base_addess=0x4000A400
typedef struct fdcan2_t {

    // FDCAN_CREL @ offset=0x00000000
    union {
        __IO uint32_t fdcan_crel_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t rel_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t step_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t substep_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t year_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t mon_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t day_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
        } fdcan_crel_bits;
    };

    // FDCAN_ENDN @ offset=0x00000004
    __IO uint32_t fdcan_endn_reg;

    __IO uint8_t reserved0[4];

    // FDCAN_DBTP @ offset=0x0000000C
    union {
        __IO uint32_t fdcan_dbtp_reg;

        // bit fields
        struct {
            __IO uint32_t dsjw_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t dtseg2_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t dtseg1_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 7;
            __IO uint32_t dbrp_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 6;
            __IO uint32_t tdc_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved4 : 8;
        } fdcan_dbtp_bits;
    };

    // FDCAN_TEST @ offset=0x00000010
    union {
        __IO uint32_t fdcan_test_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t lbck_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tx_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t rx_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 24;
        } fdcan_test_bits;
    };

    // FDCAN_RWD @ offset=0x00000014
    union {
        __IO uint32_t fdcan_rwd_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t wdv_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 22;
        } fdcan_rwd_bits;
    };

    // FDCAN_CCCR @ offset=0x00000018
    union {
        __IO uint32_t fdcan_cccr_reg;

        // bit fields
        struct {
            __IO uint32_t init_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cce_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asm_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csa_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mon_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t test_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fdoe_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t pxhd_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t efbi_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txp_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t niso_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } fdcan_cccr_bits;
    };

    // FDCAN_NBTP @ offset=0x0000001C
    union {
        __IO uint32_t fdcan_nbtp_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t nsjw_bit : 7; // bit offset=25  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbrp_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t ntseg1_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t tseg2_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } fdcan_nbtp_bits;
    };

    // FDCAN_TSCC @ offset=0x00000020
    union {
        __IO uint32_t fdcan_tscc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tcp_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t tss_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } fdcan_tscc_bits;
    };

    // FDCAN_TSCV @ offset=0x00000024
    __IO uint32_t fdcan_tscv_reg;

    // FDCAN_TOCC @ offset=0x00000028
    union {
        __IO uint32_t fdcan_tocc_reg;

        // bit fields
        struct {
            __IO uint32_t etoc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tos_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t top_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } fdcan_tocc_bits;
    };

    // FDCAN_TOCV @ offset=0x0000002C
    __IO uint32_t fdcan_tocv_reg;

    __IO uint8_t reserved1[16];

    // FDCAN_ECR @ offset=0x00000040
    union {
        __IO uint32_t fdcan_ecr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t cel_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trec_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t tec_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } fdcan_ecr_bits;
    };

    // FDCAN_PSR @ offset=0x00000044
    union {
        __IO uint32_t fdcan_psr_reg;

        // bit fields
        struct {
            __IO uint32_t lec_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t act_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ep_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ew_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bo_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlec_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t resi_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rbrs_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t redl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pxe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t tdcv_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 15;
        } fdcan_psr_bits;
    };

    // FDCAN_TDCR @ offset=0x00000048
    union {
        __IO uint32_t fdcan_tdcr_reg;

        // bit fields
        struct {
            __IO uint32_t tdcf_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t tdco_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } fdcan_tdcr_bits;
    };

    __IO uint8_t reserved2[4];

    // FDCAN_IR @ offset=0x00000050
    union {
        __IO uint32_t fdcan_ir_reg;

        // bit fields
        struct {
            __IO uint32_t rf0n_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0w_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0f_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0l_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1n_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1w_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1f_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1l_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tef_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefn_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefw_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teff_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefl_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsw_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mraf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t too_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t drx_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t elo_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ep_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ew_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bo_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdi_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pea_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ped_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ara_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 2;
        } fdcan_ir_bits;
    };

    // FDCAN_IE @ offset=0x00000054
    union {
        __IO uint32_t fdcan_ie_reg;

        // bit fields
        struct {
            __IO uint32_t rf0ne_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0we_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0le_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1ne_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1we_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1fe_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1le_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpme_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tce_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcfe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefne_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefwe_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teffe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefle_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tswe_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mrafe_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tooe_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t drxe_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bece_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t beue_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eloe_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t epe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ewe_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t boe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t peae_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pede_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arae_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 2;
        } fdcan_ie_bits;
    };

    // FDCAN_ILS @ offset=0x00000058
    union {
        __IO uint32_t fdcan_ils_reg;

        // bit fields
        struct {
            __IO uint32_t rf0nl_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0wl_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0fl_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf0ll_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1nl_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1wl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1fl_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rf1ll_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpml_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcl_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcfl_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefl_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefnl_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefwl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teffl_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tefll_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tswl_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mrafl_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tool_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t drxl_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t becl_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t beul_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t elol_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t epl_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ewl_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdil_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t peal_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pedl_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t aral_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 2;
        } fdcan_ils_bits;
    };

    // FDCAN_ILE @ offset=0x0000005C
    union {
        __IO uint32_t fdcan_ile_reg;

        // bit fields
        struct {
            __IO uint32_t eint0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eint1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } fdcan_ile_bits;
    };

    __IO uint8_t reserved3[32];

    // FDCAN_GFC @ offset=0x00000080
    union {
        __IO uint32_t fdcan_gfc_reg;

        // bit fields
        struct {
            __IO uint32_t rrfe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rrfs_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t anfe_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t anfs_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } fdcan_gfc_bits;
    };

    // FDCAN_SIDFC @ offset=0x00000084
    union {
        __IO uint32_t fdcan_sidfc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t flssa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t lss_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fdcan_sidfc_bits;
    };

    // FDCAN_XIDFC @ offset=0x00000088
    union {
        __IO uint32_t fdcan_xidfc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t flesa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t lse_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fdcan_xidfc_bits;
    };

    __IO uint8_t reserved4[4];

    // FDCAN_XIDAM @ offset=0x00000090
    __IO uint32_t fdcan_xidam_reg;

    // FDCAN_HPMS @ offset=0x00000094
    union {
        __IO uint32_t fdcan_hpms_reg;

        // bit fields
        struct {
            __IO uint32_t bidx_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 5;
            __IO uint32_t msi_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t fidx_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 6;
            __IO uint32_t flst_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 16;
        } fdcan_hpms_bits;
    };

    // FDCAN_NDAT1 @ offset=0x00000098
    union {
        __IO uint32_t fdcan_ndat1_reg;

        // bit fields
        struct {
            __IO uint32_t nd0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } fdcan_ndat1_bits;
    };

    // FDCAN_NDAT2 @ offset=0x0000009C
    union {
        __IO uint32_t fdcan_ndat2_reg;

        // bit fields
        struct {
            __IO uint32_t nd32_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd33_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd36_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd37_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd38_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd39_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd40_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd42_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd43_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd44_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd45_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd46_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd47_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd54_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd55_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd56_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd57_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd58_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd59_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd60_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd61_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd62_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nd63_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } fdcan_ndat2_bits;
    };

    // FDCAN_RXF0C @ offset=0x000000A0
    union {
        __IO uint32_t fdcan_rxf0c_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t f0sa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t f0s_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f0wm_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } fdcan_rxf0c_bits;
    };

    // FDCAN_RXF0S @ offset=0x000000A4
    union {
        __IO uint32_t fdcan_rxf0s_reg;

        // bit fields
        struct {
            __IO uint32_t f0fl_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t f0g_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t f0p_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f0f_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rf0l_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 6;
        } fdcan_rxf0s_bits;
    };

    // FDCAN_RXF0A @ offset=0x000000A8
    __IO uint32_t fdcan_rxf0a_reg;

    // FDCAN_RXBC @ offset=0x000000AC
    __IO uint32_t fdcan_rxbc_reg;

    // FDCAN_RXF1C @ offset=0x000000B0
    union {
        __IO uint32_t fdcan_rxf1c_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t f1sa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t f1s_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f1wm_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } fdcan_rxf1c_bits;
    };

    // FDCAN_RXF1S @ offset=0x000000B4
    union {
        __IO uint32_t fdcan_rxf1s_reg;

        // bit fields
        struct {
            __IO uint32_t f1fl_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t f1gi_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t f1pi_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t f1f_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rf1l_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t dms_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 1;
        } fdcan_rxf1s_bits;
    };

    // FDCAN_RXF1A @ offset=0x000000B8
    __IO uint32_t fdcan_rxf1a_reg;

    // FDCAN_RXESC @ offset=0x000000BC
    union {
        __IO uint32_t fdcan_rxesc_reg;

        // bit fields
        struct {
            __IO uint32_t f0ds_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t f1ds_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t rbds_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } fdcan_rxesc_bits;
    };

    // FDCAN_TXBC @ offset=0x000000C0
    union {
        __IO uint32_t fdcan_txbc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t tbsa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t ndtb_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t tfqs_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 5;
            __IO uint32_t tfqm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 1;
        } fdcan_txbc_bits;
    };

    // FDCAN_TXFQS @ offset=0x000000C4
    union {
        __IO uint32_t fdcan_txfqs_reg;

        // bit fields
        struct {
            __IO uint32_t tffl_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t tfgi_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t tfqpi_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 4;
            __IO uint32_t tfqf_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 10;
        } fdcan_txfqs_bits;
    };

    // FDCAN_TXESC @ offset=0x000000C8
    __IO uint32_t fdcan_txesc_reg;

    // FDCAN_TXBRP @ offset=0x000000CC
    __IO uint32_t fdcan_txbrp_reg;

    // FDCAN_TXBAR @ offset=0x000000D0
    __IO uint32_t fdcan_txbar_reg;

    // FDCAN_TXBCR @ offset=0x000000D4
    __IO uint32_t fdcan_txbcr_reg;

    // FDCAN_TXBTO @ offset=0x000000D8
    __IO uint32_t fdcan_txbto_reg;

    // FDCAN_TXBCF @ offset=0x000000DC
    __IO uint32_t fdcan_txbcf_reg;

    // FDCAN_TXBTIE @ offset=0x000000E0
    __IO uint32_t fdcan_txbtie_reg;

    // FDCAN_TXBCIE @ offset=0x000000E4
    __IO uint32_t fdcan_txbcie_reg;

    __IO uint8_t reserved5[8];

    // FDCAN_TXEFC @ offset=0x000000F0
    union {
        __IO uint32_t fdcan_txefc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t efsa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t efs_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t efwm_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } fdcan_txefc_bits;
    };

    // FDCAN_TXEFS @ offset=0x000000F4
    union {
        __IO uint32_t fdcan_txefs_reg;

        // bit fields
        struct {
            __IO uint32_t effl_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t efgi_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t efpi_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t eff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tefl_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 6;
        } fdcan_txefs_bits;
    };

    // FDCAN_TXEFA @ offset=0x000000F8
    __IO uint32_t fdcan_txefa_reg;

    __IO uint8_t reserved6[4];

    // FDCAN_TTTMC @ offset=0x00000100
    union {
        __IO uint32_t fdcan_tttmc_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t tmsa_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 13;
            __IO uint32_t tme_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } fdcan_tttmc_bits;
    };

    // FDCAN_TTRMC @ offset=0x00000104
    union {
        __IO uint32_t fdcan_ttrmc_reg;

        // bit fields
        struct {
            __IO uint32_t rid_bit : 29; // bit offset=0  bit width=29  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 29;
            __IO uint32_t xtd_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rmps_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_ttrmc_bits;
    };

    // FDCAN_TTOCF @ offset=0x00000108
    union {
        __IO uint32_t fdcan_ttocf_reg;

        // bit fields
        struct {
            __IO uint32_t om_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t gen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ldsdl_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t irto_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t eecs_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awl_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t egtf_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ecc_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t evtp_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 5;
        } fdcan_ttocf_bits;
    };

    // FDCAN_TTMLM @ offset=0x0000010C
    union {
        __IO uint32_t fdcan_ttmlm_reg;

        // bit fields
        struct {
            __IO uint32_t ccm_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t css_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txew_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t entt_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } fdcan_ttmlm_bits;
    };

    // FDCAN_TURCF @ offset=0x00000110
    union {
        __IO uint32_t fdcan_turcf_reg;

        // bit fields
        struct {
            __IO uint32_t ncl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t dc_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t elt_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_turcf_bits;
    };

    // FDCAN_TTOCN @ offset=0x00000114
    union {
        __IO uint32_t fdcan_ttocn_reg;

        // bit fields
        struct {
            __IO uint32_t sgt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ecs_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sws_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t rtie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tmc_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ttie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gcs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fgp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tmg_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nig_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t escn_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lckc_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 16;
        } fdcan_ttocn_bits;
    };

    // CAN_TTGTP @ offset=0x00000118
    union {
        __IO uint32_t can_ttgtp_reg;

        // bit fields
        struct {
            __IO uint32_t ncl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ctp_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } can_ttgtp_bits;
    };

    // FDCAN_TTTMK @ offset=0x0000011C
    union {
        __IO uint32_t fdcan_tttmk_reg;

        // bit fields
        struct {
            __IO uint32_t tm_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ticc_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t lckm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_tttmk_bits;
    };

    // FDCAN_TTIR @ offset=0x00000120
    union {
        __IO uint32_t fdcan_ttir_reg;

        // bit fields
        struct {
            __IO uint32_t sbc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csm_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sog_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtmi_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ttmi_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swe_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtw_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtd_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gte_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txu_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txo_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t elc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwtg_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aw_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cer_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 13;
        } fdcan_ttir_bits;
    };

    // FDCAN_TTIE @ offset=0x00000124
    union {
        __IO uint32_t fdcan_ttie_reg;

        // bit fields
        struct {
            __IO uint32_t sbce_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smce_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csme_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t soge_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtmie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ttmie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swee_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtwe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtde_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtee_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txue_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txoe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se1e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se2e_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t elce_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwtge_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wte_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awe_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cere_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 13;
        } fdcan_ttie_bits;
    };

    // FDCAN_TTILS @ offset=0x00000128
    union {
        __IO uint32_t fdcan_ttils_reg;

        // bit fields
        struct {
            __IO uint32_t sbcl_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smcl_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csml_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sogl_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtmil_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ttmil_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swel_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtwl_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtdl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gtel_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txul_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se1l_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t se2l_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t elcl_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwtgl_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wtl_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awl_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cerl_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 13;
        } fdcan_ttils_bits;
    };

    // FDCAN_TTOST @ offset=0x0000012C
    union {
        __IO uint32_t fdcan_ttost_reg;

        // bit fields
        struct {
            __IO uint32_t el_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ms_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t sys_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t gtp_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qcs_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 13;
            __IO uint32_t wgtd_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gfi_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tmp_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t gsi_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wfe_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t awe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wecs_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spl_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } fdcan_ttost_bits;
    };

    // FDCAN_TURNA @ offset=0x00000130
    __IO uint32_t fdcan_turna_reg;

    // FDCAN_TTLGT @ offset=0x00000134
    union {
        __IO uint32_t fdcan_ttlgt_reg;

        // bit fields
        struct {
            __IO uint32_t lt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t gt_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } fdcan_ttlgt_bits;
    };

    // FDCAN_TTCTC @ offset=0x00000138
    union {
        __IO uint32_t fdcan_ttctc_reg;

        // bit fields
        struct {
            __IO uint32_t ct_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } fdcan_ttctc_bits;
    };

    // FDCAN_TTCPT @ offset=0x0000013C
    union {
        __IO uint32_t fdcan_ttcpt_reg;

        // bit fields
        struct {
            __IO uint32_t ct_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t swv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } fdcan_ttcpt_bits;
    };

    // FDCAN_TTCSM @ offset=0x00000140
    __IO uint32_t fdcan_ttcsm_reg;

    __IO uint8_t reserved7[444];

    // FDCAN_TTTS @ offset=0x00000300
    union {
        __IO uint32_t fdcan_ttts_reg;

        // bit fields
        struct {
            __IO uint32_t swtdel_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t evtsel_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } fdcan_ttts_bits;
    };

} fdcan2_t;

// Peripheral FMC @ base_addess=0x52004000
typedef struct fmc_t {

    // BCR1 @ offset=0x00000000
    union {
        __IO uint32_t bcr1_reg;

        // bit fields
        struct {
            __IO uint32_t mbken_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muxen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mtyp_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t faccen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t bursten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitpol_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t waitcfg_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wren_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waiten_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extmod_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asyncwait_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpsize_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t cburstrw_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cclken_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wfdis_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t bmap_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 6;
            __IO uint32_t fmcen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } bcr1_bits;
    };

    // BTR1 @ offset=0x00000004
    union {
        __IO uint32_t btr1_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t clkdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t datlat_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } btr1_bits;
    };

    // BCR2 @ offset=0x00000008
    union {
        __IO uint32_t bcr2_reg;

        // bit fields
        struct {
            __IO uint32_t mbken_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muxen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mtyp_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t faccen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t bursten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitpol_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t waitcfg_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wren_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waiten_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extmod_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asyncwait_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpsize_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t cburstrw_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cclken_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wfdis_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t bmap_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 6;
            __IO uint32_t fmcen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } bcr2_bits;
    };

    // BTR2 @ offset=0x0000000C
    union {
        __IO uint32_t btr2_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t clkdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t datlat_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } btr2_bits;
    };

    // BCR3 @ offset=0x00000010
    union {
        __IO uint32_t bcr3_reg;

        // bit fields
        struct {
            __IO uint32_t mbken_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muxen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mtyp_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t faccen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t bursten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitpol_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t waitcfg_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wren_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waiten_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extmod_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asyncwait_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpsize_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t cburstrw_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cclken_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wfdis_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t bmap_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 6;
            __IO uint32_t fmcen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } bcr3_bits;
    };

    // BTR3 @ offset=0x00000014
    union {
        __IO uint32_t btr3_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t clkdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t datlat_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } btr3_bits;
    };

    // BCR4 @ offset=0x00000018
    union {
        __IO uint32_t bcr4_reg;

        // bit fields
        struct {
            __IO uint32_t mbken_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muxen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mtyp_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t faccen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t bursten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitpol_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t waitcfg_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wren_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waiten_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extmod_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t asyncwait_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpsize_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t cburstrw_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cclken_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wfdis_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t bmap_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 6;
            __IO uint32_t fmcen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } bcr4_bits;
    };

    // BTR4 @ offset=0x0000001C
    union {
        __IO uint32_t btr4_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t clkdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t datlat_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } btr4_bits;
    };

    __IO uint8_t reserved0[96];

    // PCR @ offset=0x00000080
    union {
        __IO uint32_t pcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t pwaiten_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pbken_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t eccen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t tclr_bit : 4; // bit offset=9  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t tar_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t eccps_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 14;
        } pcr_bits;
    };

    // SR @ offset=0x00000084
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t irs_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ils_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ifs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ilen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ifen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fempt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 25;
        } sr_bits;
    };

    // PMEM @ offset=0x00000088
    union {
        __IO uint32_t pmem_reg;

        // bit fields
        struct {
            __IO uint32_t memset_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t memwait_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t memhold_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t memhiz_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } pmem_bits;
    };

    // PATT @ offset=0x0000008C
    union {
        __IO uint32_t patt_reg;

        // bit fields
        struct {
            __IO uint32_t attset_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t attwait_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t atthold_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t atthiz_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } patt_bits;
    };

    __IO uint8_t reserved1[4];

    // ECCR @ offset=0x00000094
    __IO uint32_t eccr_reg;

    __IO uint8_t reserved2[108];

    // BWTR1 @ offset=0x00000104
    union {
        __IO uint32_t bwtr1_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } bwtr1_bits;
    };

    __IO uint8_t reserved3[4];

    // BWTR2 @ offset=0x0000010C
    union {
        __IO uint32_t bwtr2_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } bwtr2_bits;
    };

    __IO uint8_t reserved4[4];

    // BWTR3 @ offset=0x00000114
    union {
        __IO uint32_t bwtr3_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } bwtr3_bits;
    };

    __IO uint8_t reserved5[4];

    // BWTR4 @ offset=0x0000011C
    union {
        __IO uint32_t bwtr4_reg;

        // bit fields
        struct {
            __IO uint32_t addset_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t addhld_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t datast_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t busturn_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 11;
            __IO uint32_t accmod_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } bwtr4_bits;
    };

    __IO uint8_t reserved6[32];

    // SDCR1 @ offset=0x00000140
    union {
        __IO uint32_t sdcr1_reg;

        // bit fields
        struct {
            __IO uint32_t nc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nr_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nb_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cas_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t wp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdclk_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t rburst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rpipe_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 18;
        } sdcr1_bits;
    };

    // SDCR2 @ offset=0x00000144
    union {
        __IO uint32_t sdcr2_reg;

        // bit fields
        struct {
            __IO uint32_t nc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nr_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mwid_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nb_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cas_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t wp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdclk_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t rburst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rpipe_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 18;
        } sdcr2_bits;
    };

    // SDTR1 @ offset=0x00000148
    union {
        __IO uint32_t sdtr1_reg;

        // bit fields
        struct {
            __IO uint32_t tmrd_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t txsr_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t tras_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t trc_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t twr_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t trp_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t trcd_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 7;
        } sdtr1_bits;
    };

    // SDTR2 @ offset=0x0000014C
    union {
        __IO uint32_t sdtr2_reg;

        // bit fields
        struct {
            __IO uint32_t tmrd_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t txsr_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t tras_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t trc_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t twr_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t trp_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t trcd_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 7;
        } sdtr2_bits;
    };

    // SDCMR @ offset=0x00000150
    union {
        __IO uint32_t sdcmr_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t ctb2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctb1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nrfs_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t mrd_bit : 14; // bit offset=9  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 22;
        } sdcmr_bits;
    };

    // SDRTR @ offset=0x00000154
    union {
        __IO uint32_t sdrtr_reg;

        // bit fields
        struct {
            __IO uint32_t cre_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t count_bit : 13; // bit offset=1  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 12;
            __IO uint32_t reie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 17;
        } sdrtr_bits;
    };

    // SDSR @ offset=0x00000158
    union {
        __IO uint32_t sdsr_reg;

        // bit fields
        struct {
            __IO uint32_t re_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modes1_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t modes2_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 28;
        } sdsr_bits;
    };

} fmc_t;

// Peripheral Flash @ base_addess=0x52002000
typedef struct flash_t {

    // ACR @ offset=0x00000000
    union {
        __IO uint32_t acr_reg;

        // bit fields
        struct {
            __IO uint32_t latency_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t wrhighfreq_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } acr_bits;
    };

    // KEYR1 @ offset=0x00000004
    __IO uint32_t keyr1_reg;

    // OPTKEYR @ offset=0x00000008
    __IO uint32_t optkeyr_reg;

    // CR1 @ offset=0x0000000C
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t lock1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pg1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ser1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ber1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t fw1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t snb1_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t crc_en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eopie1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wrperrie1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pgserrie1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t strberrie1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t incerrie1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t operrie1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdperrie1_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdserrie1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sneccerr1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbeccerrie1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcendie1_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcrderrie1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } cr1_bits;
    };

    // SR1 @ offset=0x00000010
    union {
        __IO uint32_t sr1_reg;

        // bit fields
        struct {
            __IO uint32_t bsy1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wbne1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qw1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc_busy1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 12;
            __IO uint32_t eop1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wrperr1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pgserr1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t strberr1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t incerr1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t operr1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdperr1_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdserr1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sneccerr_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbeccerr1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcend1_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcrderr1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 3;
        } sr1_bits;
    };

    // CCR1 @ offset=0x00000014
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t clr_eop1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_wrperr1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_pgserr1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_strberr1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t clr_incerr1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_operr1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_rdperr1_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_rdserr1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_sneccerr1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_dbeccerr1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_crcend1_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_crcrderr1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 3;
        } ccr1_bits;
    };

    // OPTCR @ offset=0x00000018
    union {
        __IO uint32_t optcr_reg;

        // bit fields
        struct {
            __IO uint32_t optlock_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t optstart_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t mer_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 25;
            __IO uint32_t optchangeerrie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bank_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } optcr_bits;
    };

    // OPTSR_CUR @ offset=0x0000001C
    union {
        __IO uint32_t optsr_cur_reg;

        // bit fields
        struct {
            __IO uint32_t opt_busy_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t bor_lev_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t iwdg1_sw_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nrst_stop_d1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nrst_stby_d1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdp_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 8;
            __IO uint32_t iwdg_fz_stop_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwdg_fz_sdby_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t st_ram_size_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t security_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 7;
            __IO uint32_t io_hslv_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t optchangeerr_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bank_opt_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } optsr_cur_bits;
    };

    // OPTSR_PRG @ offset=0x00000020
    union {
        __IO uint32_t optsr_prg_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t bor_lev_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t iwdg1_sw_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nrst_stop_d1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nrst_stby_d1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdp_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 8;
            __IO uint32_t iwdg_fz_stop_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwdg_fz_sdby_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t st_ram_size_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t security_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 7;
            __IO uint32_t io_hslv_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t swap_bank_opt_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } optsr_prg_bits;
    };

    // OPTCCR @ offset=0x00000024
    __IO uint32_t optccr_reg;

    // PRAR_CUR1 @ offset=0x00000028
    union {
        __IO uint32_t prar_cur1_reg;

        // bit fields
        struct {
            __IO uint32_t prot_area_start1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t prot_area_end1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmep1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } prar_cur1_bits;
    };

    // PRAR_PRG1 @ offset=0x0000002C
    union {
        __IO uint32_t prar_prg1_reg;

        // bit fields
        struct {
            __IO uint32_t prot_area_start1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t prot_area_end1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmep1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } prar_prg1_bits;
    };

    // SCAR_CUR1 @ offset=0x00000030
    union {
        __IO uint32_t scar_cur1_reg;

        // bit fields
        struct {
            __IO uint32_t sec_area_start1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sec_area_end1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmes1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } scar_cur1_bits;
    };

    // SCAR_PRG1 @ offset=0x00000034
    union {
        __IO uint32_t scar_prg1_reg;

        // bit fields
        struct {
            __IO uint32_t sec_area_start1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sec_area_end1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmes1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } scar_prg1_bits;
    };

    // WPSN_CUR1R @ offset=0x00000038
    __IO uint32_t wpsn_cur1r_reg;

    // WPSN_PRG1R @ offset=0x0000003C
    __IO uint32_t wpsn_prg1r_reg;

    // BOOT_CURR @ offset=0x00000040
    union {
        __IO uint32_t boot_curr_reg;

        // bit fields
        struct {
            __IO uint32_t boot_add0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t boot_add1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } boot_curr_bits;
    };

    // BOOT_PRGR @ offset=0x00000044
    union {
        __IO uint32_t boot_prgr_reg;

        // bit fields
        struct {
            __IO uint32_t boot_add0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t boot_add1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } boot_prgr_bits;
    };

    __IO uint8_t reserved0[8];

    // CRCCR1 @ offset=0x00000050
    union {
        __IO uint32_t crccr1_reg;

        // bit fields
        struct {
            __IO uint32_t crc_sect_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t all_bank_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc_by_sect_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add_sect_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clean_sect_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t start_crc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clean_crc_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t crc_burst_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } crccr1_bits;
    };

    // CRCSADD1R @ offset=0x00000054
    __IO uint32_t crcsadd1r_reg;

    // CRCEADD1R @ offset=0x00000058
    __IO uint32_t crceadd1r_reg;

    // CRCDATAR @ offset=0x0000005C
    __IO uint32_t crcdatar_reg;

    // ECC_FA1R @ offset=0x00000060
    __IO uint32_t ecc_fa1r_reg;

    __IO uint8_t reserved1[156];

    // ACR_ @ offset=0x00000100
    union {
        __IO uint32_t acr__reg;

        // bit fields
        struct {
            __IO uint32_t latency_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t wrhighfreq_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } acr__bits;
    };

    // KEYR2 @ offset=0x00000104
    __IO uint32_t keyr2_reg;

    // OPTKEYR_ @ offset=0x00000108
    __IO uint32_t optkeyr__reg;

    // CR2 @ offset=0x0000010C
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t lock2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pg2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ser2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ber2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psize2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t fw2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start2_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t snb2_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t spss2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc_en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eopie2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wrperrie2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pgserrie2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t strberrie2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t incerrie2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t operrie2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdperrie2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdserrie2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sneccerrie2_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbeccerrie2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcendie2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcrderrie2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } cr2_bits;
    };

    // SR2 @ offset=0x00000110
    union {
        __IO uint32_t sr2_reg;

        // bit fields
        struct {
            __IO uint32_t bsy2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wbne2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qw2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc_busy2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 12;
            __IO uint32_t eop2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wrperr2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pgserr2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t strberr2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t incerr2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t operr2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdperr2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdserr2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sneccerr2_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbeccerr2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcend2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 4;
        } sr2_bits;
    };

    // CCR2 @ offset=0x00000114
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t clr_eop2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_wrperr2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_pgserr2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_strberr2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t clr_incerr2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_operr2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_rdperr2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_rdserr1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_sneccerr2_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_dbeccerr1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clr_crcend2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 4;
        } ccr2_bits;
    };

    // OPTCR_ @ offset=0x00000118
    union {
        __IO uint32_t optcr__reg;

        // bit fields
        struct {
            __IO uint32_t optlock_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t optstart_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t mer_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 25;
            __IO uint32_t optchangeerrie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bank_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } optcr__bits;
    };

    // OPTSR_CUR_ @ offset=0x0000011C
    union {
        __IO uint32_t optsr_cur__reg;

        // bit fields
        struct {
            __IO uint32_t opt_busy_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t bor_lev_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t iwdg1_sw_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nrst_stop_d1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nrst_stby_d1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdp_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 8;
            __IO uint32_t iwdg_fz_stop_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iwdg_fz_sdby_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t st_ram_size_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t security_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 7;
            __IO uint32_t io_hslv_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t optchangeerr_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bank_opt_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } optsr_cur__bits;
    };

    // OPTSR_PRG_ @ offset=0x00000120
    union {
        __IO uint32_t optsr_prg__reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t bor_lev_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t iwdg1_sw_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t nrst_stop_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nrst_stdy_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdp_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 8;
            __IO uint32_t fz_iwdg_stop_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fz_iwdg_sdby_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t st_ram_size_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t security_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 7;
            __IO uint32_t io_hslv_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t swap_bank_opt_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } optsr_prg__bits;
    };

    // OPTCCR_ @ offset=0x00000124
    __IO uint32_t optccr__reg;

    // PRAR_CUR2 @ offset=0x00000128
    union {
        __IO uint32_t prar_cur2_reg;

        // bit fields
        struct {
            __IO uint32_t prot_area_start2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t prot_area_end2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmep2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } prar_cur2_bits;
    };

    // PRAR_PRG2 @ offset=0x0000012C
    union {
        __IO uint32_t prar_prg2_reg;

        // bit fields
        struct {
            __IO uint32_t prot_area_start2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t prot_area_end2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmep2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } prar_prg2_bits;
    };

    // SCAR_CUR2 @ offset=0x00000130
    union {
        __IO uint32_t scar_cur2_reg;

        // bit fields
        struct {
            __IO uint32_t sec_area_start2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sec_area_end2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmes2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } scar_cur2_bits;
    };

    // SCAR_PRG2 @ offset=0x00000134
    union {
        __IO uint32_t scar_prg2_reg;

        // bit fields
        struct {
            __IO uint32_t sec_area_start2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sec_area_end2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t dmes2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } scar_prg2_bits;
    };

    // WPSN_CUR2R @ offset=0x00000138
    __IO uint32_t wpsn_cur2r_reg;

    // WPSN_PRG2R @ offset=0x0000013C
    __IO uint32_t wpsn_prg2r_reg;

    // BOOT_CURR_ @ offset=0x00000140
    union {
        __IO uint32_t boot_curr__reg;

        // bit fields
        struct {
            __IO uint32_t boot_add0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t boot_add1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } boot_curr__bits;
    };

    // BOOT_PRGR_ @ offset=0x00000144
    union {
        __IO uint32_t boot_prgr__reg;

        // bit fields
        struct {
            __IO uint32_t boot_add0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t boot_add1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } boot_prgr__bits;
    };

    __IO uint8_t reserved2[8];

    // CRCCR2 @ offset=0x00000150
    union {
        __IO uint32_t crccr2_reg;

        // bit fields
        struct {
            __IO uint32_t crc_sect_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t all_bank_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc_by_sect_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add_sect_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clean_sect_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t start_crc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t clean_crc_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t crc_burst_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } crccr2_bits;
    };

    // CRCSADD2R @ offset=0x00000154
    __IO uint32_t crcsadd2r_reg;

    // CRCEADD2R @ offset=0x00000158
    __IO uint32_t crceadd2r_reg;

    // CRCDATAR_ @ offset=0x0000015C
    __IO uint32_t crcdatar__reg;

    // ECC_FA2R @ offset=0x00000160
    __IO uint32_t ecc_fa2r_reg;

} flash_t;

// Peripheral GPIOA @ base_addess=0x58020000
typedef struct gpioa_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpioa_t;

// Peripheral GPIOB @ base_addess=0x58020400
typedef struct gpiob_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpiob_t;

// Peripheral GPIOC @ base_addess=0x58020800
typedef struct gpioc_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpioc_t;

// Peripheral GPIOD @ base_addess=0x58020C00
typedef struct gpiod_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpiod_t;

// Peripheral GPIOE @ base_addess=0x58021000
typedef struct gpioe_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpioe_t;

// Peripheral GPIOF @ base_addess=0x58021400
typedef struct gpiof_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpiof_t;

// Peripheral GPIOG @ base_addess=0x58021800
typedef struct gpiog_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpiog_t;

// Peripheral GPIOH @ base_addess=0x58021C00
typedef struct gpioh_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpioh_t;

// Peripheral GPIOI @ base_addess=0x58022000
typedef struct gpioi_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpioi_t;

// Peripheral GPIOJ @ base_addess=0x58022400
typedef struct gpioj_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpioj_t;

// Peripheral GPIOK @ base_addess=0x58022800
typedef struct gpiok_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t moder_reg;

        // bit fields
        struct {
            __IO uint32_t mode0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t mode1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t mode2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t mode3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mode4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t mode5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t mode6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t mode7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t mode8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t mode9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t mode10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t mode11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t mode12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t mode13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t mode14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t mode15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } moder_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t otyper_reg;

        // bit fields
        struct {
            __IO uint32_t ot0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ot15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } otyper_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t ospeedr_reg;

        // bit fields
        struct {
            __IO uint32_t ospeed0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ospeed1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ospeed2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t ospeed3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ospeed4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t ospeed5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t ospeed6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t ospeed7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t ospeed8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t ospeed9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t ospeed10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t ospeed11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t ospeed12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t ospeed13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t ospeed14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t ospeed15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } ospeedr_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t pupdr_reg;

        // bit fields
        struct {
            __IO uint32_t pupd0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pupd1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pupd2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pupd3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pupd4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t pupd5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pupd6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t pupd7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t pupd8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t pupd9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t pupd10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t pupd11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved11: 1;
            __IO uint32_t pupd12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved12: 1;
            __IO uint32_t pupd13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved13: 1;
            __IO uint32_t pupd14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved14: 1;
            __IO uint32_t pupd15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved15 : 1;
        } pupdr_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t idr_reg;

        // bit fields
        struct {
            __IO uint32_t id0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t id15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } idr_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t odr_reg;

        // bit fields
        struct {
            __IO uint32_t od0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t od15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 16;
        } odr_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t bsrr_reg;

        // bit fields
        struct {
            __IO uint32_t bs0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bs15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t br15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } bsrr_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t lckr_reg;

        // bit fields
        struct {
            __IO uint32_t lck0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lck15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lckk_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 15;
        } lckr_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t afrl_reg;

        // bit fields
        struct {
            __IO uint32_t afsel0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrl_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t afrh_reg;

        // bit fields
        struct {
            __IO uint32_t afsel8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t afsel9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t afsel10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t afsel11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t afsel12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t afsel13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t afsel14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t afsel15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } afrh_bits;
    };

} gpiok_t;

// Peripheral HRTIM_Common @ base_addess=0x40017780
typedef struct hrtim_common_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ad4usrc_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad3usrc_bit : 3; // bit offset=22  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2usrc_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1usrc_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t teudis_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdudis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcudis_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbudis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t taudis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mudis_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 13;
            __IO uint32_t terst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdrst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcrst_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbrst_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tarst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mrst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teswu_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdswu_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcswu_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbswu_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t taswu_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mswu_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 7;
        } cr2_bits;
    };

    // ISR @ offset=0x00000008
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t bmper_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dllrdy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sysflt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t flt4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t flt3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t flt2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t flt1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 7;
        } isr_bits;
    };

    // ICR @ offset=0x0000000C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t bmperc_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t dllrdyc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sysfltc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5c_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t flt4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t flt3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t flt2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t flt1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 7;
        } icr_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t bmperie_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dllrdyie_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sysflte_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 7;
        } ier_bits;
    };

    // OENR @ offset=0x00000014
    union {
        __IO uint32_t oenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t te2oen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t te1oen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t td2oen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t td1oen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tc2oen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tc1oen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tb2oen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tb1oen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ta2oen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ta1oen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 13;
        } oenr_bits;
    };

    // DISR @ offset=0x00000018
    union {
        __IO uint32_t disr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t te2odis_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1odis_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td2odis_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1odis_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc2odis_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1odis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb2odis_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1odis_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta2odis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1odis_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 13;
        } disr_bits;
    };

    // ODSR @ offset=0x0000001C
    union {
        __IO uint32_t odsr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t te2ods_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t te1ods_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t td2ods_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t td1ods_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc2ods_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc1ods_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tb2ods_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tb1ods_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ta2ods_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ta1ods_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 13;
        } odsr_bits;
    };

    // BMCR @ offset=0x00000020
    union {
        __IO uint32_t bmcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t bmstat_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tebm_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdbm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbm_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbbm_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tabm_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mtbm_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bmpren_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bmprsc_bit : 4; // bit offset=6  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t bmclk_bit : 4; // bit offset=2  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t bmom_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bme_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } bmcr_bits;
    };

    // BMTRG @ offset=0x00000024
    union {
        __IO uint32_t bmtrg_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ochpev_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t terep_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t terst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdrep_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdrst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcrep_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcrst_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbrep_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbrst_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tarep_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tarst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstrep_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstrst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sw_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } bmtrg_bits;
    };

    // BMCMPR6 @ offset=0x00000028
    __IO uint32_t bmcmpr6_reg;

    // BMPER @ offset=0x0000002C
    __IO uint32_t bmper_reg;

    // EECR1 @ offset=0x00000030
    union {
        __IO uint32_t eecr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t ee5fast_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5sns_bit : 2; // bit offset=27  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5pol_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5src_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4fast_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4sns_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4pol_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4src_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3fast_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3sns_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3pol_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3src_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2fast_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2sns_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2pol_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2src_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1fast_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1sns_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1pol_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1src_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } eecr1_bits;
    };

    // EECR2 @ offset=0x00000034
    union {
        __IO uint32_t eecr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t ee10sns_bit : 2; // bit offset=27  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10pol_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10src_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9sns_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9pol_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9src_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8sns_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8pol_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8src_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7sns_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7pol_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7src_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6sns_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6pol_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6src_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } eecr2_bits;
    };

    // EECR3 @ offset=0x00000038
    union {
        __IO uint32_t eecr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t ee10sns_bit : 2; // bit offset=27  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10pol_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10src_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9sns_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9pol_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9src_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8sns_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8pol_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8src_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7sns_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7pol_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7src_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6sns_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6pol_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6src_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
        } eecr3_bits;
    };

    // ADC1R @ offset=0x0000003C
    union {
        __IO uint32_t adc1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ad1teper_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tec4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tec3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tec2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdper_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdc4_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdc3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdc2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcper_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcc4_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcc3_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcc2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbrst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbper_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbc4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbc3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbc2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tarst_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1taper_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tac4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tac3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tac2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } adc1r_bits;
    };

    // ADC2R @ offset=0x00000040
    union {
        __IO uint32_t adc2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ad2terst_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tec4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tec3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tec2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdrst_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdper_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdc4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdc3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdc2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcrst_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcper_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcc4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcc3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcc2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbper_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbc4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbc3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbc2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2taper_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tac4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tac3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tac2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev10_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev9_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev8_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev7_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } adc2r_bits;
    };

    // ADC3R @ offset=0x00000044
    union {
        __IO uint32_t adc3r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ad1teper_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tec4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tec3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tec2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdper_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdc4_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdc3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tdc2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcper_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcc4_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcc3_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tcc2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbrst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbper_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbc4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbc3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tbc2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tarst_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1taper_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tac4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tac3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1tac2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1eev1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad1mc1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } adc3r_bits;
    };

    // ADC4R @ offset=0x00000048
    union {
        __IO uint32_t adc4r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t ad2terst_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tec4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tec3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tec2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdrst_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdper_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdc4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdc3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tdc2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcrst_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcper_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcc4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcc3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tcc2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbper_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbc4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbc3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tbc2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2taper_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tac4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tac3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2tac2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev10_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev9_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev8_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev7_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2eev6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ad2mc1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } adc4r_bits;
    };

    // DLLCR @ offset=0x0000004C
    union {
        __IO uint32_t dllcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t calrte_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t calen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cal_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } dllcr_bits;
    };

    // FLTINR1 @ offset=0x00000050
    union {
        __IO uint32_t fltinr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t flt4lck_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4f_bit : 4; // bit offset=27  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4src_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4p_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4e_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3lck_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3f_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3src_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3p_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3e_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2lck_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2f_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2src_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1lck_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1f_bit : 4; // bit offset=3  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1src_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } fltinr1_bits;
    };

    // FLTINR2 @ offset=0x00000054
    union {
        __IO uint32_t fltinr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t fltsd_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5lck_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5f_bit : 4; // bit offset=3  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5src_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 2;
        } fltinr2_bits;
    };

    // BDMUPDR @ offset=0x00000058
    union {
        __IO uint32_t bdmupdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t mcmp4_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp3_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp2_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mrep_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcnt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mdier_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t micr_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 13;
        } bdmupdr_bits;
    };

    // BDTxUPR @ offset=0x0000005C
    union {
        __IO uint32_t bdtxupr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t timxfltr_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxoutr_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxchpr_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxrstr_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxeefr2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxeefr1_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxrst2r_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxset2r_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxrst1r_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxset1r_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timx_dtxr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxcmp4_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxcmp3_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxcmp2_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxcmp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxrep_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxcnt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxdier_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxicr_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timxcr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } bdtxupr_bits;
    };

    // BDMADR @ offset=0x00000060
    __IO uint32_t bdmadr_reg;

} hrtim_common_t;

// Peripheral HRTIM_Master @ base_addess=0x40017400
typedef struct hrtim_master_t {

    // MCR @ offset=0x00000000
    union {
        __IO uint32_t mcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t brstdma_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t mrepu_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t preen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dacsync_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sync_src_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sync_out_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncstrtm_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncrstm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sync_in_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t half_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t retrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ck_psc_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } mcr_bits;
    };

    // MISR @ offset=0x00000004
    union {
        __IO uint32_t misr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t mupd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sync_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mrep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mcmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mcmp3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mcmp2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mcmp1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 19;
        } misr_bits;
    };

    // MICR @ offset=0x00000008
    union {
        __IO uint32_t micr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t mupdc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t syncc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mrepc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mcmp4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mcmp3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mcmp2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mcmp1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } micr_bits;
    };

    // MDIER4 @ offset=0x0000000C
    union {
        __IO uint32_t mdier4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 22;
            __IO uint32_t mupdde_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncde_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mrepde_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp4de_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp3de_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp2de_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp1de_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mupdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mrepie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mcmp1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } mdier4_bits;
    };

    // MCNTR @ offset=0x00000010
    __IO uint32_t mcntr_reg;

    // MPER @ offset=0x00000014
    __IO uint32_t mper_reg;

    // MREP @ offset=0x00000018
    __IO uint32_t mrep_reg;

    // MCMP1R @ offset=0x0000001C
    __IO uint32_t mcmp1r_reg;

    __IO uint8_t reserved0[4];

    // MCMP2R @ offset=0x00000024
    __IO uint32_t mcmp2r_reg;

    // MCMP3R @ offset=0x00000028
    __IO uint32_t mcmp3r_reg;

    // MCMP4R @ offset=0x0000002C
    __IO uint32_t mcmp4r_reg;

} hrtim_master_t;

// Peripheral HRTIM_TIMA @ base_addess=0x40017480
typedef struct hrtim_tima_t {

    // TIMACR @ offset=0x00000000
    union {
        __IO uint32_t timacr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t updgat_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t preen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dacsync_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstu_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teu_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdu_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcu_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbu_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrstu_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrepu_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncstrtx_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncrstx_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pshpll_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t half_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t retrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ck_pscx_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } timacr_bits;
    };

    // TIMAISR @ offset=0x00000004
    union {
        __IO uint32_t timaisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 19;
            __IO uint32_t o2stat_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t o1stat_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ippstat_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cppstat_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dlyprt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t upd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } timaisr_bits;
    };

    // TIMAICR @ offset=0x00000008
    union {
        __IO uint32_t timaicr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t dlyprtc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstc_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx2c_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set2xc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx1c_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set1xc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt2c_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt1c_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t updc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t repc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } timaicr_bits;
    };

    // TIMADIER5 @ offset=0x0000000C
    union {
        __IO uint32_t timadier5_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t dlyprtde_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2de_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2de_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1de_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xde_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2de_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1de_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updde_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repde_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4de_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3de_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2de_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1de_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprtie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2ie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2ie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1ie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } timadier5_bits;
    };

    // CNTAR @ offset=0x00000010
    __IO uint32_t cntar_reg;

    // PERAR @ offset=0x00000014
    __IO uint32_t perar_reg;

    // REPAR @ offset=0x00000018
    __IO uint32_t repar_reg;

    // CMP1AR @ offset=0x0000001C
    __IO uint32_t cmp1ar_reg;

    // CMP1CAR @ offset=0x00000020
    union {
        __IO uint32_t cmp1car_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t repx_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1x_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cmp1car_bits;
    };

    // CMP2AR @ offset=0x00000024
    __IO uint32_t cmp2ar_reg;

    // CMP3AR @ offset=0x00000028
    __IO uint32_t cmp3ar_reg;

    // CMP4AR @ offset=0x0000002C
    __IO uint32_t cmp4ar_reg;

    // CPT1AR @ offset=0x00000030
    __IO uint32_t cpt1ar_reg;

    // CPT2AR @ offset=0x00000034
    __IO uint32_t cpt2ar_reg;

    // DTAR @ offset=0x00000038
    union {
        __IO uint32_t dtar_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t dtflkx_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfslkx_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtfx_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfx_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrlkx_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrslkx_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtprsc_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtrx_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrx_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
        } dtar_bits;
    };

    // SETA1R @ offset=0x0000003C
    union {
        __IO uint32_t seta1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } seta1r_bits;
    };

    // RSTA1R @ offset=0x00000040
    union {
        __IO uint32_t rsta1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rsta1r_bits;
    };

    // SETA2R @ offset=0x00000044
    union {
        __IO uint32_t seta2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } seta2r_bits;
    };

    // RSTA2R @ offset=0x00000048
    union {
        __IO uint32_t rsta2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rsta2r_bits;
    };

    // EEFAR1 @ offset=0x0000004C
    union {
        __IO uint32_t eefar1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee5fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefar1_bits;
    };

    // EEFAR2 @ offset=0x00000050
    union {
        __IO uint32_t eefar2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee10fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefar2_bits;
    };

    // RSTAR @ offset=0x00000054
    union {
        __IO uint32_t rstar_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t timecmp4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } rstar_bits;
    };

    // CHPAR @ offset=0x00000058
    union {
        __IO uint32_t chpar_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t strtpw_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpdty_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpfrq_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } chpar_bits;
    };

    // CPT1ACR @ offset=0x0000005C
    union {
        __IO uint32_t cpt1acr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt1acr_bits;
    };

    // CPT2ACR @ offset=0x00000060
    union {
        __IO uint32_t cpt2acr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt2acr_bits;
    };

    // OUTAR @ offset=0x00000064
    union {
        __IO uint32_t outar_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t didl2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprt_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprten_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t didl1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } outar_bits;
    };

    // FLTAR @ offset=0x00000068
    union {
        __IO uint32_t fltar_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t fltlck_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } fltar_bits;
    };

} hrtim_tima_t;

// Peripheral HRTIM_TIMB @ base_addess=0x40017500
typedef struct hrtim_timb_t {

    // TIMBCR @ offset=0x00000000
    union {
        __IO uint32_t timbcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t updgat_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t preen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dacsync_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstu_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teu_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdu_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcu_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbu_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrstu_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrepu_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncstrtx_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncrstx_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pshpll_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t half_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t retrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ck_pscx_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } timbcr_bits;
    };

    // TIMBISR @ offset=0x00000004
    union {
        __IO uint32_t timbisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 19;
            __IO uint32_t o2stat_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t o1stat_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ippstat_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cppstat_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dlyprt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t upd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } timbisr_bits;
    };

    // TIMBICR @ offset=0x00000008
    union {
        __IO uint32_t timbicr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t dlyprtc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstc_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx2c_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set2xc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx1c_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set1xc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt2c_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt1c_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t updc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t repc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } timbicr_bits;
    };

    // TIMBDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t timbdier5_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t dlyprtde_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2de_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2de_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1de_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xde_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2de_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1de_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updde_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repde_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4de_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3de_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2de_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1de_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprtie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2ie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2ie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1ie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } timbdier5_bits;
    };

    // CNTR @ offset=0x00000010
    __IO uint32_t cntr_reg;

    // PERBR @ offset=0x00000014
    __IO uint32_t perbr_reg;

    // REPBR @ offset=0x00000018
    __IO uint32_t repbr_reg;

    // CMP1BR @ offset=0x0000001C
    __IO uint32_t cmp1br_reg;

    // CMP1CBR @ offset=0x00000020
    union {
        __IO uint32_t cmp1cbr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t repx_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1x_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cmp1cbr_bits;
    };

    // CMP2BR @ offset=0x00000024
    __IO uint32_t cmp2br_reg;

    // CMP3BR @ offset=0x00000028
    __IO uint32_t cmp3br_reg;

    // CMP4BR @ offset=0x0000002C
    __IO uint32_t cmp4br_reg;

    // CPT1BR @ offset=0x00000030
    __IO uint32_t cpt1br_reg;

    // CPT2BR @ offset=0x00000034
    __IO uint32_t cpt2br_reg;

    // DTBR @ offset=0x00000038
    union {
        __IO uint32_t dtbr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t dtflkx_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfslkx_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtfx_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfx_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrlkx_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrslkx_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtprsc_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtrx_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrx_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
        } dtbr_bits;
    };

    // SETB1R @ offset=0x0000003C
    union {
        __IO uint32_t setb1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } setb1r_bits;
    };

    // RSTB1R @ offset=0x00000040
    union {
        __IO uint32_t rstb1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rstb1r_bits;
    };

    // SETB2R @ offset=0x00000044
    union {
        __IO uint32_t setb2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } setb2r_bits;
    };

    // RSTB2R @ offset=0x00000048
    union {
        __IO uint32_t rstb2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rstb2r_bits;
    };

    // EEFBR1 @ offset=0x0000004C
    union {
        __IO uint32_t eefbr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee5fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefbr1_bits;
    };

    // EEFBR2 @ offset=0x00000050
    union {
        __IO uint32_t eefbr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee10fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefbr2_bits;
    };

    // RSTBR @ offset=0x00000054
    union {
        __IO uint32_t rstbr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t timecmp4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } rstbr_bits;
    };

    // CHPBR @ offset=0x00000058
    union {
        __IO uint32_t chpbr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t strtpw_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpdty_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpfrq_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } chpbr_bits;
    };

    // CPT1BCR @ offset=0x0000005C
    union {
        __IO uint32_t cpt1bcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt1bcr_bits;
    };

    // CPT2BCR @ offset=0x00000060
    union {
        __IO uint32_t cpt2bcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt2bcr_bits;
    };

    // OUTBR @ offset=0x00000064
    union {
        __IO uint32_t outbr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t didl2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprt_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprten_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t didl1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } outbr_bits;
    };

    // FLTBR @ offset=0x00000068
    union {
        __IO uint32_t fltbr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t fltlck_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } fltbr_bits;
    };

} hrtim_timb_t;

// Peripheral HRTIM_TIMC @ base_addess=0x40017580
typedef struct hrtim_timc_t {

    // TIMCCR @ offset=0x00000000
    union {
        __IO uint32_t timccr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t updgat_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t preen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dacsync_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstu_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teu_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdu_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcu_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbu_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrstu_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrepu_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncstrtx_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncrstx_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pshpll_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t half_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t retrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ck_pscx_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } timccr_bits;
    };

    // TIMCISR @ offset=0x00000004
    union {
        __IO uint32_t timcisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 19;
            __IO uint32_t o2stat_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t o1stat_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ippstat_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cppstat_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dlyprt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t upd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } timcisr_bits;
    };

    // TIMCICR @ offset=0x00000008
    union {
        __IO uint32_t timcicr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t dlyprtc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstc_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx2c_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set2xc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx1c_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set1xc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt2c_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt1c_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t updc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t repc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } timcicr_bits;
    };

    // TIMCDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t timcdier5_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t dlyprtde_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2de_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2de_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1de_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xde_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2de_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1de_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updde_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repde_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4de_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3de_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2de_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1de_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprtie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2ie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2ie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1ie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } timcdier5_bits;
    };

    // CNTCR @ offset=0x00000010
    __IO uint32_t cntcr_reg;

    // PERCR @ offset=0x00000014
    __IO uint32_t percr_reg;

    // REPCR @ offset=0x00000018
    __IO uint32_t repcr_reg;

    // CMP1CR @ offset=0x0000001C
    __IO uint32_t cmp1cr_reg;

    // CMP1CCR @ offset=0x00000020
    union {
        __IO uint32_t cmp1ccr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t repx_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1x_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cmp1ccr_bits;
    };

    // CMP2CR @ offset=0x00000024
    __IO uint32_t cmp2cr_reg;

    // CMP3CR @ offset=0x00000028
    __IO uint32_t cmp3cr_reg;

    // CMP4CR @ offset=0x0000002C
    __IO uint32_t cmp4cr_reg;

    // CPT1CR @ offset=0x00000030
    __IO uint32_t cpt1cr_reg;

    // CPT2CR @ offset=0x00000034
    __IO uint32_t cpt2cr_reg;

    // DTCR @ offset=0x00000038
    union {
        __IO uint32_t dtcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t dtflkx_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfslkx_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtfx_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfx_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrlkx_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrslkx_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtprsc_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtrx_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrx_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
        } dtcr_bits;
    };

    // SETC1R @ offset=0x0000003C
    union {
        __IO uint32_t setc1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } setc1r_bits;
    };

    // RSTC1R @ offset=0x00000040
    union {
        __IO uint32_t rstc1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rstc1r_bits;
    };

    // SETC2R @ offset=0x00000044
    union {
        __IO uint32_t setc2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } setc2r_bits;
    };

    // RSTC2R @ offset=0x00000048
    union {
        __IO uint32_t rstc2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rstc2r_bits;
    };

    // EEFCR1 @ offset=0x0000004C
    union {
        __IO uint32_t eefcr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee5fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefcr1_bits;
    };

    // EEFCR2 @ offset=0x00000050
    union {
        __IO uint32_t eefcr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee10fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefcr2_bits;
    };

    // RSTCR @ offset=0x00000054
    union {
        __IO uint32_t rstcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t timecmp4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } rstcr_bits;
    };

    // CHPCR @ offset=0x00000058
    union {
        __IO uint32_t chpcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t strtpw_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpdty_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpfrq_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } chpcr_bits;
    };

    // CPT1CCR @ offset=0x0000005C
    union {
        __IO uint32_t cpt1ccr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt1ccr_bits;
    };

    // CPT2CCR @ offset=0x00000060
    union {
        __IO uint32_t cpt2ccr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt2ccr_bits;
    };

    // OUTCR @ offset=0x00000064
    union {
        __IO uint32_t outcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t didl2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprt_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprten_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t didl1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } outcr_bits;
    };

    // FLTCR @ offset=0x00000068
    union {
        __IO uint32_t fltcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t fltlck_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } fltcr_bits;
    };

} hrtim_timc_t;

// Peripheral HRTIM_TIMD @ base_addess=0x40017600
typedef struct hrtim_timd_t {

    // TIMDCR @ offset=0x00000000
    union {
        __IO uint32_t timdcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t updgat_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t preen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dacsync_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstu_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teu_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdu_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcu_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbu_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrstu_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrepu_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncstrtx_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncrstx_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pshpll_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t half_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t retrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ck_pscx_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } timdcr_bits;
    };

    // TIMDISR @ offset=0x00000004
    union {
        __IO uint32_t timdisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 19;
            __IO uint32_t o2stat_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t o1stat_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ippstat_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cppstat_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dlyprt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t upd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } timdisr_bits;
    };

    // TIMDICR @ offset=0x00000008
    union {
        __IO uint32_t timdicr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t dlyprtc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstc_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx2c_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set2xc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx1c_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set1xc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt2c_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt1c_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t updc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t repc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } timdicr_bits;
    };

    // TIMDDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t timddier5_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t dlyprtde_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2de_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2de_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1de_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xde_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2de_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1de_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updde_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repde_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4de_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3de_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2de_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1de_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprtie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2ie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2ie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1ie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } timddier5_bits;
    };

    // CNTDR @ offset=0x00000010
    __IO uint32_t cntdr_reg;

    // PERDR @ offset=0x00000014
    __IO uint32_t perdr_reg;

    // REPDR @ offset=0x00000018
    __IO uint32_t repdr_reg;

    // CMP1DR @ offset=0x0000001C
    __IO uint32_t cmp1dr_reg;

    // CMP1CDR @ offset=0x00000020
    union {
        __IO uint32_t cmp1cdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t repx_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1x_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cmp1cdr_bits;
    };

    // CMP2DR @ offset=0x00000024
    __IO uint32_t cmp2dr_reg;

    // CMP3DR @ offset=0x00000028
    __IO uint32_t cmp3dr_reg;

    // CMP4DR @ offset=0x0000002C
    __IO uint32_t cmp4dr_reg;

    // CPT1DR @ offset=0x00000030
    __IO uint32_t cpt1dr_reg;

    // CPT2DR @ offset=0x00000034
    __IO uint32_t cpt2dr_reg;

    // DTDR @ offset=0x00000038
    union {
        __IO uint32_t dtdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t dtflkx_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfslkx_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtfx_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfx_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrlkx_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrslkx_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtprsc_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtrx_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrx_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
        } dtdr_bits;
    };

    // SETD1R @ offset=0x0000003C
    union {
        __IO uint32_t setd1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } setd1r_bits;
    };

    // RSTD1R @ offset=0x00000040
    union {
        __IO uint32_t rstd1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rstd1r_bits;
    };

    // SETD2R @ offset=0x00000044
    union {
        __IO uint32_t setd2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } setd2r_bits;
    };

    // RSTD2R @ offset=0x00000048
    union {
        __IO uint32_t rstd2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rstd2r_bits;
    };

    // EEFDR1 @ offset=0x0000004C
    union {
        __IO uint32_t eefdr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee5fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefdr1_bits;
    };

    // EEFDR2 @ offset=0x00000050
    union {
        __IO uint32_t eefdr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee10fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefdr2_bits;
    };

    // RSTDR @ offset=0x00000054
    union {
        __IO uint32_t rstdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t timecmp4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timecmp1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } rstdr_bits;
    };

    // CHPDR @ offset=0x00000058
    union {
        __IO uint32_t chpdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t strtpw_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpdty_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpfrq_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } chpdr_bits;
    };

    // CPT1DCR @ offset=0x0000005C
    union {
        __IO uint32_t cpt1dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt1dcr_bits;
    };

    // CPT2DCR @ offset=0x00000060
    union {
        __IO uint32_t cpt2dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t tecmp2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tecmp1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te1set_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt2dcr_bits;
    };

    // OUTDR @ offset=0x00000064
    union {
        __IO uint32_t outdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t didl2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprt_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprten_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t didl1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } outdr_bits;
    };

    // FLTDR @ offset=0x00000068
    union {
        __IO uint32_t fltdr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t fltlck_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } fltdr_bits;
    };

} hrtim_timd_t;

// Peripheral HRTIM_TIME @ base_addess=0x40017680
typedef struct hrtim_time_t {

    // TIMECR @ offset=0x00000000
    union {
        __IO uint32_t timecr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t updgat_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t preen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dacsync_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstu_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teu_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdu_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcu_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbu_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrstu_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txrepu_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t delcmp2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncstrtx_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncrstx_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pshpll_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t half_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t retrig_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cont_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ck_pscx_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
        } timecr_bits;
    };

    // TIMEISR @ offset=0x00000004
    union {
        __IO uint32_t timeisr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 19;
            __IO uint32_t o2stat_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t o1stat_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ippstat_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cppstat_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dlyprt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rstx1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t setx1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpt1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t upd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rep_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmp1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } timeisr_bits;
    };

    // TIMEICR @ offset=0x00000008
    union {
        __IO uint32_t timeicr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t dlyprtc_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstc_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx2c_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set2xc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rstx1c_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t set1xc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt2c_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cpt1c_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t updc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t repc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp4c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp3c_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp2c_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmp1c_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } timeicr_bits;
    };

    // TIMEDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t timedier5_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t dlyprtde_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2de_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2de_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1de_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xde_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2de_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1de_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updde_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repde_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4de_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3de_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2de_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1de_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprtie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx2ie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t setx2ie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstx1ie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t set1xie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt2ie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpt1ie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t repie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1ie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } timedier5_bits;
    };

    // CNTER @ offset=0x00000010
    __IO uint32_t cnter_reg;

    // PERER @ offset=0x00000014
    __IO uint32_t perer_reg;

    // REPER @ offset=0x00000018
    __IO uint32_t reper_reg;

    // CMP1ER @ offset=0x0000001C
    __IO uint32_t cmp1er_reg;

    // CMP1CER @ offset=0x00000020
    union {
        __IO uint32_t cmp1cer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t repx_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1x_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cmp1cer_bits;
    };

    // CMP2ER @ offset=0x00000024
    __IO uint32_t cmp2er_reg;

    // CMP3ER @ offset=0x00000028
    __IO uint32_t cmp3er_reg;

    // CMP4ER @ offset=0x0000002C
    __IO uint32_t cmp4er_reg;

    // CPT1ER @ offset=0x00000030
    __IO uint32_t cpt1er_reg;

    // CPT2ER @ offset=0x00000034
    __IO uint32_t cpt2er_reg;

    // DTER @ offset=0x00000038
    union {
        __IO uint32_t dter_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t dtflkx_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfslkx_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtfx_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtfx_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrlkx_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrslkx_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtprsc_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdtrx_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtrx_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
        } dter_bits;
    };

    // SETE1R @ offset=0x0000003C
    union {
        __IO uint32_t sete1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } sete1r_bits;
    };

    // RSTE1R @ offset=0x00000040
    union {
        __IO uint32_t rste1r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rste1r_bits;
    };

    // SETE2R @ offset=0x00000044
    union {
        __IO uint32_t sete2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } sete2r_bits;
    };

    // RSTE2R @ offset=0x00000048
    union {
        __IO uint32_t rste2r_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t update_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timevnt1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t per_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t resync_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } rste2r_bits;
    };

    // EEFER1 @ offset=0x0000004C
    union {
        __IO uint32_t eefer1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee5fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee5ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee4ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee3ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee2ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee1ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefer1_bits;
    };

    // EEFER2 @ offset=0x00000050
    union {
        __IO uint32_t eefer2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t ee10fltr_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee10ltch_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9fltr_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee9ltch_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8fltr_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee8ltch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7fltr_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee7ltch_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6fltr_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ee6ltch_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } eefer2_bits;
    };

    // RSTER @ offset=0x00000054
    union {
        __IO uint32_t rster_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 30;
            __IO uint32_t timdcmp4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timdcmp1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timccmp1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timbcmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timacmp1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t extevnt1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstcmp1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mstper_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmp2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t updt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } rster_bits;
    };

    // CHPER @ offset=0x00000058
    union {
        __IO uint32_t chper_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t strtpw_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpdty_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpfrq_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } chper_bits;
    };

    // CPT1ECR @ offset=0x0000005C
    union {
        __IO uint32_t cpt1ecr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt1ecr_bits;
    };

    // CPT2ECR @ offset=0x00000060
    union {
        __IO uint32_t cpt2ecr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t tdcmp2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tdcmp1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1rst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t td1set_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tccmp1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tc1set_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tbcmp1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tb1set_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tacmp1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ta1set_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev10cpt_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev9cpt_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev8cpt_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev7cpt_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev6cpt_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev5cpt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev4cpt_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev3cpt_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev2cpt_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exev1cpt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udpcpt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swcpt_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cpt2ecr_bits;
    };

    // OUTER @ offset=0x00000064
    union {
        __IO uint32_t outer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 23;
            __IO uint32_t didl2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprt_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dlyprten_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dten_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t didl1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chp1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fault1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t idles1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idlem1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
        } outer_bits;
    };

    // FLTER @ offset=0x00000068
    union {
        __IO uint32_t flter_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t fltlck_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt5en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt4en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt3en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flt1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } flter_bits;
    };

} hrtim_time_t;

// Peripheral HSEM @ base_addess=0x58026400
typedef struct hsem_t {

    // HSEM_R0 @ offset=0x00000000
    union {
        __IO uint32_t hsem_r0_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r0_bits;
    };

    // HSEM_R1 @ offset=0x00000004
    union {
        __IO uint32_t hsem_r1_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r1_bits;
    };

    // HSEM_R2 @ offset=0x00000008
    union {
        __IO uint32_t hsem_r2_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r2_bits;
    };

    // HSEM_R3 @ offset=0x0000000C
    union {
        __IO uint32_t hsem_r3_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r3_bits;
    };

    // HSEM_R4 @ offset=0x00000010
    union {
        __IO uint32_t hsem_r4_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r4_bits;
    };

    // HSEM_R5 @ offset=0x00000014
    union {
        __IO uint32_t hsem_r5_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r5_bits;
    };

    // HSEM_R6 @ offset=0x00000018
    union {
        __IO uint32_t hsem_r6_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r6_bits;
    };

    // HSEM_R7 @ offset=0x0000001C
    union {
        __IO uint32_t hsem_r7_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r7_bits;
    };

    // HSEM_R8 @ offset=0x00000020
    union {
        __IO uint32_t hsem_r8_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r8_bits;
    };

    // HSEM_R9 @ offset=0x00000024
    union {
        __IO uint32_t hsem_r9_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r9_bits;
    };

    // HSEM_R10 @ offset=0x00000028
    union {
        __IO uint32_t hsem_r10_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r10_bits;
    };

    // HSEM_R11 @ offset=0x0000002C
    union {
        __IO uint32_t hsem_r11_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r11_bits;
    };

    // HSEM_R12 @ offset=0x00000030
    union {
        __IO uint32_t hsem_r12_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r12_bits;
    };

    // HSEM_R13 @ offset=0x00000034
    union {
        __IO uint32_t hsem_r13_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r13_bits;
    };

    // HSEM_R14 @ offset=0x00000038
    union {
        __IO uint32_t hsem_r14_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r14_bits;
    };

    // HSEM_R15 @ offset=0x0000003C
    union {
        __IO uint32_t hsem_r15_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r15_bits;
    };

    // HSEM_R16 @ offset=0x00000040
    union {
        __IO uint32_t hsem_r16_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r16_bits;
    };

    // HSEM_R17 @ offset=0x00000044
    union {
        __IO uint32_t hsem_r17_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r17_bits;
    };

    // HSEM_R18 @ offset=0x00000048
    union {
        __IO uint32_t hsem_r18_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r18_bits;
    };

    // HSEM_R19 @ offset=0x0000004C
    union {
        __IO uint32_t hsem_r19_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r19_bits;
    };

    // HSEM_R20 @ offset=0x00000050
    union {
        __IO uint32_t hsem_r20_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r20_bits;
    };

    // HSEM_R21 @ offset=0x00000054
    union {
        __IO uint32_t hsem_r21_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r21_bits;
    };

    // HSEM_R22 @ offset=0x00000058
    union {
        __IO uint32_t hsem_r22_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r22_bits;
    };

    // HSEM_R23 @ offset=0x0000005C
    union {
        __IO uint32_t hsem_r23_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r23_bits;
    };

    // HSEM_R24 @ offset=0x00000060
    union {
        __IO uint32_t hsem_r24_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r24_bits;
    };

    // HSEM_R25 @ offset=0x00000064
    union {
        __IO uint32_t hsem_r25_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r25_bits;
    };

    // HSEM_R26 @ offset=0x00000068
    union {
        __IO uint32_t hsem_r26_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r26_bits;
    };

    // HSEM_R27 @ offset=0x0000006C
    union {
        __IO uint32_t hsem_r27_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r27_bits;
    };

    // HSEM_R28 @ offset=0x00000070
    union {
        __IO uint32_t hsem_r28_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r28_bits;
    };

    // HSEM_R29 @ offset=0x00000074
    union {
        __IO uint32_t hsem_r29_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r29_bits;
    };

    // HSEM_R30 @ offset=0x00000078
    union {
        __IO uint32_t hsem_r30_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r30_bits;
    };

    // HSEM_R31 @ offset=0x0000007C
    union {
        __IO uint32_t hsem_r31_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_r31_bits;
    };

    // HSEM_RLR0 @ offset=0x00000080
    union {
        __IO uint32_t hsem_rlr0_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr0_bits;
    };

    // HSEM_RLR1 @ offset=0x00000084
    union {
        __IO uint32_t hsem_rlr1_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr1_bits;
    };

    // HSEM_RLR2 @ offset=0x00000088
    union {
        __IO uint32_t hsem_rlr2_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr2_bits;
    };

    // HSEM_RLR3 @ offset=0x0000008C
    union {
        __IO uint32_t hsem_rlr3_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr3_bits;
    };

    // HSEM_RLR4 @ offset=0x00000090
    union {
        __IO uint32_t hsem_rlr4_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr4_bits;
    };

    // HSEM_RLR5 @ offset=0x00000094
    union {
        __IO uint32_t hsem_rlr5_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr5_bits;
    };

    // HSEM_RLR6 @ offset=0x00000098
    union {
        __IO uint32_t hsem_rlr6_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr6_bits;
    };

    // HSEM_RLR7 @ offset=0x0000009C
    union {
        __IO uint32_t hsem_rlr7_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr7_bits;
    };

    // HSEM_RLR8 @ offset=0x000000A0
    union {
        __IO uint32_t hsem_rlr8_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr8_bits;
    };

    // HSEM_RLR9 @ offset=0x000000A4
    union {
        __IO uint32_t hsem_rlr9_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr9_bits;
    };

    // HSEM_RLR10 @ offset=0x000000A8
    union {
        __IO uint32_t hsem_rlr10_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr10_bits;
    };

    // HSEM_RLR11 @ offset=0x000000AC
    union {
        __IO uint32_t hsem_rlr11_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr11_bits;
    };

    // HSEM_RLR12 @ offset=0x000000B0
    union {
        __IO uint32_t hsem_rlr12_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr12_bits;
    };

    // HSEM_RLR13 @ offset=0x000000B4
    union {
        __IO uint32_t hsem_rlr13_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr13_bits;
    };

    // HSEM_RLR14 @ offset=0x000000B8
    union {
        __IO uint32_t hsem_rlr14_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr14_bits;
    };

    // HSEM_RLR15 @ offset=0x000000BC
    union {
        __IO uint32_t hsem_rlr15_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr15_bits;
    };

    // HSEM_RLR16 @ offset=0x000000C0
    union {
        __IO uint32_t hsem_rlr16_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr16_bits;
    };

    // HSEM_RLR17 @ offset=0x000000C4
    union {
        __IO uint32_t hsem_rlr17_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr17_bits;
    };

    // HSEM_RLR18 @ offset=0x000000C8
    union {
        __IO uint32_t hsem_rlr18_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr18_bits;
    };

    // HSEM_RLR19 @ offset=0x000000CC
    union {
        __IO uint32_t hsem_rlr19_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr19_bits;
    };

    // HSEM_RLR20 @ offset=0x000000D0
    union {
        __IO uint32_t hsem_rlr20_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr20_bits;
    };

    // HSEM_RLR21 @ offset=0x000000D4
    union {
        __IO uint32_t hsem_rlr21_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr21_bits;
    };

    // HSEM_RLR22 @ offset=0x000000D8
    union {
        __IO uint32_t hsem_rlr22_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr22_bits;
    };

    // HSEM_RLR23 @ offset=0x000000DC
    union {
        __IO uint32_t hsem_rlr23_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr23_bits;
    };

    // HSEM_RLR24 @ offset=0x000000E0
    union {
        __IO uint32_t hsem_rlr24_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr24_bits;
    };

    // HSEM_RLR25 @ offset=0x000000E4
    union {
        __IO uint32_t hsem_rlr25_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr25_bits;
    };

    // HSEM_RLR26 @ offset=0x000000E8
    union {
        __IO uint32_t hsem_rlr26_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr26_bits;
    };

    // HSEM_RLR27 @ offset=0x000000EC
    union {
        __IO uint32_t hsem_rlr27_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr27_bits;
    };

    // HSEM_RLR28 @ offset=0x000000F0
    union {
        __IO uint32_t hsem_rlr28_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr28_bits;
    };

    // HSEM_RLR29 @ offset=0x000000F4
    union {
        __IO uint32_t hsem_rlr29_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr29_bits;
    };

    // HSEM_RLR30 @ offset=0x000000F8
    union {
        __IO uint32_t hsem_rlr30_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr30_bits;
    };

    // HSEM_RLR31 @ offset=0x000000FC
    union {
        __IO uint32_t hsem_rlr31_reg;

        // bit fields
        struct {
            __IO uint32_t procid_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 22;
            __IO uint32_t lock_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_rlr31_bits;
    };

    // HSEM_IER @ offset=0x00000100
    union {
        __IO uint32_t hsem_ier_reg;

        // bit fields
        struct {
            __IO uint32_t isem0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isem31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } hsem_ier_bits;
    };

    // HSEM_ICR @ offset=0x00000104
    union {
        __IO uint32_t hsem_icr_reg;

        // bit fields
        struct {
            __IO uint32_t isem0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_icr_bits;
    };

    // HSEM_ISR @ offset=0x00000108
    union {
        __IO uint32_t hsem_isr_reg;

        // bit fields
        struct {
            __IO uint32_t isem0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_isr_bits;
    };

    // HSEM_MISR @ offset=0x0000010C
    union {
        __IO uint32_t hsem_misr_reg;

        // bit fields
        struct {
            __IO uint32_t isem0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t isem31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } hsem_misr_bits;
    };

    __IO uint8_t reserved0[48];

    // HSEM_CR @ offset=0x00000140
    union {
        __IO uint32_t hsem_cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t masterid_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t key_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } hsem_cr_bits;
    };

    // HSEM_KEYR @ offset=0x00000144
    __IO uint32_t hsem_keyr_reg;

} hsem_t;

// Peripheral I2C1 @ base_addess=0x40005400
typedef struct i2c1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nackie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stopie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t errie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dnf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t anfoff_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nostretch_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wupen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gcen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbhen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbden_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alerten_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 8;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t sadd0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rd_wrn_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t head10r_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbytes_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t reload_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autoend_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecbyte_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } cr2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t oar1_reg;

        // bit fields
        struct {
            __IO uint32_t oa1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 9;
            __IO uint32_t oa1mode_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t oa1en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 16;
        } oar1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t oar2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t oa2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t oa2msk_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t oa2en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 16;
        } oar2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t timingr_reg;

        // bit fields
        struct {
            __IO uint32_t scll_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t sclh_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t sdadel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t scldel_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t presc_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } timingr_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t timeoutr_reg;

        // bit fields
        struct {
            __IO uint32_t timeouta_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t tidle_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t timouten_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timeoutb_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t texten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } timeoutr_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t txe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nackf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t stopf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t berr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arlo_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pecerr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t timeout_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t alert_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t busy_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dir_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addcode_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } isr_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t addrcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t nackcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t stopcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t berrcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arlocf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrcf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t peccf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t timoutcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t alertcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 18;
        } icr_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t pecr_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t rxdr_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t txdr_reg;

} i2c1_t;

// Peripheral I2C2 @ base_addess=0x40005800
typedef struct i2c2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nackie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stopie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t errie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dnf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t anfoff_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nostretch_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wupen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gcen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbhen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbden_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alerten_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 8;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t sadd0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rd_wrn_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t head10r_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbytes_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t reload_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autoend_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecbyte_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } cr2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t oar1_reg;

        // bit fields
        struct {
            __IO uint32_t oa1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 9;
            __IO uint32_t oa1mode_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t oa1en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 16;
        } oar1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t oar2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t oa2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t oa2msk_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t oa2en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 16;
        } oar2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t timingr_reg;

        // bit fields
        struct {
            __IO uint32_t scll_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t sclh_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t sdadel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t scldel_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t presc_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } timingr_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t timeoutr_reg;

        // bit fields
        struct {
            __IO uint32_t timeouta_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t tidle_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t timouten_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timeoutb_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t texten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } timeoutr_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t txe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nackf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t stopf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t berr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arlo_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pecerr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t timeout_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t alert_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t busy_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dir_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addcode_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } isr_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t addrcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t nackcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t stopcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t berrcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arlocf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrcf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t peccf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t timoutcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t alertcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 18;
        } icr_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t pecr_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t rxdr_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t txdr_reg;

} i2c2_t;

// Peripheral I2C3 @ base_addess=0x40005C00
typedef struct i2c3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nackie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stopie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t errie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dnf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t anfoff_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nostretch_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wupen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gcen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbhen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbden_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alerten_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 8;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t sadd0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rd_wrn_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t head10r_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbytes_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t reload_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autoend_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecbyte_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } cr2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t oar1_reg;

        // bit fields
        struct {
            __IO uint32_t oa1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 9;
            __IO uint32_t oa1mode_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t oa1en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 16;
        } oar1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t oar2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t oa2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t oa2msk_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t oa2en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 16;
        } oar2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t timingr_reg;

        // bit fields
        struct {
            __IO uint32_t scll_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t sclh_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t sdadel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t scldel_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t presc_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } timingr_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t timeoutr_reg;

        // bit fields
        struct {
            __IO uint32_t timeouta_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t tidle_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t timouten_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timeoutb_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t texten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } timeoutr_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t txe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nackf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t stopf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t berr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arlo_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pecerr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t timeout_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t alert_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t busy_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dir_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addcode_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } isr_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t addrcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t nackcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t stopcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t berrcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arlocf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrcf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t peccf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t timoutcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t alertcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 18;
        } icr_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t pecr_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t rxdr_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t txdr_reg;

} i2c3_t;

// Peripheral I2C4 @ base_addess=0x58001C00
typedef struct i2c4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nackie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stopie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t errie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dnf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t anfoff_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbc_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nostretch_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wupen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gcen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbhen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smbden_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alerten_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 8;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t sadd0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sadd9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rd_wrn_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t head10r_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t start_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbytes_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t reload_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t autoend_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pecbyte_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } cr2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t oar1_reg;

        // bit fields
        struct {
            __IO uint32_t oa1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 9;
            __IO uint32_t oa1mode_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t oa1en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 16;
        } oar1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t oar2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t oa2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t oa2msk_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t oa2en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 16;
        } oar2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t timingr_reg;

        // bit fields
        struct {
            __IO uint32_t scll_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t sclh_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t sdadel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t scldel_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t presc_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } timingr_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t timeoutr_reg;

        // bit fields
        struct {
            __IO uint32_t timeouta_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t tidle_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t timouten_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timeoutb_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 14;
            __IO uint32_t texten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } timeoutr_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t txe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nackf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t stopf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t berr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arlo_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pecerr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t timeout_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t alert_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t busy_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dir_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t addcode_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } isr_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t addrcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t nackcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t stopcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t berrcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arlocf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrcf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t peccf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t timoutcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t alertcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 18;
        } icr_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t pecr_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t rxdr_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t txdr_reg;

} i2c4_t;

// Peripheral IWDG @ base_addess=0x58004800
typedef struct iwdg_t {

    // KR @ offset=0x00000000
    __IO uint32_t kr_reg;

    // PR @ offset=0x00000004
    __IO uint32_t pr_reg;

    // RLR @ offset=0x00000008
    __IO uint32_t rlr_reg;

    // SR @ offset=0x0000000C
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t pvu_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rvu_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wvu_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 29;
        } sr_bits;
    };

    // WINR @ offset=0x00000010
    __IO uint32_t winr_reg;

} iwdg_t;

// Peripheral JPEG @ base_addess=0x52003000
typedef struct jpeg_t {

    // CONFR0 @ offset=0x00000000
    __IO uint32_t confr0_reg;

    // CONFR1 @ offset=0x00000004
    union {
        __IO uint32_t confr1_reg;

        // bit fields
        struct {
            __IO uint32_t nf_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t de_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t colorspace_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ns_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t hdr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t ysize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 15;
        } confr1_bits;
    };

    // CONFR2 @ offset=0x00000008
    __IO uint32_t confr2_reg;

    // CONFR3 @ offset=0x0000000C
    __IO uint32_t confr3_reg;

    // CONFRN1 @ offset=0x00000010
    union {
        __IO uint32_t confrn1_reg;

        // bit fields
        struct {
            __IO uint32_t hd_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ha_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qt_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nb_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t vsf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t hsf_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 19;
        } confrn1_bits;
    };

    // CONFRN2 @ offset=0x00000014
    union {
        __IO uint32_t confrn2_reg;

        // bit fields
        struct {
            __IO uint32_t hd_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ha_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qt_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nb_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t vsf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t hsf_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 19;
        } confrn2_bits;
    };

    // CONFRN3 @ offset=0x00000018
    union {
        __IO uint32_t confrn3_reg;

        // bit fields
        struct {
            __IO uint32_t hd_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ha_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qt_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nb_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t vsf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t hsf_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 19;
        } confrn3_bits;
    };

    // CONFRN4 @ offset=0x0000001C
    union {
        __IO uint32_t confrn4_reg;

        // bit fields
        struct {
            __IO uint32_t hd_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ha_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t qt_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nb_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t vsf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t hsf_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 19;
        } confrn4_bits;
    };

    __IO uint8_t reserved0[16];

    // CR @ offset=0x00000030
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t jcen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iftie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ifnfie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oftie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ofneie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eocie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hpdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t idmaen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odmaen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iff_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t off_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 17;
        } cr_bits;
    };

    // SR @ offset=0x00000034
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t iftf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ifnff_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t oftf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ofnef_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eocf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hpdf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cof_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 24;
        } sr_bits;
    };

    // CFR @ offset=0x00000038
    union {
        __IO uint32_t cfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 5;
            __IO uint32_t ceocf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chpdf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } cfr_bits;
    };

    __IO uint8_t reserved1[4];

    // DIR @ offset=0x00000040
    __IO uint32_t dir_reg;

    // DOR @ offset=0x00000044
    __IO uint32_t dor_reg;

} jpeg_t;

// Peripheral LPTIM1 @ base_addess=0x40002400
typedef struct lptim1_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t down_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t up_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrok_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpok_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t exttrig_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 19;
        } isr_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downcf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t upcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrokcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpokcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t exttrigcf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrmcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpmcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } icr_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t upie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrokie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpokie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exttrigie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrmie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpmie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 19;
        } ier_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t enc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countmode_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t preload_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wavpol_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wave_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timout_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigen_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigsel_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t presc_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t trgflt_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckflt_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t cksel_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t enable_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sngstrt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntstrt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countrst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstare_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 27;
        } cr_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t cmp_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t arr_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t cnt_reg;

    __IO uint8_t reserved0[4];

    // CFGR2 @ offset=0x00000024
    union {
        __IO uint32_t cfgr2_reg;

        // bit fields
        struct {
            __IO uint32_t in1sel_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t in2sel_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } cfgr2_bits;
    };

} lptim1_t;

// Peripheral LPTIM2 @ base_addess=0x58002400
typedef struct lptim2_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t down_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t up_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrok_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpok_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t exttrig_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 19;
        } isr_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downcf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t upcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrokcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpokcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t exttrigcf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrmcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpmcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } icr_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t upie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrokie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpokie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exttrigie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrmie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpmie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 19;
        } ier_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t enc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countmode_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t preload_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wavpol_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wave_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timout_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigen_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigsel_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t presc_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t trgflt_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckflt_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t cksel_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t enable_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sngstrt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntstrt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countrst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstare_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 27;
        } cr_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t cmp_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t arr_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t cnt_reg;

    __IO uint8_t reserved0[4];

    // CFGR2 @ offset=0x00000024
    union {
        __IO uint32_t cfgr2_reg;

        // bit fields
        struct {
            __IO uint32_t in1sel_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t in2sel_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } cfgr2_bits;
    };

} lptim2_t;

// Peripheral LPTIM3 @ base_addess=0x58002800
typedef struct lptim3_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t down_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t up_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrok_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpok_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t exttrig_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 19;
        } isr_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downcf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t upcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrokcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpokcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t exttrigcf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrmcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpmcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } icr_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t upie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrokie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpokie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exttrigie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrmie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpmie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 19;
        } ier_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t enc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countmode_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t preload_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wavpol_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wave_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timout_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigen_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigsel_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t presc_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t trgflt_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckflt_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t cksel_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t enable_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sngstrt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntstrt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countrst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstare_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 27;
        } cr_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t cmp_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t arr_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t cnt_reg;

    __IO uint8_t reserved0[4];

    // CFGR2 @ offset=0x00000024
    __IO uint32_t cfgr2_reg;

} lptim3_t;

// Peripheral LPTIM4 @ base_addess=0x58002C00
typedef struct lptim4_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t down_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t up_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrok_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpok_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t exttrig_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 19;
        } isr_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downcf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t upcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrokcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpokcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t exttrigcf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrmcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpmcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } icr_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t upie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrokie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpokie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exttrigie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrmie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpmie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 19;
        } ier_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t enc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countmode_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t preload_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wavpol_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wave_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timout_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigen_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigsel_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t presc_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t trgflt_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckflt_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t cksel_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t enable_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sngstrt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntstrt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countrst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstare_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 27;
        } cr_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t cmp_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t arr_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t cnt_reg;

    __IO uint8_t reserved0[4];

    // CFGR2 @ offset=0x00000024
    __IO uint32_t cfgr2_reg;

} lptim4_t;

// Peripheral LPTIM5 @ base_addess=0x58003000
typedef struct lptim5_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t down_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t up_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrok_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpok_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t exttrig_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t arrm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmpm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 19;
        } isr_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downcf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t upcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrokcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpokcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t exttrigcf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t arrmcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmpmcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } icr_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t downie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t upie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrokie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpokie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t exttrigie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arrmie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmpmie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 19;
        } ier_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t enc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countmode_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t preload_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wavpol_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wave_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timout_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigen_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t trigsel_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t presc_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t trgflt_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckflt_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t cksel_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cfgr_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t enable_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sngstrt_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cntstrt_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t countrst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstare_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 27;
        } cr_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t cmp_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t arr_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t cnt_reg;

    __IO uint8_t reserved0[4];

    // CFGR2 @ offset=0x00000024
    __IO uint32_t cfgr2_reg;

} lptim5_t;

// Peripheral LPUART1 @ base_addess=0x58000C00
typedef struct lpuart1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t add_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    __IO uint32_t brr_reg;

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 3;
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} lpuart1_t;

// Peripheral LTDC @ base_addess=0x50001000
typedef struct ltdc_t {

    __IO uint8_t reserved0[8];

    // SSCR @ offset=0x00000008
    union {
        __IO uint32_t sscr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t hsw_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t vsh_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } sscr_bits;
    };

    // BPCR @ offset=0x0000000C
    union {
        __IO uint32_t bpcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ahbp_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t avbp_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } bpcr_bits;
    };

    // AWCR @ offset=0x00000010
    union {
        __IO uint32_t awcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t aav_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t aah_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } awcr_bits;
    };

    // TWCR @ offset=0x00000014
    union {
        __IO uint32_t twcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t totalw_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t totalh_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } twcr_bits;
    };

    // GCR @ offset=0x00000018
    union {
        __IO uint32_t gcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t hspol_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vspol_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t depol_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcpol_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t den_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t drw_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dgw_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t dbw_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t ltdcen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } gcr_bits;
    };

    __IO uint8_t reserved1[8];

    // SRCR @ offset=0x00000024
    union {
        __IO uint32_t srcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t vbr_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t imr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 29;
        } srcr_bits;
    };

    __IO uint8_t reserved2[4];

    // BCCR @ offset=0x0000002C
    union {
        __IO uint32_t bccr_reg;

        // bit fields
        struct {
            __IO uint32_t bcblue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t bcgreen_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t bcred_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } bccr_bits;
    };

    __IO uint8_t reserved3[4];

    // IER @ offset=0x00000034
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t rrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t terrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fuie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } ier_bits;
    };

    // ISR @ offset=0x00000038
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t rrif_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t terrif_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fuif_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 25;
        } isr_bits;
    };

    // ICR @ offset=0x0000003C
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t crrif_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cterrif_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cfuif_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } icr_bits;
    };

    // LIPCR @ offset=0x00000040
    __IO uint32_t lipcr_reg;

    // CPSR @ offset=0x00000044
    union {
        __IO uint32_t cpsr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t cxpos_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t cypos_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 14;
        } cpsr_bits;
    };

    // CDSR @ offset=0x00000048
    union {
        __IO uint32_t cdsr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t hsyncs_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vsyncs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hdes_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vdes_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 25;
        } cdsr_bits;
    };

    __IO uint8_t reserved4[56];

    // L1CR @ offset=0x00000084
    union {
        __IO uint32_t l1cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t cluten_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t colken_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t len_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } l1cr_bits;
    };

    // L1WHPCR @ offset=0x00000088
    union {
        __IO uint32_t l1whpcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t whsppos_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t whstpos_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } l1whpcr_bits;
    };

    // L1WVPCR @ offset=0x0000008C
    union {
        __IO uint32_t l1wvpcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t wvsppos_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t wvstpos_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } l1wvpcr_bits;
    };

    // L1CKCR @ offset=0x00000090
    union {
        __IO uint32_t l1ckcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ckred_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckgreen_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckblue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 13;
        } l1ckcr_bits;
    };

    // L1PFCR @ offset=0x00000094
    __IO uint32_t l1pfcr_reg;

    // L1CACR @ offset=0x00000098
    __IO uint32_t l1cacr_reg;

    // L1DCCR @ offset=0x0000009C
    union {
        __IO uint32_t l1dccr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t dcalpha_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcred_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcgreen_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcblue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 4;
        } l1dccr_bits;
    };

    // L1BFCR @ offset=0x000000A0
    union {
        __IO uint32_t l1bfcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t bf1_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t bf2_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } l1bfcr_bits;
    };

    __IO uint8_t reserved5[8];

    // L1CFBAR @ offset=0x000000AC
    __IO uint32_t l1cfbar_reg;

    // L1CFBLR @ offset=0x000000B0
    union {
        __IO uint32_t l1cfblr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t cfbp_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfbll_bit : 13; // bit offset=0  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } l1cfblr_bits;
    };

    // L1CFBLNR @ offset=0x000000B4
    __IO uint32_t l1cfblnr_reg;

    __IO uint8_t reserved6[12];

    // L1CLUTWR @ offset=0x000000C4
    union {
        __IO uint32_t l1clutwr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t clutadd_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t red_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t green_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t blue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } l1clutwr_bits;
    };

    __IO uint8_t reserved7[60];

    // L2CR @ offset=0x00000104
    union {
        __IO uint32_t l2cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t cluten_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t colken_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t len_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } l2cr_bits;
    };

    // L2WHPCR @ offset=0x00000108
    union {
        __IO uint32_t l2whpcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t whsppos_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t whstpos_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } l2whpcr_bits;
    };

    // L2WVPCR @ offset=0x0000010C
    union {
        __IO uint32_t l2wvpcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t wvsppos_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t wvstpos_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } l2wvpcr_bits;
    };

    // L2CKCR @ offset=0x00000110
    union {
        __IO uint32_t l2ckcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ckred_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckgreen_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckblue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 13;
        } l2ckcr_bits;
    };

    // L2PFCR @ offset=0x00000114
    __IO uint32_t l2pfcr_reg;

    // L2CACR @ offset=0x00000118
    __IO uint32_t l2cacr_reg;

    // L2DCCR @ offset=0x0000011C
    union {
        __IO uint32_t l2dccr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t dcalpha_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcred_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcgreen_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcblue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 4;
        } l2dccr_bits;
    };

    // L2BFCR @ offset=0x00000120
    union {
        __IO uint32_t l2bfcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t bf1_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t bf2_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } l2bfcr_bits;
    };

    __IO uint8_t reserved8[8];

    // L2CFBAR @ offset=0x0000012C
    __IO uint32_t l2cfbar_reg;

    // L2CFBLR @ offset=0x00000130
    union {
        __IO uint32_t l2cfblr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t cfbp_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t cfbll_bit : 13; // bit offset=0  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } l2cfblr_bits;
    };

    // L2CFBLNR @ offset=0x00000134
    __IO uint32_t l2cfblnr_reg;

    __IO uint8_t reserved9[12];

    // L2CLUTWR @ offset=0x00000144
    union {
        __IO uint32_t l2clutwr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t clutadd_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t red_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t green_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t blue_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 4;
        } l2clutwr_bits;
    };

} ltdc_t;

// Peripheral MDIOS @ base_addess=0x40009400
typedef struct mdios_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wrie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rdie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dpc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t port_address_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } cr_bits;
    };

    // WRFR @ offset=0x00000004
    __IO uint32_t wrfr_reg;

    // CWRFR @ offset=0x00000008
    __IO uint32_t cwrfr_reg;

    // RDFR @ offset=0x0000000C
    __IO uint32_t rdfr_reg;

    // CRDFR @ offset=0x00000010
    __IO uint32_t crdfr_reg;

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t perf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t serf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t terf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 29;
        } sr_bits;
    };

    // CLRFR @ offset=0x00000018
    union {
        __IO uint32_t clrfr_reg;

        // bit fields
        struct {
            __IO uint32_t cperf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cserf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cterf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } clrfr_bits;
    };

    // DINR0 @ offset=0x0000001C
    __IO uint32_t dinr0_reg;

    // DINR1 @ offset=0x00000020
    __IO uint32_t dinr1_reg;

    // DINR2 @ offset=0x00000024
    __IO uint32_t dinr2_reg;

    // DINR3 @ offset=0x00000028
    __IO uint32_t dinr3_reg;

    // DINR4 @ offset=0x0000002C
    __IO uint32_t dinr4_reg;

    // DINR5 @ offset=0x00000030
    __IO uint32_t dinr5_reg;

    // DINR6 @ offset=0x00000034
    __IO uint32_t dinr6_reg;

    // DINR7 @ offset=0x00000038
    __IO uint32_t dinr7_reg;

    // DINR8 @ offset=0x0000003C
    __IO uint32_t dinr8_reg;

    // DINR9 @ offset=0x00000040
    __IO uint32_t dinr9_reg;

    // DINR10 @ offset=0x00000044
    __IO uint32_t dinr10_reg;

    // DINR11 @ offset=0x00000048
    __IO uint32_t dinr11_reg;

    // DINR12 @ offset=0x0000004C
    __IO uint32_t dinr12_reg;

    // DINR13 @ offset=0x00000050
    __IO uint32_t dinr13_reg;

    // DINR14 @ offset=0x00000054
    __IO uint32_t dinr14_reg;

    // DINR15 @ offset=0x00000058
    __IO uint32_t dinr15_reg;

    // DINR16 @ offset=0x0000005C
    __IO uint32_t dinr16_reg;

    // DINR17 @ offset=0x00000060
    __IO uint32_t dinr17_reg;

    // DINR18 @ offset=0x00000064
    __IO uint32_t dinr18_reg;

    // DINR19 @ offset=0x00000068
    __IO uint32_t dinr19_reg;

    // DINR20 @ offset=0x0000006C
    __IO uint32_t dinr20_reg;

    // DINR21 @ offset=0x00000070
    __IO uint32_t dinr21_reg;

    // DINR22 @ offset=0x00000074
    __IO uint32_t dinr22_reg;

    // DINR23 @ offset=0x00000078
    __IO uint32_t dinr23_reg;

    // DINR24 @ offset=0x0000007C
    __IO uint32_t dinr24_reg;

    // DINR25 @ offset=0x00000080
    __IO uint32_t dinr25_reg;

    // DINR26 @ offset=0x00000084
    __IO uint32_t dinr26_reg;

    // DINR27 @ offset=0x00000088
    __IO uint32_t dinr27_reg;

    // DINR28 @ offset=0x0000008C
    __IO uint32_t dinr28_reg;

    // DINR29 @ offset=0x00000090
    __IO uint32_t dinr29_reg;

    // DINR30 @ offset=0x00000094
    __IO uint32_t dinr30_reg;

    // DINR31 @ offset=0x00000098
    __IO uint32_t dinr31_reg;

    // DOUTR0 @ offset=0x0000009C
    __IO uint32_t doutr0_reg;

    // DOUTR1 @ offset=0x000000A0
    __IO uint32_t doutr1_reg;

    // DOUTR2 @ offset=0x000000A4
    __IO uint32_t doutr2_reg;

    // DOUTR3 @ offset=0x000000A8
    __IO uint32_t doutr3_reg;

    // DOUTR4 @ offset=0x000000AC
    __IO uint32_t doutr4_reg;

    // DOUTR5 @ offset=0x000000B0
    __IO uint32_t doutr5_reg;

    // DOUTR6 @ offset=0x000000B4
    __IO uint32_t doutr6_reg;

    // DOUTR7 @ offset=0x000000B8
    __IO uint32_t doutr7_reg;

    // DOUTR8 @ offset=0x000000BC
    __IO uint32_t doutr8_reg;

    // DOUTR9 @ offset=0x000000C0
    __IO uint32_t doutr9_reg;

    // DOUTR10 @ offset=0x000000C4
    __IO uint32_t doutr10_reg;

    // DOUTR11 @ offset=0x000000C8
    __IO uint32_t doutr11_reg;

    // DOUTR12 @ offset=0x000000CC
    __IO uint32_t doutr12_reg;

    // DOUTR13 @ offset=0x000000D0
    __IO uint32_t doutr13_reg;

    // DOUTR14 @ offset=0x000000D4
    __IO uint32_t doutr14_reg;

    // DOUTR15 @ offset=0x000000D8
    __IO uint32_t doutr15_reg;

    // DOUTR16 @ offset=0x000000DC
    __IO uint32_t doutr16_reg;

    // DOUTR17 @ offset=0x000000E0
    __IO uint32_t doutr17_reg;

    // DOUTR18 @ offset=0x000000E4
    __IO uint32_t doutr18_reg;

    // DOUTR19 @ offset=0x000000E8
    __IO uint32_t doutr19_reg;

    // DOUTR20 @ offset=0x000000EC
    __IO uint32_t doutr20_reg;

    // DOUTR21 @ offset=0x000000F0
    __IO uint32_t doutr21_reg;

    // DOUTR22 @ offset=0x000000F4
    __IO uint32_t doutr22_reg;

    // DOUTR23 @ offset=0x000000F8
    __IO uint32_t doutr23_reg;

    // DOUTR24 @ offset=0x000000FC
    __IO uint32_t doutr24_reg;

    // DOUTR25 @ offset=0x00000100
    __IO uint32_t doutr25_reg;

    // DOUTR26 @ offset=0x00000104
    __IO uint32_t doutr26_reg;

    // DOUTR27 @ offset=0x00000108
    __IO uint32_t doutr27_reg;

    // DOUTR28 @ offset=0x0000010C
    __IO uint32_t doutr28_reg;

    // DOUTR29 @ offset=0x00000110
    __IO uint32_t doutr29_reg;

    // DOUTR30 @ offset=0x00000114
    __IO uint32_t doutr30_reg;

    // DOUTR31 @ offset=0x00000118
    __IO uint32_t doutr31_reg;

} mdios_t;

// Peripheral MDMA @ base_addess=0x52000000
typedef struct mdma_t {

    // MDMA_GISR0 @ offset=0x00000000
    union {
        __IO uint32_t mdma_gisr0_reg;

        // bit fields
        struct {
            __IO uint32_t gif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gif15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 16;
        } mdma_gisr0_bits;
    };

    __IO uint8_t reserved0[60];

    // MDMA_C0ISR @ offset=0x00000040
    union {
        __IO uint32_t mdma_c0isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c0isr_bits;
    };

    // MDMA_C0IFCR @ offset=0x00000044
    union {
        __IO uint32_t mdma_c0ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c0ifcr_bits;
    };

    // MDMA_C0ESR @ offset=0x00000048
    union {
        __IO uint32_t mdma_c0esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c0esr_bits;
    };

    // MDMA_C0CR @ offset=0x0000004C
    union {
        __IO uint32_t mdma_c0cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c0cr_bits;
    };

    // MDMA_C0TCR @ offset=0x00000050
    union {
        __IO uint32_t mdma_c0tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c0tcr_bits;
    };

    // MDMA_C0BNDTR @ offset=0x00000054
    union {
        __IO uint32_t mdma_c0bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c0bndtr_bits;
    };

    // MDMA_C0SAR @ offset=0x00000058
    __IO uint32_t mdma_c0sar_reg;

    // MDMA_C0DAR @ offset=0x0000005C
    __IO uint32_t mdma_c0dar_reg;

    // MDMA_C0BRUR @ offset=0x00000060
    union {
        __IO uint32_t mdma_c0brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c0brur_bits;
    };

    // MDMA_C0LAR @ offset=0x00000064
    __IO uint32_t mdma_c0lar_reg;

    // MDMA_C0TBR @ offset=0x00000068
    union {
        __IO uint32_t mdma_c0tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c0tbr_bits;
    };

    __IO uint8_t reserved1[4];

    // MDMA_C0MAR @ offset=0x00000070
    __IO uint32_t mdma_c0mar_reg;

    // MDMA_C0MDR @ offset=0x00000074
    __IO uint32_t mdma_c0mdr_reg;

    __IO uint8_t reserved2[8];

    // MDMA_C1ISR @ offset=0x00000080
    union {
        __IO uint32_t mdma_c1isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c1isr_bits;
    };

    // MDMA_C1IFCR @ offset=0x00000084
    union {
        __IO uint32_t mdma_c1ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c1ifcr_bits;
    };

    // MDMA_C1ESR @ offset=0x00000088
    union {
        __IO uint32_t mdma_c1esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c1esr_bits;
    };

    // MDMA_C1CR @ offset=0x0000008C
    union {
        __IO uint32_t mdma_c1cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c1cr_bits;
    };

    // MDMA_C1TCR @ offset=0x00000090
    union {
        __IO uint32_t mdma_c1tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c1tcr_bits;
    };

    // MDMA_C1BNDTR @ offset=0x00000094
    union {
        __IO uint32_t mdma_c1bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c1bndtr_bits;
    };

    // MDMA_C1SAR @ offset=0x00000098
    __IO uint32_t mdma_c1sar_reg;

    // MDMA_C1DAR @ offset=0x0000009C
    __IO uint32_t mdma_c1dar_reg;

    // MDMA_C1BRUR @ offset=0x000000A0
    union {
        __IO uint32_t mdma_c1brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c1brur_bits;
    };

    // MDMA_C1LAR @ offset=0x000000A4
    __IO uint32_t mdma_c1lar_reg;

    // MDMA_C1TBR @ offset=0x000000A8
    union {
        __IO uint32_t mdma_c1tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c1tbr_bits;
    };

    __IO uint8_t reserved3[4];

    // MDMA_C1MAR @ offset=0x000000B0
    __IO uint32_t mdma_c1mar_reg;

    // MDMA_C1MDR @ offset=0x000000B4
    __IO uint32_t mdma_c1mdr_reg;

    __IO uint8_t reserved4[8];

    // MDMA_C2ISR @ offset=0x000000C0
    union {
        __IO uint32_t mdma_c2isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c2isr_bits;
    };

    // MDMA_C2IFCR @ offset=0x000000C4
    union {
        __IO uint32_t mdma_c2ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c2ifcr_bits;
    };

    // MDMA_C2ESR @ offset=0x000000C8
    union {
        __IO uint32_t mdma_c2esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c2esr_bits;
    };

    // MDMA_C2CR @ offset=0x000000CC
    union {
        __IO uint32_t mdma_c2cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c2cr_bits;
    };

    // MDMA_C2TCR @ offset=0x000000D0
    union {
        __IO uint32_t mdma_c2tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c2tcr_bits;
    };

    // MDMA_C2BNDTR @ offset=0x000000D4
    union {
        __IO uint32_t mdma_c2bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c2bndtr_bits;
    };

    // MDMA_C2SAR @ offset=0x000000D8
    __IO uint32_t mdma_c2sar_reg;

    // MDMA_C2DAR @ offset=0x000000DC
    __IO uint32_t mdma_c2dar_reg;

    // MDMA_C2BRUR @ offset=0x000000E0
    union {
        __IO uint32_t mdma_c2brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c2brur_bits;
    };

    // MDMA_C2LAR @ offset=0x000000E4
    __IO uint32_t mdma_c2lar_reg;

    // MDMA_C2TBR @ offset=0x000000E8
    union {
        __IO uint32_t mdma_c2tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c2tbr_bits;
    };

    __IO uint8_t reserved5[4];

    // MDMA_C2MAR @ offset=0x000000F0
    __IO uint32_t mdma_c2mar_reg;

    // MDMA_C2MDR @ offset=0x000000F4
    __IO uint32_t mdma_c2mdr_reg;

    __IO uint8_t reserved6[8];

    // MDMA_C3ISR @ offset=0x00000100
    union {
        __IO uint32_t mdma_c3isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif3_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif3_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif3_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c3isr_bits;
    };

    // MDMA_C3IFCR @ offset=0x00000104
    union {
        __IO uint32_t mdma_c3ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif3_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif3_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif3_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c3ifcr_bits;
    };

    // MDMA_C3ESR @ offset=0x00000108
    union {
        __IO uint32_t mdma_c3esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c3esr_bits;
    };

    // MDMA_C3CR @ offset=0x0000010C
    union {
        __IO uint32_t mdma_c3cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c3cr_bits;
    };

    // MDMA_C3TCR @ offset=0x00000110
    union {
        __IO uint32_t mdma_c3tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c3tcr_bits;
    };

    // MDMA_C3BNDTR @ offset=0x00000114
    union {
        __IO uint32_t mdma_c3bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c3bndtr_bits;
    };

    // MDMA_C3SAR @ offset=0x00000118
    __IO uint32_t mdma_c3sar_reg;

    // MDMA_C3DAR @ offset=0x0000011C
    __IO uint32_t mdma_c3dar_reg;

    // MDMA_C3BRUR @ offset=0x00000120
    union {
        __IO uint32_t mdma_c3brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c3brur_bits;
    };

    // MDMA_C3LAR @ offset=0x00000124
    __IO uint32_t mdma_c3lar_reg;

    // MDMA_C3TBR @ offset=0x00000128
    union {
        __IO uint32_t mdma_c3tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c3tbr_bits;
    };

    __IO uint8_t reserved7[4];

    // MDMA_C3MAR @ offset=0x00000130
    __IO uint32_t mdma_c3mar_reg;

    // MDMA_C3MDR @ offset=0x00000134
    __IO uint32_t mdma_c3mdr_reg;

    __IO uint8_t reserved8[8];

    // MDMA_C4ISR @ offset=0x00000140
    union {
        __IO uint32_t mdma_c4isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif4_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c4isr_bits;
    };

    // MDMA_C4IFCR @ offset=0x00000144
    union {
        __IO uint32_t mdma_c4ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif4_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c4ifcr_bits;
    };

    // MDMA_C4ESR @ offset=0x00000148
    union {
        __IO uint32_t mdma_c4esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c4esr_bits;
    };

    // MDMA_C4CR @ offset=0x0000014C
    union {
        __IO uint32_t mdma_c4cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c4cr_bits;
    };

    // MDMA_C4TCR @ offset=0x00000150
    union {
        __IO uint32_t mdma_c4tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c4tcr_bits;
    };

    // MDMA_C4BNDTR @ offset=0x00000154
    union {
        __IO uint32_t mdma_c4bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c4bndtr_bits;
    };

    // MDMA_C4SAR @ offset=0x00000158
    __IO uint32_t mdma_c4sar_reg;

    // MDMA_C4DAR @ offset=0x0000015C
    __IO uint32_t mdma_c4dar_reg;

    // MDMA_C4BRUR @ offset=0x00000160
    union {
        __IO uint32_t mdma_c4brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c4brur_bits;
    };

    // MDMA_C4LAR @ offset=0x00000164
    __IO uint32_t mdma_c4lar_reg;

    // MDMA_C4TBR @ offset=0x00000168
    union {
        __IO uint32_t mdma_c4tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c4tbr_bits;
    };

    __IO uint8_t reserved9[4];

    // MDMA_C4MAR @ offset=0x00000170
    __IO uint32_t mdma_c4mar_reg;

    // MDMA_C4MDR @ offset=0x00000174
    __IO uint32_t mdma_c4mdr_reg;

    __IO uint8_t reserved10[8];

    // MDMA_C5ISR @ offset=0x00000180
    union {
        __IO uint32_t mdma_c5isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif5_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif5_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif5_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif5_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c5isr_bits;
    };

    // MDMA_C5IFCR @ offset=0x00000184
    union {
        __IO uint32_t mdma_c5ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif5_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif5_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif5_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif5_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c5ifcr_bits;
    };

    // MDMA_C5ESR @ offset=0x00000188
    union {
        __IO uint32_t mdma_c5esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c5esr_bits;
    };

    // MDMA_C5CR @ offset=0x0000018C
    union {
        __IO uint32_t mdma_c5cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c5cr_bits;
    };

    // MDMA_C5TCR @ offset=0x00000190
    union {
        __IO uint32_t mdma_c5tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c5tcr_bits;
    };

    // MDMA_C5BNDTR @ offset=0x00000194
    union {
        __IO uint32_t mdma_c5bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c5bndtr_bits;
    };

    // MDMA_C5SAR @ offset=0x00000198
    __IO uint32_t mdma_c5sar_reg;

    // MDMA_C5DAR @ offset=0x0000019C
    __IO uint32_t mdma_c5dar_reg;

    // MDMA_C5BRUR @ offset=0x000001A0
    union {
        __IO uint32_t mdma_c5brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c5brur_bits;
    };

    // MDMA_C5LAR @ offset=0x000001A4
    __IO uint32_t mdma_c5lar_reg;

    // MDMA_C5TBR @ offset=0x000001A8
    union {
        __IO uint32_t mdma_c5tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c5tbr_bits;
    };

    __IO uint8_t reserved11[4];

    // MDMA_C5MAR @ offset=0x000001B0
    __IO uint32_t mdma_c5mar_reg;

    // MDMA_C5MDR @ offset=0x000001B4
    __IO uint32_t mdma_c5mdr_reg;

    __IO uint8_t reserved12[8];

    // MDMA_C6ISR @ offset=0x000001C0
    union {
        __IO uint32_t mdma_c6isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif6_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif6_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif6_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif6_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif6_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c6isr_bits;
    };

    // MDMA_C6IFCR @ offset=0x000001C4
    union {
        __IO uint32_t mdma_c6ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif6_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif6_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif6_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif6_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif6_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c6ifcr_bits;
    };

    // MDMA_C6ESR @ offset=0x000001C8
    union {
        __IO uint32_t mdma_c6esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c6esr_bits;
    };

    // MDMA_C6CR @ offset=0x000001CC
    union {
        __IO uint32_t mdma_c6cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c6cr_bits;
    };

    // MDMA_C6TCR @ offset=0x000001D0
    union {
        __IO uint32_t mdma_c6tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c6tcr_bits;
    };

    // MDMA_C6BNDTR @ offset=0x000001D4
    union {
        __IO uint32_t mdma_c6bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c6bndtr_bits;
    };

    // MDMA_C6SAR @ offset=0x000001D8
    __IO uint32_t mdma_c6sar_reg;

    // MDMA_C6DAR @ offset=0x000001DC
    __IO uint32_t mdma_c6dar_reg;

    // MDMA_C6BRUR @ offset=0x000001E0
    union {
        __IO uint32_t mdma_c6brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c6brur_bits;
    };

    // MDMA_C6LAR @ offset=0x000001E4
    __IO uint32_t mdma_c6lar_reg;

    // MDMA_C6TBR @ offset=0x000001E8
    union {
        __IO uint32_t mdma_c6tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c6tbr_bits;
    };

    __IO uint8_t reserved13[4];

    // MDMA_C6MAR @ offset=0x000001F0
    __IO uint32_t mdma_c6mar_reg;

    // MDMA_C6MDR @ offset=0x000001F4
    __IO uint32_t mdma_c6mdr_reg;

    __IO uint8_t reserved14[8];

    // MDMA_C7ISR @ offset=0x00000200
    union {
        __IO uint32_t mdma_c7isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif7_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif7_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif7_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif7_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa7_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c7isr_bits;
    };

    // MDMA_C7IFCR @ offset=0x00000204
    union {
        __IO uint32_t mdma_c7ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif7_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif7_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif7_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif7_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c7ifcr_bits;
    };

    // MDMA_C7ESR @ offset=0x00000208
    union {
        __IO uint32_t mdma_c7esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c7esr_bits;
    };

    // MDMA_C7CR @ offset=0x0000020C
    union {
        __IO uint32_t mdma_c7cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c7cr_bits;
    };

    // MDMA_C7TCR @ offset=0x00000210
    union {
        __IO uint32_t mdma_c7tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c7tcr_bits;
    };

    // MDMA_C7BNDTR @ offset=0x00000214
    union {
        __IO uint32_t mdma_c7bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c7bndtr_bits;
    };

    // MDMA_C7SAR @ offset=0x00000218
    __IO uint32_t mdma_c7sar_reg;

    // MDMA_C7DAR @ offset=0x0000021C
    __IO uint32_t mdma_c7dar_reg;

    // MDMA_C7BRUR @ offset=0x00000220
    union {
        __IO uint32_t mdma_c7brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c7brur_bits;
    };

    // MDMA_C7LAR @ offset=0x00000224
    __IO uint32_t mdma_c7lar_reg;

    // MDMA_C7TBR @ offset=0x00000228
    union {
        __IO uint32_t mdma_c7tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c7tbr_bits;
    };

    __IO uint8_t reserved15[4];

    // MDMA_C7MAR @ offset=0x00000230
    __IO uint32_t mdma_c7mar_reg;

    // MDMA_C7MDR @ offset=0x00000234
    __IO uint32_t mdma_c7mdr_reg;

    __IO uint8_t reserved16[8];

    // MDMA_C8ISR @ offset=0x00000240
    union {
        __IO uint32_t mdma_c8isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif8_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif8_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif8_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif8_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif8_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c8isr_bits;
    };

    // MDMA_C8IFCR @ offset=0x00000244
    union {
        __IO uint32_t mdma_c8ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif8_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif8_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif8_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif8_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif8_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c8ifcr_bits;
    };

    // MDMA_C8ESR @ offset=0x00000248
    union {
        __IO uint32_t mdma_c8esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c8esr_bits;
    };

    // MDMA_C8CR @ offset=0x0000024C
    union {
        __IO uint32_t mdma_c8cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c8cr_bits;
    };

    // MDMA_C8TCR @ offset=0x00000250
    union {
        __IO uint32_t mdma_c8tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c8tcr_bits;
    };

    // MDMA_C8BNDTR @ offset=0x00000254
    union {
        __IO uint32_t mdma_c8bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c8bndtr_bits;
    };

    // MDMA_C8SAR @ offset=0x00000258
    __IO uint32_t mdma_c8sar_reg;

    // MDMA_C8DAR @ offset=0x0000025C
    __IO uint32_t mdma_c8dar_reg;

    // MDMA_C8BRUR @ offset=0x00000260
    union {
        __IO uint32_t mdma_c8brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c8brur_bits;
    };

    // MDMA_C8LAR @ offset=0x00000264
    __IO uint32_t mdma_c8lar_reg;

    // MDMA_C8TBR @ offset=0x00000268
    union {
        __IO uint32_t mdma_c8tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c8tbr_bits;
    };

    __IO uint8_t reserved17[4];

    // MDMA_C8MAR @ offset=0x00000270
    __IO uint32_t mdma_c8mar_reg;

    // MDMA_C8MDR @ offset=0x00000274
    __IO uint32_t mdma_c8mdr_reg;

    __IO uint8_t reserved18[8];

    // MDMA_C9ISR @ offset=0x00000280
    union {
        __IO uint32_t mdma_c9isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif9_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif9_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif9_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif9_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif9_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa9_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c9isr_bits;
    };

    // MDMA_C9IFCR @ offset=0x00000284
    union {
        __IO uint32_t mdma_c9ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif9_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif9_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif9_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif9_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif9_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c9ifcr_bits;
    };

    // MDMA_C9ESR @ offset=0x00000288
    union {
        __IO uint32_t mdma_c9esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c9esr_bits;
    };

    // MDMA_C9CR @ offset=0x0000028C
    union {
        __IO uint32_t mdma_c9cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c9cr_bits;
    };

    // MDMA_C9TCR @ offset=0x00000290
    union {
        __IO uint32_t mdma_c9tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c9tcr_bits;
    };

    // MDMA_C9BNDTR @ offset=0x00000294
    union {
        __IO uint32_t mdma_c9bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c9bndtr_bits;
    };

    // MDMA_C9SAR @ offset=0x00000298
    __IO uint32_t mdma_c9sar_reg;

    // MDMA_C9DAR @ offset=0x0000029C
    __IO uint32_t mdma_c9dar_reg;

    // MDMA_C9BRUR @ offset=0x000002A0
    union {
        __IO uint32_t mdma_c9brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c9brur_bits;
    };

    // MDMA_C9LAR @ offset=0x000002A4
    __IO uint32_t mdma_c9lar_reg;

    // MDMA_C9TBR @ offset=0x000002A8
    union {
        __IO uint32_t mdma_c9tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c9tbr_bits;
    };

    __IO uint8_t reserved19[4];

    // MDMA_C9MAR @ offset=0x000002B0
    __IO uint32_t mdma_c9mar_reg;

    // MDMA_C9MDR @ offset=0x000002B4
    __IO uint32_t mdma_c9mdr_reg;

    __IO uint8_t reserved20[8];

    // MDMA_C10ISR @ offset=0x000002C0
    union {
        __IO uint32_t mdma_c10isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif10_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif10_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif10_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif10_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif10_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa10_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c10isr_bits;
    };

    // MDMA_C10IFCR @ offset=0x000002C4
    union {
        __IO uint32_t mdma_c10ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif10_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif10_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif10_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif10_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif10_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c10ifcr_bits;
    };

    // MDMA_C10ESR @ offset=0x000002C8
    union {
        __IO uint32_t mdma_c10esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c10esr_bits;
    };

    // MDMA_C10CR @ offset=0x000002CC
    union {
        __IO uint32_t mdma_c10cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c10cr_bits;
    };

    // MDMA_C10TCR @ offset=0x000002D0
    union {
        __IO uint32_t mdma_c10tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c10tcr_bits;
    };

    // MDMA_C10BNDTR @ offset=0x000002D4
    union {
        __IO uint32_t mdma_c10bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c10bndtr_bits;
    };

    // MDMA_C10SAR @ offset=0x000002D8
    __IO uint32_t mdma_c10sar_reg;

    // MDMA_C10DAR @ offset=0x000002DC
    __IO uint32_t mdma_c10dar_reg;

    // MDMA_C10BRUR @ offset=0x000002E0
    union {
        __IO uint32_t mdma_c10brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c10brur_bits;
    };

    // MDMA_C10LAR @ offset=0x000002E4
    __IO uint32_t mdma_c10lar_reg;

    // MDMA_C10TBR @ offset=0x000002E8
    union {
        __IO uint32_t mdma_c10tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c10tbr_bits;
    };

    __IO uint8_t reserved21[4];

    // MDMA_C10MAR @ offset=0x000002F0
    __IO uint32_t mdma_c10mar_reg;

    // MDMA_C10MDR @ offset=0x000002F4
    __IO uint32_t mdma_c10mdr_reg;

    __IO uint8_t reserved22[8];

    // MDMA_C11ISR @ offset=0x00000300
    union {
        __IO uint32_t mdma_c11isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif11_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif11_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif11_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif11_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif11_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa11_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c11isr_bits;
    };

    // MDMA_C11IFCR @ offset=0x00000304
    union {
        __IO uint32_t mdma_c11ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif11_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif11_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif11_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif11_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif11_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c11ifcr_bits;
    };

    // MDMA_C11ESR @ offset=0x00000308
    union {
        __IO uint32_t mdma_c11esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c11esr_bits;
    };

    // MDMA_C11CR @ offset=0x0000030C
    union {
        __IO uint32_t mdma_c11cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c11cr_bits;
    };

    // MDMA_C11TCR @ offset=0x00000310
    union {
        __IO uint32_t mdma_c11tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c11tcr_bits;
    };

    // MDMA_C11BNDTR @ offset=0x00000314
    union {
        __IO uint32_t mdma_c11bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c11bndtr_bits;
    };

    // MDMA_C11SAR @ offset=0x00000318
    __IO uint32_t mdma_c11sar_reg;

    // MDMA_C11DAR @ offset=0x0000031C
    __IO uint32_t mdma_c11dar_reg;

    // MDMA_C11BRUR @ offset=0x00000320
    union {
        __IO uint32_t mdma_c11brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c11brur_bits;
    };

    // MDMA_C11LAR @ offset=0x00000324
    __IO uint32_t mdma_c11lar_reg;

    // MDMA_C11TBR @ offset=0x00000328
    union {
        __IO uint32_t mdma_c11tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c11tbr_bits;
    };

    __IO uint8_t reserved23[4];

    // MDMA_C11MAR @ offset=0x00000330
    __IO uint32_t mdma_c11mar_reg;

    // MDMA_C11MDR @ offset=0x00000334
    __IO uint32_t mdma_c11mdr_reg;

    __IO uint8_t reserved24[8];

    // MDMA_C12ISR @ offset=0x00000340
    union {
        __IO uint32_t mdma_c12isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif12_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif12_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif12_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif12_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif12_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa12_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c12isr_bits;
    };

    // MDMA_C12IFCR @ offset=0x00000344
    union {
        __IO uint32_t mdma_c12ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif12_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif12_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif12_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif12_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif12_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c12ifcr_bits;
    };

    // MDMA_C12ESR @ offset=0x00000348
    union {
        __IO uint32_t mdma_c12esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c12esr_bits;
    };

    // MDMA_C12CR @ offset=0x0000034C
    union {
        __IO uint32_t mdma_c12cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c12cr_bits;
    };

    // MDMA_C12TCR @ offset=0x00000350
    union {
        __IO uint32_t mdma_c12tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c12tcr_bits;
    };

    // MDMA_C12BNDTR @ offset=0x00000354
    union {
        __IO uint32_t mdma_c12bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c12bndtr_bits;
    };

    // MDMA_C12SAR @ offset=0x00000358
    __IO uint32_t mdma_c12sar_reg;

    // MDMA_C12DAR @ offset=0x0000035C
    __IO uint32_t mdma_c12dar_reg;

    // MDMA_C12BRUR @ offset=0x00000360
    union {
        __IO uint32_t mdma_c12brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c12brur_bits;
    };

    // MDMA_C12LAR @ offset=0x00000364
    __IO uint32_t mdma_c12lar_reg;

    // MDMA_C12TBR @ offset=0x00000368
    union {
        __IO uint32_t mdma_c12tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c12tbr_bits;
    };

    __IO uint8_t reserved25[4];

    // MDMA_C12MAR @ offset=0x00000370
    __IO uint32_t mdma_c12mar_reg;

    // MDMA_C12MDR @ offset=0x00000374
    __IO uint32_t mdma_c12mdr_reg;

    __IO uint8_t reserved26[8];

    // MDMA_C13ISR @ offset=0x00000380
    union {
        __IO uint32_t mdma_c13isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif13_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif13_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif13_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif13_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif13_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa13_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c13isr_bits;
    };

    // MDMA_C13IFCR @ offset=0x00000384
    union {
        __IO uint32_t mdma_c13ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif13_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif13_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif13_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif13_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif13_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c13ifcr_bits;
    };

    // MDMA_C13ESR @ offset=0x00000388
    union {
        __IO uint32_t mdma_c13esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c13esr_bits;
    };

    // MDMA_C13CR @ offset=0x0000038C
    union {
        __IO uint32_t mdma_c13cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c13cr_bits;
    };

    // MDMA_C13TCR @ offset=0x00000390
    union {
        __IO uint32_t mdma_c13tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c13tcr_bits;
    };

    // MDMA_C13BNDTR @ offset=0x00000394
    union {
        __IO uint32_t mdma_c13bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c13bndtr_bits;
    };

    // MDMA_C13SAR @ offset=0x00000398
    __IO uint32_t mdma_c13sar_reg;

    // MDMA_C13DAR @ offset=0x0000039C
    __IO uint32_t mdma_c13dar_reg;

    // MDMA_C13BRUR @ offset=0x000003A0
    union {
        __IO uint32_t mdma_c13brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c13brur_bits;
    };

    // MDMA_C13LAR @ offset=0x000003A4
    __IO uint32_t mdma_c13lar_reg;

    // MDMA_C13TBR @ offset=0x000003A8
    union {
        __IO uint32_t mdma_c13tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c13tbr_bits;
    };

    __IO uint8_t reserved27[4];

    // MDMA_C13MAR @ offset=0x000003B0
    __IO uint32_t mdma_c13mar_reg;

    // MDMA_C13MDR @ offset=0x000003B4
    __IO uint32_t mdma_c13mdr_reg;

    __IO uint8_t reserved28[8];

    // MDMA_C14ISR @ offset=0x000003C0
    union {
        __IO uint32_t mdma_c14isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif14_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif14_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif14_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif14_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif14_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa14_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c14isr_bits;
    };

    // MDMA_C14IFCR @ offset=0x000003C4
    union {
        __IO uint32_t mdma_c14ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif14_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif14_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif14_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif14_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif14_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c14ifcr_bits;
    };

    // MDMA_C14ESR @ offset=0x000003C8
    union {
        __IO uint32_t mdma_c14esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c14esr_bits;
    };

    // MDMA_C14CR @ offset=0x000003CC
    union {
        __IO uint32_t mdma_c14cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c14cr_bits;
    };

    // MDMA_C14TCR @ offset=0x000003D0
    union {
        __IO uint32_t mdma_c14tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c14tcr_bits;
    };

    // MDMA_C14BNDTR @ offset=0x000003D4
    union {
        __IO uint32_t mdma_c14bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c14bndtr_bits;
    };

    // MDMA_C14SAR @ offset=0x000003D8
    __IO uint32_t mdma_c14sar_reg;

    // MDMA_C14DAR @ offset=0x000003DC
    __IO uint32_t mdma_c14dar_reg;

    // MDMA_C14BRUR @ offset=0x000003E0
    union {
        __IO uint32_t mdma_c14brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c14brur_bits;
    };

    // MDMA_C14LAR @ offset=0x000003E4
    __IO uint32_t mdma_c14lar_reg;

    // MDMA_C14TBR @ offset=0x000003E8
    union {
        __IO uint32_t mdma_c14tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c14tbr_bits;
    };

    __IO uint8_t reserved29[4];

    // MDMA_C14MAR @ offset=0x000003F0
    __IO uint32_t mdma_c14mar_reg;

    // MDMA_C14MDR @ offset=0x000003F4
    __IO uint32_t mdma_c14mdr_reg;

    __IO uint8_t reserved30[8];

    // MDMA_C15ISR @ offset=0x00000400
    union {
        __IO uint32_t mdma_c15isr_reg;

        // bit fields
        struct {
            __IO uint32_t teif15_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctcif15_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t brtif15_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t btif15_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcif15_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 11;
            __IO uint32_t crqa15_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } mdma_c15isr_bits;
    };

    // MDMA_C15IFCR @ offset=0x00000404
    union {
        __IO uint32_t mdma_c15ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t cteif15_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cctcif15_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbrtif15_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cbtif15_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cltcif15_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 27;
        } mdma_c15ifcr_bits;
    };

    // MDMA_C15ESR @ offset=0x00000408
    union {
        __IO uint32_t mdma_c15esr_reg;

        // bit fields
        struct {
            __IO uint32_t tea_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 6;
            __IO uint32_t ted_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teld_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temd_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ase_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 20;
        } mdma_c15esr_bits;
    };

    // MDMA_C15CR @ offset=0x0000040C
    union {
        __IO uint32_t mdma_c15cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t teie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brtie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t btie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pl_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bex_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hex_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wex_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t swrq_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 15;
        } mdma_c15cr_bits;
    };

    // MDMA_C15TCR @ offset=0x00000410
    union {
        __IO uint32_t mdma_c15tcr_reg;

        // bit fields
        struct {
            __IO uint32_t sinc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dinc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ssize_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dsize_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sincos_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dincos_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t sburst_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t dburst_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t tlen_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 6;
            __IO uint32_t pke_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pam_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t trgm_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved10: 1;
            __IO uint32_t swrm_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bwm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } mdma_c15tcr_bits;
    };

    // MDMA_C15BNDTR @ offset=0x00000414
    union {
        __IO uint32_t mdma_c15bndtr_reg;

        // bit fields
        struct {
            __IO uint32_t bndt_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 17;
            __IO uint32_t brsum_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brdum_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t brc_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } mdma_c15bndtr_bits;
    };

    // MDMA_C15SAR @ offset=0x00000418
    __IO uint32_t mdma_c15sar_reg;

    // MDMA_C15DAR @ offset=0x0000041C
    __IO uint32_t mdma_c15dar_reg;

    // MDMA_C15BRUR @ offset=0x00000420
    union {
        __IO uint32_t mdma_c15brur_reg;

        // bit fields
        struct {
            __IO uint32_t suv_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t duv_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } mdma_c15brur_bits;
    };

    // MDMA_C15LAR @ offset=0x00000424
    __IO uint32_t mdma_c15lar_reg;

    // MDMA_C15TBR @ offset=0x00000428
    union {
        __IO uint32_t mdma_c15tbr_reg;

        // bit fields
        struct {
            __IO uint32_t tsel_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t sbus_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbus_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } mdma_c15tbr_bits;
    };

    __IO uint8_t reserved31[4];

    // MDMA_C15MAR @ offset=0x00000430
    __IO uint32_t mdma_c15mar_reg;

    // MDMA_C15MDR @ offset=0x00000434
    __IO uint32_t mdma_c15mdr_reg;

} mdma_t;

// Peripheral OPAMP @ base_addess=0x40009000
typedef struct opamp_t {

    // OPAMP1_CSR @ offset=0x00000000
    union {
        __IO uint32_t opamp1_csr_reg;

        // bit fields
        struct {
            __IO uint32_t opaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t force_vp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vp_sel_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t vm_sel_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t opahsm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t calon_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t calsel_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pga_gain_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t usertrim_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 10;
            __IO uint32_t tstref_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t calout_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 1;
        } opamp1_csr_bits;
    };

    // OPAMP1_OTR @ offset=0x00000004
    union {
        __IO uint32_t opamp1_otr_reg;

        // bit fields
        struct {
            __IO uint32_t trimoffsetn_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t trimoffsetp_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } opamp1_otr_bits;
    };

    // OPAMP1_HSOTR @ offset=0x00000008
    union {
        __IO uint32_t opamp1_hsotr_reg;

        // bit fields
        struct {
            __IO uint32_t trimlpoffsetn_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t trimlpoffsetp_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } opamp1_hsotr_bits;
    };

    __IO uint8_t reserved0[4];

    // OPAMP2_CSR @ offset=0x00000010
    union {
        __IO uint32_t opamp2_csr_reg;

        // bit fields
        struct {
            __IO uint32_t opaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t force_vp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t vm_sel_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t opahsm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t calon_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t calsel_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t pga_gain_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t usertrim_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 10;
            __IO uint32_t tstref_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t calout_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 1;
        } opamp2_csr_bits;
    };

    // OPAMP2_OTR @ offset=0x00000014
    union {
        __IO uint32_t opamp2_otr_reg;

        // bit fields
        struct {
            __IO uint32_t trimoffsetn_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t trimoffsetp_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } opamp2_otr_bits;
    };

    // OPAMP2_HSOTR @ offset=0x00000018
    union {
        __IO uint32_t opamp2_hsotr_reg;

        // bit fields
        struct {
            __IO uint32_t trimlpoffsetn_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t trimlpoffsetp_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } opamp2_hsotr_bits;
    };

} opamp_t;

// Peripheral OTG1_HS_DEVICE @ base_addess=0x40040800
typedef struct otg1_hs_device_t {

    // OTG_HS_DCFG @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_dcfg_reg;

        // bit fields
        struct {
            __IO uint32_t dspd_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nzlsohsk_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t dad_bit : 7; // bit offset=4  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t pfivl_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 12;
            __IO uint32_t perschivl_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } otg_hs_dcfg_bits;
    };

    // OTG_HS_DCTL @ offset=0x00000004
    union {
        __IO uint32_t otg_hs_dctl_reg;

        // bit fields
        struct {
            __IO uint32_t rwusig_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ginsts_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gonsts_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tctl_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t sginak_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cginak_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sgonak_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgonak_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t poprgdne_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } otg_hs_dctl_bits;
    };

    // OTG_HS_DSTS @ offset=0x00000008
    union {
        __IO uint32_t otg_hs_dsts_reg;

        // bit fields
        struct {
            __IO uint32_t suspsts_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t enumspd_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t eerr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 4;
            __IO uint32_t fnsof_bit : 14; // bit offset=8  bit width=14  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 23;
        } otg_hs_dsts_bits;
    };

    __IO uint8_t reserved0[4];

    // OTG_HS_DIEPMSK @ offset=0x00000010
    union {
        __IO uint32_t otg_hs_diepmsk_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t tom_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfemsk_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t inepnmm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t inepnem_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txfurm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bim_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 22;
        } otg_hs_diepmsk_bits;
    };

    // OTG_HS_DOEPMSK @ offset=0x00000014
    union {
        __IO uint32_t otg_hs_doepmsk_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stupm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t opem_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t boim_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 22;
        } otg_hs_doepmsk_bits;
    };

    // OTG_HS_DAINT @ offset=0x00000018
    union {
        __IO uint32_t otg_hs_daint_reg;

        // bit fields
        struct {
            __IO uint32_t iepint_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t oepint_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } otg_hs_daint_bits;
    };

    // OTG_HS_DAINTMSK @ offset=0x0000001C
    union {
        __IO uint32_t otg_hs_daintmsk_reg;

        // bit fields
        struct {
            __IO uint32_t iepm_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t oepm_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_daintmsk_bits;
    };

    __IO uint8_t reserved1[8];

    // OTG_HS_DVBUSDIS @ offset=0x00000028
    __IO uint32_t otg_hs_dvbusdis_reg;

    // OTG_HS_DVBUSPULSE @ offset=0x0000002C
    __IO uint32_t otg_hs_dvbuspulse_reg;

    // OTG_HS_DTHRCTL @ offset=0x00000030
    union {
        __IO uint32_t otg_hs_dthrctl_reg;

        // bit fields
        struct {
            __IO uint32_t nonisothren_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isothren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txthrlen_bit : 9; // bit offset=2  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 13;
            __IO uint32_t rxthren_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxthrlen_bit : 9; // bit offset=17  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t arpen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 4;
        } otg_hs_dthrctl_bits;
    };

    // OTG_HS_DIEPEMPMSK @ offset=0x00000034
    __IO uint32_t otg_hs_diepempmsk_reg;

    // OTG_HS_DEACHINT @ offset=0x00000038
    union {
        __IO uint32_t otg_hs_deachint_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t iep1int_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 15;
            __IO uint32_t oep1int_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 14;
        } otg_hs_deachint_bits;
    };

    // OTG_HS_DEACHINTMSK @ offset=0x0000003C
    union {
        __IO uint32_t otg_hs_deachintmsk_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t iep1intm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 15;
            __IO uint32_t oep1intm_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 14;
        } otg_hs_deachintmsk_bits;
    };

    __IO uint8_t reserved2[192];

    // OTG_HS_DIEPCTL0 @ offset=0x00000100
    union {
        __IO uint32_t otg_hs_diepctl0_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl0_bits;
    };

    __IO uint8_t reserved3[4];

    // OTG_HS_DIEPINT0 @ offset=0x00000108
    union {
        __IO uint32_t otg_hs_diepint0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint0_bits;
    };

    __IO uint8_t reserved4[4];

    // OTG_HS_DIEPTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t otg_hs_dieptsiz0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } otg_hs_dieptsiz0_bits;
    };

    // OTG_HS_DIEPDMA1 @ offset=0x00000114
    __IO uint32_t otg_hs_diepdma1_reg;

    // OTG_HS_DTXFSTS0 @ offset=0x00000118
    __IO uint32_t otg_hs_dtxfsts0_reg;

    __IO uint8_t reserved5[4];

    // OTG_HS_DIEPCTL1 @ offset=0x00000120
    union {
        __IO uint32_t otg_hs_diepctl1_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl1_bits;
    };

    __IO uint8_t reserved6[4];

    // OTG_HS_DIEPINT1 @ offset=0x00000128
    union {
        __IO uint32_t otg_hs_diepint1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint1_bits;
    };

    __IO uint8_t reserved7[4];

    // OTG_HS_DIEPTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t otg_hs_dieptsiz1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz1_bits;
    };

    // OTG_HS_DIEPDMA2 @ offset=0x00000134
    __IO uint32_t otg_hs_diepdma2_reg;

    // OTG_HS_DTXFSTS1 @ offset=0x00000138
    __IO uint32_t otg_hs_dtxfsts1_reg;

    __IO uint8_t reserved8[4];

    // OTG_HS_DIEPCTL2 @ offset=0x00000140
    union {
        __IO uint32_t otg_hs_diepctl2_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl2_bits;
    };

    __IO uint8_t reserved9[4];

    // OTG_HS_DIEPINT2 @ offset=0x00000148
    union {
        __IO uint32_t otg_hs_diepint2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint2_bits;
    };

    __IO uint8_t reserved10[4];

    // OTG_HS_DIEPTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t otg_hs_dieptsiz2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz2_bits;
    };

    // OTG_HS_DIEPDMA3 @ offset=0x00000154
    __IO uint32_t otg_hs_diepdma3_reg;

    // OTG_HS_DTXFSTS2 @ offset=0x00000158
    __IO uint32_t otg_hs_dtxfsts2_reg;

    __IO uint8_t reserved11[4];

    // OTG_HS_DIEPCTL3 @ offset=0x00000160
    union {
        __IO uint32_t otg_hs_diepctl3_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl3_bits;
    };

    __IO uint8_t reserved12[4];

    // OTG_HS_DIEPINT3 @ offset=0x00000168
    union {
        __IO uint32_t otg_hs_diepint3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint3_bits;
    };

    __IO uint8_t reserved13[4];

    // OTG_HS_DIEPTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t otg_hs_dieptsiz3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz3_bits;
    };

    // OTG_HS_DIEPDMA4 @ offset=0x00000174
    __IO uint32_t otg_hs_diepdma4_reg;

    // OTG_HS_DTXFSTS3 @ offset=0x00000178
    __IO uint32_t otg_hs_dtxfsts3_reg;

    __IO uint8_t reserved14[4];

    // OTG_HS_DIEPCTL4 @ offset=0x00000180
    union {
        __IO uint32_t otg_hs_diepctl4_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl4_bits;
    };

    __IO uint8_t reserved15[4];

    // OTG_HS_DIEPINT4 @ offset=0x00000188
    union {
        __IO uint32_t otg_hs_diepint4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint4_bits;
    };

    __IO uint8_t reserved16[4];

    // OTG_HS_DIEPTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t otg_hs_dieptsiz4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz4_bits;
    };

    // OTG_HS_DIEPDMA5 @ offset=0x00000194
    __IO uint32_t otg_hs_diepdma5_reg;

    // OTG_HS_DTXFSTS4 @ offset=0x00000198
    __IO uint32_t otg_hs_dtxfsts4_reg;

    union {
    __IO uint8_t reserved17[4];

        // OTG_HS_DIEPCTL5 @ offset=0x000001A0
        union {
            __IO uint32_t otg_hs_diepctl5_reg;

            // bit fields
            struct {
                __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 14;
                __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 3;
                __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            } otg_hs_diepctl5_bits;
        };

        // OTG_HS_DIEPTSIZ6 @ offset=0x000001A0
        union {
            __IO uint32_t otg_hs_dieptsiz6_reg;

            // bit fields
            struct {
                __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 18;
                __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 9;
                __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2 : 2;
            } otg_hs_dieptsiz6_bits;
        };

    };

    // OTG_HS_DTXFSTS6 @ offset=0x000001A4
    __IO uint32_t otg_hs_dtxfsts6_reg;

    union {
        // OTG_HS_DIEPINT5 @ offset=0x000001A8
        union {
            __IO uint32_t otg_hs_diepint5_reg;

            // bit fields
            struct {
                __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 1;
                __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3 : 18;
            } otg_hs_diepint5_bits;
        };

        // OTG_HS_DIEPTSIZ7 @ offset=0x000001A8
        union {
            __IO uint32_t otg_hs_dieptsiz7_reg;

            // bit fields
            struct {
                __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 18;
                __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 9;
                __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2 : 2;
            } otg_hs_dieptsiz7_bits;
        };

    };

    // OTG_HS_DTXFSTS7 @ offset=0x000001AC
    __IO uint32_t otg_hs_dtxfsts7_reg;

    // OTG_HS_DIEPTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t otg_hs_dieptsiz5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz5_bits;
    };

    // OTG_HS_DTXFSTS5 @ offset=0x000001B8
    __IO uint32_t otg_hs_dtxfsts5_reg;

    // OTG_HS_DIEPCTL6 @ offset=0x000001C0
    union {
        __IO uint32_t otg_hs_diepctl6_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl6_bits;
    };

    __IO uint8_t reserved18[4];

    // OTG_HS_DIEPINT6 @ offset=0x000001C8
    union {
        __IO uint32_t otg_hs_diepint6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint6_bits;
    };

    __IO uint8_t reserved19[20];

    // OTG_HS_DIEPCTL7 @ offset=0x000001E0
    union {
        __IO uint32_t otg_hs_diepctl7_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl7_bits;
    };

    __IO uint8_t reserved20[4];

    // OTG_HS_DIEPINT7 @ offset=0x000001E8
    union {
        __IO uint32_t otg_hs_diepint7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint7_bits;
    };

    __IO uint8_t reserved21[276];

    // OTG_HS_DOEPCTL0 @ offset=0x00000300
    union {
        __IO uint32_t otg_hs_doepctl0_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved4: 2;
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } otg_hs_doepctl0_bits;
    };

    __IO uint8_t reserved22[4];

    // OTG_HS_DOEPINT0 @ offset=0x00000308
    union {
        __IO uint32_t otg_hs_doepint0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint0_bits;
    };

    __IO uint8_t reserved23[4];

    // OTG_HS_DOEPTSIZ0 @ offset=0x00000310
    union {
        __IO uint32_t otg_hs_doeptsiz0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz0_bits;
    };

    __IO uint8_t reserved24[12];

    // OTG_HS_DOEPCTL1 @ offset=0x00000320
    union {
        __IO uint32_t otg_hs_doepctl1_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl1_bits;
    };

    __IO uint8_t reserved25[4];

    // OTG_HS_DOEPINT1 @ offset=0x00000328
    union {
        __IO uint32_t otg_hs_doepint1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint1_bits;
    };

    __IO uint8_t reserved26[4];

    // OTG_HS_DOEPTSIZ1 @ offset=0x00000330
    union {
        __IO uint32_t otg_hs_doeptsiz1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz1_bits;
    };

    __IO uint8_t reserved27[12];

    // OTG_HS_DOEPCTL2 @ offset=0x00000340
    union {
        __IO uint32_t otg_hs_doepctl2_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl2_bits;
    };

    __IO uint8_t reserved28[4];

    // OTG_HS_DOEPINT2 @ offset=0x00000348
    union {
        __IO uint32_t otg_hs_doepint2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint2_bits;
    };

    __IO uint8_t reserved29[4];

    // OTG_HS_DOEPTSIZ2 @ offset=0x00000350
    union {
        __IO uint32_t otg_hs_doeptsiz2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz2_bits;
    };

    __IO uint8_t reserved30[12];

    // OTG_HS_DOEPCTL3 @ offset=0x00000360
    union {
        __IO uint32_t otg_hs_doepctl3_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl3_bits;
    };

    __IO uint8_t reserved31[4];

    // OTG_HS_DOEPINT3 @ offset=0x00000368
    union {
        __IO uint32_t otg_hs_doepint3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint3_bits;
    };

    __IO uint8_t reserved32[4];

    // OTG_HS_DOEPTSIZ3 @ offset=0x00000370
    union {
        __IO uint32_t otg_hs_doeptsiz3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz3_bits;
    };

    __IO uint8_t reserved33[12];

    // OTG_HS_DOEPCTL4 @ offset=0x00000380
    union {
        __IO uint32_t otg_hs_doepctl4_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl4_bits;
    };

    __IO uint8_t reserved34[4];

    // OTG_HS_DOEPINT4 @ offset=0x00000388
    union {
        __IO uint32_t otg_hs_doepint4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint4_bits;
    };

    __IO uint8_t reserved35[4];

    // OTG_HS_DOEPTSIZ4 @ offset=0x00000390
    union {
        __IO uint32_t otg_hs_doeptsiz4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz4_bits;
    };

    __IO uint8_t reserved36[12];

    // OTG_HS_DOEPCTL5 @ offset=0x000003A0
    union {
        __IO uint32_t otg_hs_doepctl5_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl5_bits;
    };

    __IO uint8_t reserved37[4];

    // OTG_HS_DOEPINT5 @ offset=0x000003A8
    union {
        __IO uint32_t otg_hs_doepint5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint5_bits;
    };

    __IO uint8_t reserved38[4];

    // OTG_HS_DOEPTSIZ5 @ offset=0x000003B0
    union {
        __IO uint32_t otg_hs_doeptsiz5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz5_bits;
    };

    __IO uint8_t reserved39[12];

    // OTG_HS_DOEPCTL6 @ offset=0x000003C0
    union {
        __IO uint32_t otg_hs_doepctl6_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl6_bits;
    };

    __IO uint8_t reserved40[4];

    // OTG_HS_DOEPINT6 @ offset=0x000003C8
    union {
        __IO uint32_t otg_hs_doepint6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint6_bits;
    };

    __IO uint8_t reserved41[4];

    // OTG_HS_DOEPTSIZ6 @ offset=0x000003D0
    union {
        __IO uint32_t otg_hs_doeptsiz6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz6_bits;
    };

    __IO uint8_t reserved42[12];

    // OTG_HS_DOEPCTL7 @ offset=0x000003E0
    union {
        __IO uint32_t otg_hs_doepctl7_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl7_bits;
    };

    __IO uint8_t reserved43[4];

    // OTG_HS_DOEPINT7 @ offset=0x000003E8
    union {
        __IO uint32_t otg_hs_doepint7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint7_bits;
    };

    __IO uint8_t reserved44[4];

    // OTG_HS_DOEPTSIZ7 @ offset=0x000003F0
    union {
        __IO uint32_t otg_hs_doeptsiz7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz7_bits;
    };

} otg1_hs_device_t;

// Peripheral OTG1_HS_GLOBAL @ base_addess=0x40040000
typedef struct otg1_hs_global_t {

    // OTG_HS_GOTGCTL @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_gotgctl_reg;

        // bit fields
        struct {
            __IO uint32_t srqscs_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t srq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbvaloen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbvaloval_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t avaloen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t avaloval_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bvaloen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bvaloval_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hngscs_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hnprq_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hshnpen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dhnpen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ehen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t cidsts_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dbct_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t asvld_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bsvld_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t otgver_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t curmod_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 10;
        } otg_hs_gotgctl_bits;
    };

    // OTG_HS_GOTGINT @ offset=0x00000004
    union {
        __IO uint32_t otg_hs_gotgint_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t sedet_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t srsschg_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hnsschg_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t hngdet_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adtochg_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbcdne_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idchng_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } otg_hs_gotgint_bits;
    };

    // OTG_HS_GAHBCFG @ offset=0x00000008
    union {
        __IO uint32_t otg_hs_gahbcfg_reg;

        // bit fields
        struct {
            __IO uint32_t gint_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hbstlen_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dmaen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txfelvl_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptxfelvl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } otg_hs_gahbcfg_bits;
    };

    // OTG_HS_GUSBCFG @ offset=0x0000000C
    union {
        __IO uint32_t otg_hs_gusbcfg_reg;

        // bit fields
        struct {
            __IO uint32_t tocal_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t physel_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t srpcap_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hnpcap_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trdt_bit : 4; // bit offset=10  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t phylpcs_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ulpifsls_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpiar_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpicsm_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpievbusd_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpievbusi_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsdps_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcci_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptci_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpiipd_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t fhmod_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fdmod_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 1;
        } otg_hs_gusbcfg_bits;
    };

    // OTG_HS_GRSTCTL @ offset=0x00000010
    union {
        __IO uint32_t otg_hs_grstctl_reg;

        // bit fields
        struct {
            __IO uint32_t csrst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsrst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fcrst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t rxfflsh_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfflsh_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 24;
            __IO uint32_t ahbidl_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmareq_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
        } otg_hs_grstctl_bits;
    };

    // OTG_HS_GINTSTS @ offset=0x00000014
    union {
        __IO uint32_t otg_hs_gintsts_reg;

        // bit fields
        struct {
            __IO uint32_t cmod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mmis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otgint_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxflvl_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nptxfe_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ginakeff_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t boutnakeff_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t esusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbsusp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbrst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t enumdne_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isoodrp_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eopf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t iepint_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t oepint_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t iisoixfr_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pxfr_incompisoout_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datafsusp_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t hprtint_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hcint_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ptxfe_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 1;
            __IO uint32_t cidschg_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discint_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srqint_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkuint_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_gintsts_bits;
    };

    // OTG_HS_GINTMSK @ offset=0x00000018
    union {
        __IO uint32_t otg_hs_gintmsk_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t mmism_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otgint_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sofm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxflvlm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nptxfem_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ginakeffm_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gonakeffm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t esuspm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbsuspm_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbrst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t enumdnem_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isoodrpm_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eopfm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t iepint_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oepint_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iisoixfrm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pxfrm_iisooxfrm_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsuspm_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t prtim_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hcim_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptxfem_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t cidschgm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discint_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srqim_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wuim_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmintm_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_gintmsk_bits;
    };

    union {
        // OTG_HS_GRXSTSR_Host @ offset=0x0000001C
        union {
            __IO uint32_t otg_hs_grxstsr_host_reg;

            // bit fields
            struct {
                __IO uint32_t chnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3 : 14;
            } otg_hs_grxstsr_host_bits;
        };

        // OTG_HS_GRXSTSR_Device @ offset=0x0000001C
        union {
            __IO uint32_t otg_hs_grxstsr_device_reg;

            // bit fields
            struct {
                __IO uint32_t epnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3: 3;
                __IO uint32_t frmnum_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved4 : 10;
            } otg_hs_grxstsr_device_bits;
        };

    };

    union {
        // OTG_HS_GRXSTSP_Host @ offset=0x00000020
        union {
            __IO uint32_t otg_hs_grxstsp_host_reg;

            // bit fields
            struct {
                __IO uint32_t chnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3 : 14;
            } otg_hs_grxstsp_host_bits;
        };

        // OTG_HS_GRXSTSP_Device @ offset=0x00000020
        union {
            __IO uint32_t otg_hs_grxstsp_device_reg;

            // bit fields
            struct {
                __IO uint32_t epnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3: 3;
                __IO uint32_t frmnum_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved4 : 10;
            } otg_hs_grxstsp_device_bits;
        };

    };

    // OTG_HS_GRXFSIZ @ offset=0x00000024
    __IO uint32_t otg_hs_grxfsiz_reg;

    union {
        // OTG_HS_HNPTXFSIZ_Host @ offset=0x00000028
        union {
            __IO uint32_t otg_hs_hnptxfsiz_host_reg;

            // bit fields
            struct {
                __IO uint32_t nptxfsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 15;
                __IO uint32_t nptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 15;
            } otg_hs_hnptxfsiz_host_bits;
        };

        // OTG_HS_DIEPTXF0_Device @ offset=0x00000028
        union {
            __IO uint32_t otg_hs_dieptxf0_device_reg;

            // bit fields
            struct {
                __IO uint32_t tx0fsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 15;
                __IO uint32_t tx0fd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 15;
            } otg_hs_dieptxf0_device_bits;
        };

    };

    // OTG_HS_GNPTXSTS @ offset=0x0000002C
    union {
        __IO uint32_t otg_hs_gnptxsts_reg;

        // bit fields
        struct {
            __IO uint32_t nptxfsav_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t nptqxsav_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t nptxqtop_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } otg_hs_gnptxsts_bits;
    };

    // OTG_HS_GCCFG @ offset=0x00000038
    union {
        __IO uint32_t otg_hs_gccfg_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t pwrdwn_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bcden_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcden_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pden_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sden_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbden_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcdet_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pdet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdet_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps2det_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } otg_hs_gccfg_bits;
    };

    // OTG_HS_CID @ offset=0x0000003C
    __IO uint32_t otg_hs_cid_reg;

    __IO uint8_t reserved0[16];

    // OTG_HS_GLPMCFG @ offset=0x00000054
    union {
        __IO uint32_t otg_hs_glpmcfg_reg;

        // bit fields
        struct {
            __IO uint32_t lpmen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmack_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t besl_bit : 4; // bit offset=2  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t remwake_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t l1ssen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t beslthrs_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t l1dsen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmrst_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t slpsts_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t l1rsmok_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lpmchidx_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t lpmrcnt_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t sndlpm_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmrcntsts_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved5: 2;
            __IO uint32_t enbesl_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } otg_hs_glpmcfg_bits;
    };

    __IO uint8_t reserved1[168];

    // OTG_HS_HPTXFSIZ @ offset=0x00000100
    union {
        __IO uint32_t otg_hs_hptxfsiz_reg;

        // bit fields
        struct {
            __IO uint32_t ptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_hptxfsiz_bits;
    };

    // OTG_HS_DIEPTXF1 @ offset=0x00000104
    union {
        __IO uint32_t otg_hs_dieptxf1_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf1_bits;
    };

    // OTG_HS_DIEPTXF2 @ offset=0x00000108
    union {
        __IO uint32_t otg_hs_dieptxf2_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf2_bits;
    };

    // OTG_HS_DIEPTXF3 @ offset=0x0000010C
    union {
        __IO uint32_t otg_hs_dieptxf3_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf3_bits;
    };

    // OTG_HS_DIEPTXF4 @ offset=0x00000110
    union {
        __IO uint32_t otg_hs_dieptxf4_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf4_bits;
    };

    // OTG_HS_DIEPTXF5 @ offset=0x00000114
    union {
        __IO uint32_t otg_hs_dieptxf5_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf5_bits;
    };

    // OTG_HS_DIEPTXF6 @ offset=0x00000118
    union {
        __IO uint32_t otg_hs_dieptxf6_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf6_bits;
    };

    // OTG_HS_DIEPTXF7 @ offset=0x0000011C
    union {
        __IO uint32_t otg_hs_dieptxf7_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf7_bits;
    };

    // OTG_DIEPTXF8 @ offset=0x00000120
    union {
        __IO uint32_t otg_dieptxf8_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_dieptxf8_bits;
    };

} otg1_hs_global_t;

// Peripheral OTG1_HS_HOST @ base_addess=0x40040400
typedef struct otg1_hs_host_t {

    // OTG_HS_HCFG @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_hcfg_reg;

        // bit fields
        struct {
            __IO uint32_t fslspcs_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t fslss_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 29;
        } otg_hs_hcfg_bits;
    };

    // OTG_HS_HFIR @ offset=0x00000004
    __IO uint32_t otg_hs_hfir_reg;

    // OTG_HS_HFNUM @ offset=0x00000008
    union {
        __IO uint32_t otg_hs_hfnum_reg;

        // bit fields
        struct {
            __IO uint32_t frnum_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t ftrem_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } otg_hs_hfnum_bits;
    };

    __IO uint8_t reserved0[4];

    // OTG_HS_HPTXSTS @ offset=0x00000010
    union {
        __IO uint32_t otg_hs_hptxsts_reg;

        // bit fields
        struct {
            __IO uint32_t ptxfsavl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ptxqsav_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t ptxqtop_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } otg_hs_hptxsts_bits;
    };

    // OTG_HS_HAINT @ offset=0x00000014
    __IO uint32_t otg_hs_haint_reg;

    // OTG_HS_HAINTMSK @ offset=0x00000018
    __IO uint32_t otg_hs_haintmsk_reg;

    __IO uint8_t reserved1[36];

    // OTG_HS_HPRT @ offset=0x00000040
    union {
        __IO uint32_t otg_hs_hprt_reg;

        // bit fields
        struct {
            __IO uint32_t pcsts_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pcdet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pena_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t penchng_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t poca_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pocchng_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pres_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psusp_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t prst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t plsts_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t ppwr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptctl_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t pspd_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 14;
        } otg_hs_hprt_bits;
    };

    __IO uint8_t reserved2[188];

    // OTG_HS_HCCHAR0 @ offset=0x00000100
    union {
        __IO uint32_t otg_hs_hcchar0_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar0_bits;
    };

    // OTG_HS_HCSPLT0 @ offset=0x00000104
    union {
        __IO uint32_t otg_hs_hcsplt0_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt0_bits;
    };

    // OTG_HS_HCINT0 @ offset=0x00000108
    union {
        __IO uint32_t otg_hs_hcint0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint0_bits;
    };

    // OTG_HS_HCINTMSK0 @ offset=0x0000010C
    union {
        __IO uint32_t otg_hs_hcintmsk0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk0_bits;
    };

    // OTG_HS_HCTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t otg_hs_hctsiz0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz0_bits;
    };

    // OTG_HS_HCDMA0 @ offset=0x00000114
    __IO uint32_t otg_hs_hcdma0_reg;

    __IO uint8_t reserved3[8];

    // OTG_HS_HCCHAR1 @ offset=0x00000120
    union {
        __IO uint32_t otg_hs_hcchar1_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar1_bits;
    };

    // OTG_HS_HCSPLT1 @ offset=0x00000124
    union {
        __IO uint32_t otg_hs_hcsplt1_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt1_bits;
    };

    // OTG_HS_HCINT1 @ offset=0x00000128
    union {
        __IO uint32_t otg_hs_hcint1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint1_bits;
    };

    // OTG_HS_HCINTMSK1 @ offset=0x0000012C
    union {
        __IO uint32_t otg_hs_hcintmsk1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk1_bits;
    };

    // OTG_HS_HCTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t otg_hs_hctsiz1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz1_bits;
    };

    // OTG_HS_HCDMA1 @ offset=0x00000134
    __IO uint32_t otg_hs_hcdma1_reg;

    __IO uint8_t reserved4[8];

    // OTG_HS_HCCHAR2 @ offset=0x00000140
    union {
        __IO uint32_t otg_hs_hcchar2_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar2_bits;
    };

    // OTG_HS_HCSPLT2 @ offset=0x00000144
    union {
        __IO uint32_t otg_hs_hcsplt2_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt2_bits;
    };

    // OTG_HS_HCINT2 @ offset=0x00000148
    union {
        __IO uint32_t otg_hs_hcint2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint2_bits;
    };

    // OTG_HS_HCINTMSK2 @ offset=0x0000014C
    union {
        __IO uint32_t otg_hs_hcintmsk2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk2_bits;
    };

    // OTG_HS_HCTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t otg_hs_hctsiz2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz2_bits;
    };

    // OTG_HS_HCDMA2 @ offset=0x00000154
    __IO uint32_t otg_hs_hcdma2_reg;

    __IO uint8_t reserved5[8];

    // OTG_HS_HCCHAR3 @ offset=0x00000160
    union {
        __IO uint32_t otg_hs_hcchar3_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar3_bits;
    };

    // OTG_HS_HCSPLT3 @ offset=0x00000164
    union {
        __IO uint32_t otg_hs_hcsplt3_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt3_bits;
    };

    // OTG_HS_HCINT3 @ offset=0x00000168
    union {
        __IO uint32_t otg_hs_hcint3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint3_bits;
    };

    // OTG_HS_HCINTMSK3 @ offset=0x0000016C
    union {
        __IO uint32_t otg_hs_hcintmsk3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk3_bits;
    };

    // OTG_HS_HCTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t otg_hs_hctsiz3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz3_bits;
    };

    // OTG_HS_HCDMA3 @ offset=0x00000174
    __IO uint32_t otg_hs_hcdma3_reg;

    __IO uint8_t reserved6[8];

    // OTG_HS_HCCHAR4 @ offset=0x00000180
    union {
        __IO uint32_t otg_hs_hcchar4_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar4_bits;
    };

    // OTG_HS_HCSPLT4 @ offset=0x00000184
    union {
        __IO uint32_t otg_hs_hcsplt4_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt4_bits;
    };

    // OTG_HS_HCINT4 @ offset=0x00000188
    union {
        __IO uint32_t otg_hs_hcint4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint4_bits;
    };

    // OTG_HS_HCINTMSK4 @ offset=0x0000018C
    union {
        __IO uint32_t otg_hs_hcintmsk4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk4_bits;
    };

    // OTG_HS_HCTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t otg_hs_hctsiz4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz4_bits;
    };

    // OTG_HS_HCDMA4 @ offset=0x00000194
    __IO uint32_t otg_hs_hcdma4_reg;

    __IO uint8_t reserved7[8];

    // OTG_HS_HCCHAR5 @ offset=0x000001A0
    union {
        __IO uint32_t otg_hs_hcchar5_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar5_bits;
    };

    // OTG_HS_HCSPLT5 @ offset=0x000001A4
    union {
        __IO uint32_t otg_hs_hcsplt5_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt5_bits;
    };

    // OTG_HS_HCINT5 @ offset=0x000001A8
    union {
        __IO uint32_t otg_hs_hcint5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint5_bits;
    };

    // OTG_HS_HCINTMSK5 @ offset=0x000001AC
    union {
        __IO uint32_t otg_hs_hcintmsk5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk5_bits;
    };

    // OTG_HS_HCTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t otg_hs_hctsiz5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz5_bits;
    };

    // OTG_HS_HCDMA5 @ offset=0x000001B4
    __IO uint32_t otg_hs_hcdma5_reg;

    __IO uint8_t reserved8[8];

    // OTG_HS_HCCHAR6 @ offset=0x000001C0
    union {
        __IO uint32_t otg_hs_hcchar6_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar6_bits;
    };

    // OTG_HS_HCSPLT6 @ offset=0x000001C4
    union {
        __IO uint32_t otg_hs_hcsplt6_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt6_bits;
    };

    // OTG_HS_HCINT6 @ offset=0x000001C8
    union {
        __IO uint32_t otg_hs_hcint6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint6_bits;
    };

    // OTG_HS_HCINTMSK6 @ offset=0x000001CC
    union {
        __IO uint32_t otg_hs_hcintmsk6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk6_bits;
    };

    // OTG_HS_HCTSIZ6 @ offset=0x000001D0
    union {
        __IO uint32_t otg_hs_hctsiz6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz6_bits;
    };

    // OTG_HS_HCDMA6 @ offset=0x000001D4
    __IO uint32_t otg_hs_hcdma6_reg;

    __IO uint8_t reserved9[8];

    // OTG_HS_HCCHAR7 @ offset=0x000001E0
    union {
        __IO uint32_t otg_hs_hcchar7_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar7_bits;
    };

    // OTG_HS_HCSPLT7 @ offset=0x000001E4
    union {
        __IO uint32_t otg_hs_hcsplt7_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt7_bits;
    };

    // OTG_HS_HCINT7 @ offset=0x000001E8
    union {
        __IO uint32_t otg_hs_hcint7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint7_bits;
    };

    // OTG_HS_HCINTMSK7 @ offset=0x000001EC
    union {
        __IO uint32_t otg_hs_hcintmsk7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk7_bits;
    };

    // OTG_HS_HCTSIZ7 @ offset=0x000001F0
    union {
        __IO uint32_t otg_hs_hctsiz7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz7_bits;
    };

    // OTG_HS_HCDMA7 @ offset=0x000001F4
    __IO uint32_t otg_hs_hcdma7_reg;

    __IO uint8_t reserved10[8];

    // OTG_HS_HCCHAR8 @ offset=0x00000200
    union {
        __IO uint32_t otg_hs_hcchar8_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar8_bits;
    };

    // OTG_HS_HCSPLT8 @ offset=0x00000204
    union {
        __IO uint32_t otg_hs_hcsplt8_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt8_bits;
    };

    // OTG_HS_HCINT8 @ offset=0x00000208
    union {
        __IO uint32_t otg_hs_hcint8_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint8_bits;
    };

    // OTG_HS_HCINTMSK8 @ offset=0x0000020C
    union {
        __IO uint32_t otg_hs_hcintmsk8_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk8_bits;
    };

    // OTG_HS_HCTSIZ8 @ offset=0x00000210
    union {
        __IO uint32_t otg_hs_hctsiz8_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz8_bits;
    };

    // OTG_HS_HCDMA8 @ offset=0x00000214
    __IO uint32_t otg_hs_hcdma8_reg;

    __IO uint8_t reserved11[8];

    // OTG_HS_HCCHAR9 @ offset=0x00000220
    union {
        __IO uint32_t otg_hs_hcchar9_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar9_bits;
    };

    // OTG_HS_HCSPLT9 @ offset=0x00000224
    union {
        __IO uint32_t otg_hs_hcsplt9_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt9_bits;
    };

    // OTG_HS_HCINT9 @ offset=0x00000228
    union {
        __IO uint32_t otg_hs_hcint9_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint9_bits;
    };

    // OTG_HS_HCINTMSK9 @ offset=0x0000022C
    union {
        __IO uint32_t otg_hs_hcintmsk9_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk9_bits;
    };

    // OTG_HS_HCTSIZ9 @ offset=0x00000230
    union {
        __IO uint32_t otg_hs_hctsiz9_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz9_bits;
    };

    // OTG_HS_HCDMA9 @ offset=0x00000234
    __IO uint32_t otg_hs_hcdma9_reg;

    __IO uint8_t reserved12[8];

    // OTG_HS_HCCHAR10 @ offset=0x00000240
    union {
        __IO uint32_t otg_hs_hcchar10_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar10_bits;
    };

    // OTG_HS_HCSPLT10 @ offset=0x00000244
    union {
        __IO uint32_t otg_hs_hcsplt10_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt10_bits;
    };

    // OTG_HS_HCINT10 @ offset=0x00000248
    union {
        __IO uint32_t otg_hs_hcint10_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint10_bits;
    };

    // OTG_HS_HCINTMSK10 @ offset=0x0000024C
    union {
        __IO uint32_t otg_hs_hcintmsk10_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk10_bits;
    };

    // OTG_HS_HCTSIZ10 @ offset=0x00000250
    union {
        __IO uint32_t otg_hs_hctsiz10_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz10_bits;
    };

    // OTG_HS_HCDMA10 @ offset=0x00000254
    __IO uint32_t otg_hs_hcdma10_reg;

    __IO uint8_t reserved13[8];

    // OTG_HS_HCCHAR11 @ offset=0x00000260
    union {
        __IO uint32_t otg_hs_hcchar11_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar11_bits;
    };

    // OTG_HS_HCSPLT11 @ offset=0x00000264
    union {
        __IO uint32_t otg_hs_hcsplt11_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt11_bits;
    };

    // OTG_HS_HCINT11 @ offset=0x00000268
    union {
        __IO uint32_t otg_hs_hcint11_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint11_bits;
    };

    // OTG_HS_HCINTMSK11 @ offset=0x0000026C
    union {
        __IO uint32_t otg_hs_hcintmsk11_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk11_bits;
    };

    // OTG_HS_HCTSIZ11 @ offset=0x00000270
    union {
        __IO uint32_t otg_hs_hctsiz11_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz11_bits;
    };

    // OTG_HS_HCDMA11 @ offset=0x00000274
    __IO uint32_t otg_hs_hcdma11_reg;

    // OTG_HS_HCCHAR12 @ offset=0x00000278
    union {
        __IO uint32_t otg_hs_hcchar12_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar12_bits;
    };

    // OTG_HS_HCSPLT12 @ offset=0x0000027C
    union {
        __IO uint32_t otg_hs_hcsplt12_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt12_bits;
    };

    // OTG_HS_HCINT12 @ offset=0x00000280
    union {
        __IO uint32_t otg_hs_hcint12_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint12_bits;
    };

    // OTG_HS_HCINTMSK12 @ offset=0x00000284
    union {
        __IO uint32_t otg_hs_hcintmsk12_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk12_bits;
    };

    // OTG_HS_HCTSIZ12 @ offset=0x00000288
    union {
        __IO uint32_t otg_hs_hctsiz12_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz12_bits;
    };

    // OTG_HS_HCDMA12 @ offset=0x0000028C
    __IO uint32_t otg_hs_hcdma12_reg;

    // OTG_HS_HCCHAR13 @ offset=0x00000290
    union {
        __IO uint32_t otg_hs_hcchar13_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar13_bits;
    };

    // OTG_HS_HCSPLT13 @ offset=0x00000294
    union {
        __IO uint32_t otg_hs_hcsplt13_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt13_bits;
    };

    // OTG_HS_HCINT13 @ offset=0x00000298
    union {
        __IO uint32_t otg_hs_hcint13_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint13_bits;
    };

    // OTG_HS_HCINTMSK13 @ offset=0x0000029C
    union {
        __IO uint32_t otg_hs_hcintmsk13_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk13_bits;
    };

    // OTG_HS_HCTSIZ13 @ offset=0x000002A0
    union {
        __IO uint32_t otg_hs_hctsiz13_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz13_bits;
    };

    // OTG_HS_HCDMA13 @ offset=0x000002A4
    __IO uint32_t otg_hs_hcdma13_reg;

    // OTG_HS_HCCHAR14 @ offset=0x000002A8
    union {
        __IO uint32_t otg_hs_hcchar14_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar14_bits;
    };

    // OTG_HS_HCSPLT14 @ offset=0x000002AC
    union {
        __IO uint32_t otg_hs_hcsplt14_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt14_bits;
    };

    // OTG_HS_HCINT14 @ offset=0x000002B0
    union {
        __IO uint32_t otg_hs_hcint14_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint14_bits;
    };

    // OTG_HS_HCINTMSK14 @ offset=0x000002B4
    union {
        __IO uint32_t otg_hs_hcintmsk14_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk14_bits;
    };

    // OTG_HS_HCTSIZ14 @ offset=0x000002B8
    union {
        __IO uint32_t otg_hs_hctsiz14_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz14_bits;
    };

    // OTG_HS_HCDMA14 @ offset=0x000002BC
    __IO uint32_t otg_hs_hcdma14_reg;

    // OTG_HS_HCCHAR15 @ offset=0x000002C0
    union {
        __IO uint32_t otg_hs_hcchar15_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar15_bits;
    };

    // OTG_HS_HCSPLT15 @ offset=0x000002C4
    union {
        __IO uint32_t otg_hs_hcsplt15_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt15_bits;
    };

    // OTG_HS_HCINT15 @ offset=0x000002C8
    union {
        __IO uint32_t otg_hs_hcint15_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint15_bits;
    };

    // OTG_HS_HCINTMSK15 @ offset=0x000002CC
    union {
        __IO uint32_t otg_hs_hcintmsk15_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk15_bits;
    };

    // OTG_HS_HCTSIZ15 @ offset=0x000002D0
    union {
        __IO uint32_t otg_hs_hctsiz15_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz15_bits;
    };

    // OTG_HS_HCDMA15 @ offset=0x000002D4
    __IO uint32_t otg_hs_hcdma15_reg;

} otg1_hs_host_t;

// Peripheral OTG1_HS_PWRCLK @ base_addess=0x40040E00
typedef struct otg1_hs_pwrclk_t {

    // OTG_HS_PCGCR @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_pcgcr_reg;

        // bit fields
        struct {
            __IO uint32_t stppclk_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gatehclk_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t physusp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } otg_hs_pcgcr_bits;
    };

} otg1_hs_pwrclk_t;

// Peripheral OTG2_HS_DEVICE @ base_addess=0x40080800
typedef struct otg2_hs_device_t {

    // OTG_HS_DCFG @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_dcfg_reg;

        // bit fields
        struct {
            __IO uint32_t dspd_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t nzlsohsk_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t dad_bit : 7; // bit offset=4  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t pfivl_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 12;
            __IO uint32_t perschivl_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 7;
        } otg_hs_dcfg_bits;
    };

    // OTG_HS_DCTL @ offset=0x00000004
    union {
        __IO uint32_t otg_hs_dctl_reg;

        // bit fields
        struct {
            __IO uint32_t rwusig_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ginsts_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t gonsts_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tctl_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t sginak_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cginak_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sgonak_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cgonak_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t poprgdne_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } otg_hs_dctl_bits;
    };

    // OTG_HS_DSTS @ offset=0x00000008
    union {
        __IO uint32_t otg_hs_dsts_reg;

        // bit fields
        struct {
            __IO uint32_t suspsts_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t enumspd_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t eerr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 4;
            __IO uint32_t fnsof_bit : 14; // bit offset=8  bit width=14  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 23;
        } otg_hs_dsts_bits;
    };

    __IO uint8_t reserved0[4];

    // OTG_HS_DIEPMSK @ offset=0x00000010
    union {
        __IO uint32_t otg_hs_diepmsk_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t tom_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfemsk_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t inepnmm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t inepnem_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txfurm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bim_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 22;
        } otg_hs_diepmsk_bits;
    };

    // OTG_HS_DOEPMSK @ offset=0x00000014
    union {
        __IO uint32_t otg_hs_doepmsk_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stupm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t opem_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t boim_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 22;
        } otg_hs_doepmsk_bits;
    };

    // OTG_HS_DAINT @ offset=0x00000018
    union {
        __IO uint32_t otg_hs_daint_reg;

        // bit fields
        struct {
            __IO uint32_t iepint_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t oepint_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } otg_hs_daint_bits;
    };

    // OTG_HS_DAINTMSK @ offset=0x0000001C
    union {
        __IO uint32_t otg_hs_daintmsk_reg;

        // bit fields
        struct {
            __IO uint32_t iepm_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t oepm_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_daintmsk_bits;
    };

    __IO uint8_t reserved1[8];

    // OTG_HS_DVBUSDIS @ offset=0x00000028
    __IO uint32_t otg_hs_dvbusdis_reg;

    // OTG_HS_DVBUSPULSE @ offset=0x0000002C
    __IO uint32_t otg_hs_dvbuspulse_reg;

    // OTG_HS_DTHRCTL @ offset=0x00000030
    union {
        __IO uint32_t otg_hs_dthrctl_reg;

        // bit fields
        struct {
            __IO uint32_t nonisothren_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isothren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txthrlen_bit : 9; // bit offset=2  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 13;
            __IO uint32_t rxthren_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxthrlen_bit : 9; // bit offset=17  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t arpen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 4;
        } otg_hs_dthrctl_bits;
    };

    // OTG_HS_DIEPEMPMSK @ offset=0x00000034
    __IO uint32_t otg_hs_diepempmsk_reg;

    // OTG_HS_DEACHINT @ offset=0x00000038
    union {
        __IO uint32_t otg_hs_deachint_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t iep1int_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 15;
            __IO uint32_t oep1int_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 14;
        } otg_hs_deachint_bits;
    };

    // OTG_HS_DEACHINTMSK @ offset=0x0000003C
    union {
        __IO uint32_t otg_hs_deachintmsk_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t iep1intm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 15;
            __IO uint32_t oep1intm_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 14;
        } otg_hs_deachintmsk_bits;
    };

    __IO uint8_t reserved2[192];

    // OTG_HS_DIEPCTL0 @ offset=0x00000100
    union {
        __IO uint32_t otg_hs_diepctl0_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl0_bits;
    };

    __IO uint8_t reserved3[4];

    // OTG_HS_DIEPINT0 @ offset=0x00000108
    union {
        __IO uint32_t otg_hs_diepint0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint0_bits;
    };

    __IO uint8_t reserved4[4];

    // OTG_HS_DIEPTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t otg_hs_dieptsiz0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } otg_hs_dieptsiz0_bits;
    };

    // OTG_HS_DIEPDMA1 @ offset=0x00000114
    __IO uint32_t otg_hs_diepdma1_reg;

    // OTG_HS_DTXFSTS0 @ offset=0x00000118
    __IO uint32_t otg_hs_dtxfsts0_reg;

    __IO uint8_t reserved5[4];

    // OTG_HS_DIEPCTL1 @ offset=0x00000120
    union {
        __IO uint32_t otg_hs_diepctl1_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl1_bits;
    };

    __IO uint8_t reserved6[4];

    // OTG_HS_DIEPINT1 @ offset=0x00000128
    union {
        __IO uint32_t otg_hs_diepint1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint1_bits;
    };

    __IO uint8_t reserved7[4];

    // OTG_HS_DIEPTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t otg_hs_dieptsiz1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz1_bits;
    };

    // OTG_HS_DIEPDMA2 @ offset=0x00000134
    __IO uint32_t otg_hs_diepdma2_reg;

    // OTG_HS_DTXFSTS1 @ offset=0x00000138
    __IO uint32_t otg_hs_dtxfsts1_reg;

    __IO uint8_t reserved8[4];

    // OTG_HS_DIEPCTL2 @ offset=0x00000140
    union {
        __IO uint32_t otg_hs_diepctl2_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl2_bits;
    };

    __IO uint8_t reserved9[4];

    // OTG_HS_DIEPINT2 @ offset=0x00000148
    union {
        __IO uint32_t otg_hs_diepint2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint2_bits;
    };

    __IO uint8_t reserved10[4];

    // OTG_HS_DIEPTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t otg_hs_dieptsiz2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz2_bits;
    };

    // OTG_HS_DIEPDMA3 @ offset=0x00000154
    __IO uint32_t otg_hs_diepdma3_reg;

    // OTG_HS_DTXFSTS2 @ offset=0x00000158
    __IO uint32_t otg_hs_dtxfsts2_reg;

    __IO uint8_t reserved11[4];

    // OTG_HS_DIEPCTL3 @ offset=0x00000160
    union {
        __IO uint32_t otg_hs_diepctl3_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl3_bits;
    };

    __IO uint8_t reserved12[4];

    // OTG_HS_DIEPINT3 @ offset=0x00000168
    union {
        __IO uint32_t otg_hs_diepint3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint3_bits;
    };

    __IO uint8_t reserved13[4];

    // OTG_HS_DIEPTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t otg_hs_dieptsiz3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz3_bits;
    };

    // OTG_HS_DIEPDMA4 @ offset=0x00000174
    __IO uint32_t otg_hs_diepdma4_reg;

    // OTG_HS_DTXFSTS3 @ offset=0x00000178
    __IO uint32_t otg_hs_dtxfsts3_reg;

    __IO uint8_t reserved14[4];

    // OTG_HS_DIEPCTL4 @ offset=0x00000180
    union {
        __IO uint32_t otg_hs_diepctl4_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl4_bits;
    };

    __IO uint8_t reserved15[4];

    // OTG_HS_DIEPINT4 @ offset=0x00000188
    union {
        __IO uint32_t otg_hs_diepint4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint4_bits;
    };

    __IO uint8_t reserved16[4];

    // OTG_HS_DIEPTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t otg_hs_dieptsiz4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz4_bits;
    };

    // OTG_HS_DIEPDMA5 @ offset=0x00000194
    __IO uint32_t otg_hs_diepdma5_reg;

    // OTG_HS_DTXFSTS4 @ offset=0x00000198
    __IO uint32_t otg_hs_dtxfsts4_reg;

    union {
    __IO uint8_t reserved17[4];

        // OTG_HS_DIEPCTL5 @ offset=0x000001A0
        union {
            __IO uint32_t otg_hs_diepctl5_reg;

            // bit fields
            struct {
                __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 14;
                __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 3;
                __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            } otg_hs_diepctl5_bits;
        };

        // OTG_HS_DIEPTSIZ6 @ offset=0x000001A0
        union {
            __IO uint32_t otg_hs_dieptsiz6_reg;

            // bit fields
            struct {
                __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 18;
                __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 9;
                __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2 : 2;
            } otg_hs_dieptsiz6_bits;
        };

    };

    // OTG_HS_DTXFSTS6 @ offset=0x000001A4
    __IO uint32_t otg_hs_dtxfsts6_reg;

    union {
        // OTG_HS_DIEPINT5 @ offset=0x000001A8
        union {
            __IO uint32_t otg_hs_diepint5_reg;

            // bit fields
            struct {
                __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 1;
                __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3 : 18;
            } otg_hs_diepint5_bits;
        };

        // OTG_HS_DIEPTSIZ7 @ offset=0x000001A8
        union {
            __IO uint32_t otg_hs_dieptsiz7_reg;

            // bit fields
            struct {
                __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 18;
                __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 9;
                __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2 : 2;
            } otg_hs_dieptsiz7_bits;
        };

    };

    // OTG_HS_DTXFSTS7 @ offset=0x000001AC
    __IO uint32_t otg_hs_dtxfsts7_reg;

    // OTG_HS_DIEPTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t otg_hs_dieptsiz5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t mcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_dieptsiz5_bits;
    };

    // OTG_HS_DTXFSTS5 @ offset=0x000001B8
    __IO uint32_t otg_hs_dtxfsts5_reg;

    // OTG_HS_DIEPCTL6 @ offset=0x000001C0
    union {
        __IO uint32_t otg_hs_diepctl6_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl6_bits;
    };

    __IO uint8_t reserved18[4];

    // OTG_HS_DIEPINT6 @ offset=0x000001C8
    union {
        __IO uint32_t otg_hs_diepint6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint6_bits;
    };

    __IO uint8_t reserved19[20];

    // OTG_HS_DIEPCTL7 @ offset=0x000001E0
    union {
        __IO uint32_t otg_hs_diepctl7_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_diepctl7_bits;
    };

    __IO uint8_t reserved20[4];

    // OTG_HS_DIEPINT7 @ offset=0x000001E8
    union {
        __IO uint32_t otg_hs_diepint7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t toc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ittxfe_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t inepne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoudrn_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bna_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t pktdrpsts_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t berr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } otg_hs_diepint7_bits;
    };

    __IO uint8_t reserved21[276];

    // OTG_HS_DOEPCTL0 @ offset=0x00000300
    union {
        __IO uint32_t otg_hs_doepctl0_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved4: 2;
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } otg_hs_doepctl0_bits;
    };

    __IO uint8_t reserved22[4];

    // OTG_HS_DOEPINT0 @ offset=0x00000308
    union {
        __IO uint32_t otg_hs_doepint0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint0_bits;
    };

    __IO uint8_t reserved23[4];

    // OTG_HS_DOEPTSIZ0 @ offset=0x00000310
    union {
        __IO uint32_t otg_hs_doeptsiz0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz0_bits;
    };

    __IO uint8_t reserved24[12];

    // OTG_HS_DOEPCTL1 @ offset=0x00000320
    union {
        __IO uint32_t otg_hs_doepctl1_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl1_bits;
    };

    __IO uint8_t reserved25[4];

    // OTG_HS_DOEPINT1 @ offset=0x00000328
    union {
        __IO uint32_t otg_hs_doepint1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint1_bits;
    };

    __IO uint8_t reserved26[4];

    // OTG_HS_DOEPTSIZ1 @ offset=0x00000330
    union {
        __IO uint32_t otg_hs_doeptsiz1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz1_bits;
    };

    __IO uint8_t reserved27[12];

    // OTG_HS_DOEPCTL2 @ offset=0x00000340
    union {
        __IO uint32_t otg_hs_doepctl2_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl2_bits;
    };

    __IO uint8_t reserved28[4];

    // OTG_HS_DOEPINT2 @ offset=0x00000348
    union {
        __IO uint32_t otg_hs_doepint2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint2_bits;
    };

    __IO uint8_t reserved29[4];

    // OTG_HS_DOEPTSIZ2 @ offset=0x00000350
    union {
        __IO uint32_t otg_hs_doeptsiz2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz2_bits;
    };

    __IO uint8_t reserved30[12];

    // OTG_HS_DOEPCTL3 @ offset=0x00000360
    union {
        __IO uint32_t otg_hs_doepctl3_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl3_bits;
    };

    __IO uint8_t reserved31[4];

    // OTG_HS_DOEPINT3 @ offset=0x00000368
    union {
        __IO uint32_t otg_hs_doepint3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint3_bits;
    };

    __IO uint8_t reserved32[4];

    // OTG_HS_DOEPTSIZ3 @ offset=0x00000370
    union {
        __IO uint32_t otg_hs_doeptsiz3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz3_bits;
    };

    __IO uint8_t reserved33[12];

    // OTG_HS_DOEPCTL4 @ offset=0x00000380
    union {
        __IO uint32_t otg_hs_doepctl4_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl4_bits;
    };

    __IO uint8_t reserved34[4];

    // OTG_HS_DOEPINT4 @ offset=0x00000388
    union {
        __IO uint32_t otg_hs_doepint4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint4_bits;
    };

    __IO uint8_t reserved35[4];

    // OTG_HS_DOEPTSIZ4 @ offset=0x00000390
    union {
        __IO uint32_t otg_hs_doeptsiz4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz4_bits;
    };

    __IO uint8_t reserved36[12];

    // OTG_HS_DOEPCTL5 @ offset=0x000003A0
    union {
        __IO uint32_t otg_hs_doepctl5_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl5_bits;
    };

    __IO uint8_t reserved37[4];

    // OTG_HS_DOEPINT5 @ offset=0x000003A8
    union {
        __IO uint32_t otg_hs_doepint5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint5_bits;
    };

    __IO uint8_t reserved38[4];

    // OTG_HS_DOEPTSIZ5 @ offset=0x000003B0
    union {
        __IO uint32_t otg_hs_doeptsiz5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz5_bits;
    };

    __IO uint8_t reserved39[12];

    // OTG_HS_DOEPCTL6 @ offset=0x000003C0
    union {
        __IO uint32_t otg_hs_doepctl6_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl6_bits;
    };

    __IO uint8_t reserved40[4];

    // OTG_HS_DOEPINT6 @ offset=0x000003C8
    union {
        __IO uint32_t otg_hs_doepint6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint6_bits;
    };

    __IO uint8_t reserved41[4];

    // OTG_HS_DOEPTSIZ6 @ offset=0x000003D0
    union {
        __IO uint32_t otg_hs_doeptsiz6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz6_bits;
    };

    __IO uint8_t reserved42[12];

    // OTG_HS_DOEPCTL7 @ offset=0x000003E0
    union {
        __IO uint32_t otg_hs_doepctl7_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 14;
            __IO uint32_t usbaep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eonum_dpid_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t naksts_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t snpm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t cnak_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t snak_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sd0pid_sevnfrm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t soddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t epdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_doepctl7_bits;
    };

    __IO uint8_t reserved43[4];

    // OTG_HS_DOEPINT7 @ offset=0x000003E8
    union {
        __IO uint32_t otg_hs_doepint7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t epdisd_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t stup_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otepdis_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t b2bstup_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t nyet_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 17;
        } otg_hs_doepint7_bits;
    };

    __IO uint8_t reserved44[4];

    // OTG_HS_DOEPTSIZ7 @ offset=0x000003F0
    union {
        __IO uint32_t otg_hs_doeptsiz7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t rxdpid_stupcnt_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_doeptsiz7_bits;
    };

} otg2_hs_device_t;

// Peripheral OTG2_HS_GLOBAL @ base_addess=0x40080000
typedef struct otg2_hs_global_t {

    // OTG_HS_GOTGCTL @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_gotgctl_reg;

        // bit fields
        struct {
            __IO uint32_t srqscs_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t srq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbvaloen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbvaloval_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t avaloen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t avaloval_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bvaloen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bvaloval_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hngscs_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hnprq_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hshnpen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dhnpen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ehen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t cidsts_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dbct_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t asvld_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t bsvld_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t otgver_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t curmod_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 10;
        } otg_hs_gotgctl_bits;
    };

    // OTG_HS_GOTGINT @ offset=0x00000004
    union {
        __IO uint32_t otg_hs_gotgint_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t sedet_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t srsschg_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hnsschg_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t hngdet_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t adtochg_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbcdne_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idchng_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } otg_hs_gotgint_bits;
    };

    // OTG_HS_GAHBCFG @ offset=0x00000008
    union {
        __IO uint32_t otg_hs_gahbcfg_reg;

        // bit fields
        struct {
            __IO uint32_t gint_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hbstlen_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dmaen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t txfelvl_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptxfelvl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } otg_hs_gahbcfg_bits;
    };

    // OTG_HS_GUSBCFG @ offset=0x0000000C
    union {
        __IO uint32_t otg_hs_gusbcfg_reg;

        // bit fields
        struct {
            __IO uint32_t tocal_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t physel_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t srpcap_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hnpcap_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t trdt_bit : 4; // bit offset=10  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t phylpcs_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ulpifsls_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpiar_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpicsm_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpievbusd_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpievbusi_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsdps_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcci_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptci_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ulpiipd_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t fhmod_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fdmod_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 1;
        } otg_hs_gusbcfg_bits;
    };

    // OTG_HS_GRSTCTL @ offset=0x00000010
    union {
        __IO uint32_t otg_hs_grstctl_reg;

        // bit fields
        struct {
            __IO uint32_t csrst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsrst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fcrst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t rxfflsh_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfflsh_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfnum_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 24;
            __IO uint32_t ahbidl_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dmareq_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
        } otg_hs_grstctl_bits;
    };

    // OTG_HS_GINTSTS @ offset=0x00000014
    union {
        __IO uint32_t otg_hs_gintsts_reg;

        // bit fields
        struct {
            __IO uint32_t cmod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mmis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otgint_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sof_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxflvl_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nptxfe_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ginakeff_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t boutnakeff_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t esusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbsusp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbrst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t enumdne_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isoodrp_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eopf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t iepint_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t oepint_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t iisoixfr_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pxfr_incompisoout_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datafsusp_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t hprtint_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hcint_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ptxfe_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 1;
            __IO uint32_t cidschg_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discint_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srqint_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkuint_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_gintsts_bits;
    };

    // OTG_HS_GINTMSK @ offset=0x00000018
    union {
        __IO uint32_t otg_hs_gintmsk_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t mmism_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t otgint_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sofm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxflvlm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nptxfem_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ginakeffm_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gonakeffm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t esuspm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbsuspm_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbrst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t enumdnem_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t isoodrpm_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eopfm_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t iepint_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oepint_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iisoixfrm_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pxfrm_iisooxfrm_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsuspm_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t prtim_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t hcim_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptxfem_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t cidschgm_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t discint_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srqim_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wuim_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rstde_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmintm_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_gintmsk_bits;
    };

    union {
        // OTG_HS_GRXSTSR_Host @ offset=0x0000001C
        union {
            __IO uint32_t otg_hs_grxstsr_host_reg;

            // bit fields
            struct {
                __IO uint32_t chnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3 : 14;
            } otg_hs_grxstsr_host_bits;
        };

        // OTG_HS_GRXSTSR_Device @ offset=0x0000001C
        union {
            __IO uint32_t otg_hs_grxstsr_device_reg;

            // bit fields
            struct {
                __IO uint32_t epnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3: 3;
                __IO uint32_t frmnum_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved4 : 10;
            } otg_hs_grxstsr_device_bits;
        };

    };

    union {
        // OTG_HS_GRXSTSP_Host @ offset=0x00000020
        union {
            __IO uint32_t otg_hs_grxstsp_host_reg;

            // bit fields
            struct {
                __IO uint32_t chnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3 : 14;
            } otg_hs_grxstsp_host_bits;
        };

        // OTG_HS_GRXSTSP_Device @ offset=0x00000020
        union {
            __IO uint32_t otg_hs_grxstsp_device_reg;

            // bit fields
            struct {
                __IO uint32_t epnum_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t bcnt_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1: 10;
                __IO uint32_t dpid_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 1;
                __IO uint32_t pktsts_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved3: 3;
                __IO uint32_t frmnum_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved4 : 10;
            } otg_hs_grxstsp_device_bits;
        };

    };

    // OTG_HS_GRXFSIZ @ offset=0x00000024
    __IO uint32_t otg_hs_grxfsiz_reg;

    union {
        // OTG_HS_HNPTXFSIZ_Host @ offset=0x00000028
        union {
            __IO uint32_t otg_hs_hnptxfsiz_host_reg;

            // bit fields
            struct {
                __IO uint32_t nptxfsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 15;
                __IO uint32_t nptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 15;
            } otg_hs_hnptxfsiz_host_bits;
        };

        // OTG_HS_DIEPTXF0_Device @ offset=0x00000028
        union {
            __IO uint32_t otg_hs_dieptxf0_device_reg;

            // bit fields
            struct {
                __IO uint32_t tx0fsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 15;
                __IO uint32_t tx0fd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 15;
            } otg_hs_dieptxf0_device_bits;
        };

    };

    // OTG_HS_GNPTXSTS @ offset=0x0000002C
    union {
        __IO uint32_t otg_hs_gnptxsts_reg;

        // bit fields
        struct {
            __IO uint32_t nptxfsav_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t nptqxsav_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t nptxqtop_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } otg_hs_gnptxsts_bits;
    };

    // OTG_HS_GCCFG @ offset=0x00000038
    union {
        __IO uint32_t otg_hs_gccfg_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t pwrdwn_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bcden_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcden_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pden_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sden_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbden_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcdet_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pdet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdet_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps2det_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } otg_hs_gccfg_bits;
    };

    // OTG_HS_CID @ offset=0x0000003C
    __IO uint32_t otg_hs_cid_reg;

    __IO uint8_t reserved0[16];

    // OTG_HS_GLPMCFG @ offset=0x00000054
    union {
        __IO uint32_t otg_hs_glpmcfg_reg;

        // bit fields
        struct {
            __IO uint32_t lpmen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmack_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t besl_bit : 4; // bit offset=2  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t remwake_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t l1ssen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t beslthrs_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t l1dsen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmrst_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t slpsts_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t l1rsmok_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lpmchidx_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t lpmrcnt_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t sndlpm_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpmrcntsts_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved5: 2;
            __IO uint32_t enbesl_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } otg_hs_glpmcfg_bits;
    };

    __IO uint8_t reserved1[168];

    // OTG_HS_HPTXFSIZ @ offset=0x00000100
    union {
        __IO uint32_t otg_hs_hptxfsiz_reg;

        // bit fields
        struct {
            __IO uint32_t ptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_hptxfsiz_bits;
    };

    // OTG_HS_DIEPTXF1 @ offset=0x00000104
    union {
        __IO uint32_t otg_hs_dieptxf1_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf1_bits;
    };

    // OTG_HS_DIEPTXF2 @ offset=0x00000108
    union {
        __IO uint32_t otg_hs_dieptxf2_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf2_bits;
    };

    // OTG_HS_DIEPTXF3 @ offset=0x0000010C
    union {
        __IO uint32_t otg_hs_dieptxf3_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf3_bits;
    };

    // OTG_HS_DIEPTXF4 @ offset=0x00000110
    union {
        __IO uint32_t otg_hs_dieptxf4_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf4_bits;
    };

    // OTG_HS_DIEPTXF5 @ offset=0x00000114
    union {
        __IO uint32_t otg_hs_dieptxf5_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf5_bits;
    };

    // OTG_HS_DIEPTXF6 @ offset=0x00000118
    union {
        __IO uint32_t otg_hs_dieptxf6_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf6_bits;
    };

    // OTG_HS_DIEPTXF7 @ offset=0x0000011C
    union {
        __IO uint32_t otg_hs_dieptxf7_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_hs_dieptxf7_bits;
    };

    // OTG_DIEPTXF8 @ offset=0x00000120
    union {
        __IO uint32_t otg_dieptxf8_reg;

        // bit fields
        struct {
            __IO uint32_t ineptxsa_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ineptxfd_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } otg_dieptxf8_bits;
    };

} otg2_hs_global_t;

// Peripheral OTG2_HS_HOST @ base_addess=0x40080400
typedef struct otg2_hs_host_t {

    // OTG_HS_HCFG @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_hcfg_reg;

        // bit fields
        struct {
            __IO uint32_t fslspcs_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t fslss_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 29;
        } otg_hs_hcfg_bits;
    };

    // OTG_HS_HFIR @ offset=0x00000004
    __IO uint32_t otg_hs_hfir_reg;

    // OTG_HS_HFNUM @ offset=0x00000008
    union {
        __IO uint32_t otg_hs_hfnum_reg;

        // bit fields
        struct {
            __IO uint32_t frnum_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t ftrem_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } otg_hs_hfnum_bits;
    };

    __IO uint8_t reserved0[4];

    // OTG_HS_HPTXSTS @ offset=0x00000010
    union {
        __IO uint32_t otg_hs_hptxsts_reg;

        // bit fields
        struct {
            __IO uint32_t ptxfsavl_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t ptxqsav_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t ptxqtop_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } otg_hs_hptxsts_bits;
    };

    // OTG_HS_HAINT @ offset=0x00000014
    __IO uint32_t otg_hs_haint_reg;

    // OTG_HS_HAINTMSK @ offset=0x00000018
    __IO uint32_t otg_hs_haintmsk_reg;

    __IO uint8_t reserved1[36];

    // OTG_HS_HPRT @ offset=0x00000040
    union {
        __IO uint32_t otg_hs_hprt_reg;

        // bit fields
        struct {
            __IO uint32_t pcsts_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pcdet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pena_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t penchng_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t poca_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pocchng_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pres_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t psusp_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t prst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t plsts_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 1;
            __IO uint32_t ppwr_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptctl_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t pspd_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 14;
        } otg_hs_hprt_bits;
    };

    __IO uint8_t reserved2[188];

    // OTG_HS_HCCHAR0 @ offset=0x00000100
    union {
        __IO uint32_t otg_hs_hcchar0_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar0_bits;
    };

    // OTG_HS_HCSPLT0 @ offset=0x00000104
    union {
        __IO uint32_t otg_hs_hcsplt0_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt0_bits;
    };

    // OTG_HS_HCINT0 @ offset=0x00000108
    union {
        __IO uint32_t otg_hs_hcint0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint0_bits;
    };

    // OTG_HS_HCINTMSK0 @ offset=0x0000010C
    union {
        __IO uint32_t otg_hs_hcintmsk0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk0_bits;
    };

    // OTG_HS_HCTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t otg_hs_hctsiz0_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz0_bits;
    };

    // OTG_HS_HCDMA0 @ offset=0x00000114
    __IO uint32_t otg_hs_hcdma0_reg;

    __IO uint8_t reserved3[8];

    // OTG_HS_HCCHAR1 @ offset=0x00000120
    union {
        __IO uint32_t otg_hs_hcchar1_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar1_bits;
    };

    // OTG_HS_HCSPLT1 @ offset=0x00000124
    union {
        __IO uint32_t otg_hs_hcsplt1_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt1_bits;
    };

    // OTG_HS_HCINT1 @ offset=0x00000128
    union {
        __IO uint32_t otg_hs_hcint1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint1_bits;
    };

    // OTG_HS_HCINTMSK1 @ offset=0x0000012C
    union {
        __IO uint32_t otg_hs_hcintmsk1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk1_bits;
    };

    // OTG_HS_HCTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t otg_hs_hctsiz1_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz1_bits;
    };

    // OTG_HS_HCDMA1 @ offset=0x00000134
    __IO uint32_t otg_hs_hcdma1_reg;

    __IO uint8_t reserved4[8];

    // OTG_HS_HCCHAR2 @ offset=0x00000140
    union {
        __IO uint32_t otg_hs_hcchar2_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar2_bits;
    };

    // OTG_HS_HCSPLT2 @ offset=0x00000144
    union {
        __IO uint32_t otg_hs_hcsplt2_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt2_bits;
    };

    // OTG_HS_HCINT2 @ offset=0x00000148
    union {
        __IO uint32_t otg_hs_hcint2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint2_bits;
    };

    // OTG_HS_HCINTMSK2 @ offset=0x0000014C
    union {
        __IO uint32_t otg_hs_hcintmsk2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk2_bits;
    };

    // OTG_HS_HCTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t otg_hs_hctsiz2_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz2_bits;
    };

    // OTG_HS_HCDMA2 @ offset=0x00000154
    __IO uint32_t otg_hs_hcdma2_reg;

    __IO uint8_t reserved5[8];

    // OTG_HS_HCCHAR3 @ offset=0x00000160
    union {
        __IO uint32_t otg_hs_hcchar3_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar3_bits;
    };

    // OTG_HS_HCSPLT3 @ offset=0x00000164
    union {
        __IO uint32_t otg_hs_hcsplt3_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt3_bits;
    };

    // OTG_HS_HCINT3 @ offset=0x00000168
    union {
        __IO uint32_t otg_hs_hcint3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint3_bits;
    };

    // OTG_HS_HCINTMSK3 @ offset=0x0000016C
    union {
        __IO uint32_t otg_hs_hcintmsk3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk3_bits;
    };

    // OTG_HS_HCTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t otg_hs_hctsiz3_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz3_bits;
    };

    // OTG_HS_HCDMA3 @ offset=0x00000174
    __IO uint32_t otg_hs_hcdma3_reg;

    __IO uint8_t reserved6[8];

    // OTG_HS_HCCHAR4 @ offset=0x00000180
    union {
        __IO uint32_t otg_hs_hcchar4_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar4_bits;
    };

    // OTG_HS_HCSPLT4 @ offset=0x00000184
    union {
        __IO uint32_t otg_hs_hcsplt4_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt4_bits;
    };

    // OTG_HS_HCINT4 @ offset=0x00000188
    union {
        __IO uint32_t otg_hs_hcint4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint4_bits;
    };

    // OTG_HS_HCINTMSK4 @ offset=0x0000018C
    union {
        __IO uint32_t otg_hs_hcintmsk4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk4_bits;
    };

    // OTG_HS_HCTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t otg_hs_hctsiz4_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz4_bits;
    };

    // OTG_HS_HCDMA4 @ offset=0x00000194
    __IO uint32_t otg_hs_hcdma4_reg;

    __IO uint8_t reserved7[8];

    // OTG_HS_HCCHAR5 @ offset=0x000001A0
    union {
        __IO uint32_t otg_hs_hcchar5_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar5_bits;
    };

    // OTG_HS_HCSPLT5 @ offset=0x000001A4
    union {
        __IO uint32_t otg_hs_hcsplt5_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt5_bits;
    };

    // OTG_HS_HCINT5 @ offset=0x000001A8
    union {
        __IO uint32_t otg_hs_hcint5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint5_bits;
    };

    // OTG_HS_HCINTMSK5 @ offset=0x000001AC
    union {
        __IO uint32_t otg_hs_hcintmsk5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk5_bits;
    };

    // OTG_HS_HCTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t otg_hs_hctsiz5_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz5_bits;
    };

    // OTG_HS_HCDMA5 @ offset=0x000001B4
    __IO uint32_t otg_hs_hcdma5_reg;

    __IO uint8_t reserved8[8];

    // OTG_HS_HCCHAR6 @ offset=0x000001C0
    union {
        __IO uint32_t otg_hs_hcchar6_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar6_bits;
    };

    // OTG_HS_HCSPLT6 @ offset=0x000001C4
    union {
        __IO uint32_t otg_hs_hcsplt6_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt6_bits;
    };

    // OTG_HS_HCINT6 @ offset=0x000001C8
    union {
        __IO uint32_t otg_hs_hcint6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint6_bits;
    };

    // OTG_HS_HCINTMSK6 @ offset=0x000001CC
    union {
        __IO uint32_t otg_hs_hcintmsk6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk6_bits;
    };

    // OTG_HS_HCTSIZ6 @ offset=0x000001D0
    union {
        __IO uint32_t otg_hs_hctsiz6_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz6_bits;
    };

    // OTG_HS_HCDMA6 @ offset=0x000001D4
    __IO uint32_t otg_hs_hcdma6_reg;

    __IO uint8_t reserved9[8];

    // OTG_HS_HCCHAR7 @ offset=0x000001E0
    union {
        __IO uint32_t otg_hs_hcchar7_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar7_bits;
    };

    // OTG_HS_HCSPLT7 @ offset=0x000001E4
    union {
        __IO uint32_t otg_hs_hcsplt7_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt7_bits;
    };

    // OTG_HS_HCINT7 @ offset=0x000001E8
    union {
        __IO uint32_t otg_hs_hcint7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint7_bits;
    };

    // OTG_HS_HCINTMSK7 @ offset=0x000001EC
    union {
        __IO uint32_t otg_hs_hcintmsk7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk7_bits;
    };

    // OTG_HS_HCTSIZ7 @ offset=0x000001F0
    union {
        __IO uint32_t otg_hs_hctsiz7_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz7_bits;
    };

    // OTG_HS_HCDMA7 @ offset=0x000001F4
    __IO uint32_t otg_hs_hcdma7_reg;

    __IO uint8_t reserved10[8];

    // OTG_HS_HCCHAR8 @ offset=0x00000200
    union {
        __IO uint32_t otg_hs_hcchar8_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar8_bits;
    };

    // OTG_HS_HCSPLT8 @ offset=0x00000204
    union {
        __IO uint32_t otg_hs_hcsplt8_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt8_bits;
    };

    // OTG_HS_HCINT8 @ offset=0x00000208
    union {
        __IO uint32_t otg_hs_hcint8_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint8_bits;
    };

    // OTG_HS_HCINTMSK8 @ offset=0x0000020C
    union {
        __IO uint32_t otg_hs_hcintmsk8_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk8_bits;
    };

    // OTG_HS_HCTSIZ8 @ offset=0x00000210
    union {
        __IO uint32_t otg_hs_hctsiz8_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz8_bits;
    };

    // OTG_HS_HCDMA8 @ offset=0x00000214
    __IO uint32_t otg_hs_hcdma8_reg;

    __IO uint8_t reserved11[8];

    // OTG_HS_HCCHAR9 @ offset=0x00000220
    union {
        __IO uint32_t otg_hs_hcchar9_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar9_bits;
    };

    // OTG_HS_HCSPLT9 @ offset=0x00000224
    union {
        __IO uint32_t otg_hs_hcsplt9_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt9_bits;
    };

    // OTG_HS_HCINT9 @ offset=0x00000228
    union {
        __IO uint32_t otg_hs_hcint9_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint9_bits;
    };

    // OTG_HS_HCINTMSK9 @ offset=0x0000022C
    union {
        __IO uint32_t otg_hs_hcintmsk9_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk9_bits;
    };

    // OTG_HS_HCTSIZ9 @ offset=0x00000230
    union {
        __IO uint32_t otg_hs_hctsiz9_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz9_bits;
    };

    // OTG_HS_HCDMA9 @ offset=0x00000234
    __IO uint32_t otg_hs_hcdma9_reg;

    __IO uint8_t reserved12[8];

    // OTG_HS_HCCHAR10 @ offset=0x00000240
    union {
        __IO uint32_t otg_hs_hcchar10_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar10_bits;
    };

    // OTG_HS_HCSPLT10 @ offset=0x00000244
    union {
        __IO uint32_t otg_hs_hcsplt10_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt10_bits;
    };

    // OTG_HS_HCINT10 @ offset=0x00000248
    union {
        __IO uint32_t otg_hs_hcint10_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint10_bits;
    };

    // OTG_HS_HCINTMSK10 @ offset=0x0000024C
    union {
        __IO uint32_t otg_hs_hcintmsk10_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk10_bits;
    };

    // OTG_HS_HCTSIZ10 @ offset=0x00000250
    union {
        __IO uint32_t otg_hs_hctsiz10_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz10_bits;
    };

    // OTG_HS_HCDMA10 @ offset=0x00000254
    __IO uint32_t otg_hs_hcdma10_reg;

    __IO uint8_t reserved13[8];

    // OTG_HS_HCCHAR11 @ offset=0x00000260
    union {
        __IO uint32_t otg_hs_hcchar11_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar11_bits;
    };

    // OTG_HS_HCSPLT11 @ offset=0x00000264
    union {
        __IO uint32_t otg_hs_hcsplt11_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt11_bits;
    };

    // OTG_HS_HCINT11 @ offset=0x00000268
    union {
        __IO uint32_t otg_hs_hcint11_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint11_bits;
    };

    // OTG_HS_HCINTMSK11 @ offset=0x0000026C
    union {
        __IO uint32_t otg_hs_hcintmsk11_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk11_bits;
    };

    // OTG_HS_HCTSIZ11 @ offset=0x00000270
    union {
        __IO uint32_t otg_hs_hctsiz11_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz11_bits;
    };

    // OTG_HS_HCDMA11 @ offset=0x00000274
    __IO uint32_t otg_hs_hcdma11_reg;

    // OTG_HS_HCCHAR12 @ offset=0x00000278
    union {
        __IO uint32_t otg_hs_hcchar12_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar12_bits;
    };

    // OTG_HS_HCSPLT12 @ offset=0x0000027C
    union {
        __IO uint32_t otg_hs_hcsplt12_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt12_bits;
    };

    // OTG_HS_HCINT12 @ offset=0x00000280
    union {
        __IO uint32_t otg_hs_hcint12_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint12_bits;
    };

    // OTG_HS_HCINTMSK12 @ offset=0x00000284
    union {
        __IO uint32_t otg_hs_hcintmsk12_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk12_bits;
    };

    // OTG_HS_HCTSIZ12 @ offset=0x00000288
    union {
        __IO uint32_t otg_hs_hctsiz12_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz12_bits;
    };

    // OTG_HS_HCDMA12 @ offset=0x0000028C
    __IO uint32_t otg_hs_hcdma12_reg;

    // OTG_HS_HCCHAR13 @ offset=0x00000290
    union {
        __IO uint32_t otg_hs_hcchar13_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar13_bits;
    };

    // OTG_HS_HCSPLT13 @ offset=0x00000294
    union {
        __IO uint32_t otg_hs_hcsplt13_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt13_bits;
    };

    // OTG_HS_HCINT13 @ offset=0x00000298
    union {
        __IO uint32_t otg_hs_hcint13_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint13_bits;
    };

    // OTG_HS_HCINTMSK13 @ offset=0x0000029C
    union {
        __IO uint32_t otg_hs_hcintmsk13_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk13_bits;
    };

    // OTG_HS_HCTSIZ13 @ offset=0x000002A0
    union {
        __IO uint32_t otg_hs_hctsiz13_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz13_bits;
    };

    // OTG_HS_HCDMA13 @ offset=0x000002A4
    __IO uint32_t otg_hs_hcdma13_reg;

    // OTG_HS_HCCHAR14 @ offset=0x000002A8
    union {
        __IO uint32_t otg_hs_hcchar14_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar14_bits;
    };

    // OTG_HS_HCSPLT14 @ offset=0x000002AC
    union {
        __IO uint32_t otg_hs_hcsplt14_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt14_bits;
    };

    // OTG_HS_HCINT14 @ offset=0x000002B0
    union {
        __IO uint32_t otg_hs_hcint14_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint14_bits;
    };

    // OTG_HS_HCINTMSK14 @ offset=0x000002B4
    union {
        __IO uint32_t otg_hs_hcintmsk14_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stallm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk14_bits;
    };

    // OTG_HS_HCTSIZ14 @ offset=0x000002B8
    union {
        __IO uint32_t otg_hs_hctsiz14_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz14_bits;
    };

    // OTG_HS_HCDMA14 @ offset=0x000002BC
    __IO uint32_t otg_hs_hcdma14_reg;

    // OTG_HS_HCCHAR15 @ offset=0x000002C0
    union {
        __IO uint32_t otg_hs_hcchar15_reg;

        // bit fields
        struct {
            __IO uint32_t mpsiz_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t epnum_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t epdir_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t lsdev_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eptyp_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mc_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t dad_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 6;
            __IO uint32_t oddfrm_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chdis_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chena_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcchar15_bits;
    };

    // OTG_HS_HCSPLT15 @ offset=0x000002C4
    union {
        __IO uint32_t otg_hs_hcsplt15_reg;

        // bit fields
        struct {
            __IO uint32_t prtaddr_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t hubaddr_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t xactpos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t complsplt_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 14;
            __IO uint32_t spliten_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } otg_hs_hcsplt15_bits;
    };

    // OTG_HS_HCINT15 @ offset=0x000002C8
    union {
        __IO uint32_t otg_hs_hcint15_reg;

        // bit fields
        struct {
            __IO uint32_t xfrc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chh_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nak_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ack_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmor_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterr_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcint15_bits;
    };

    // OTG_HS_HCINTMSK15 @ offset=0x000002CC
    union {
        __IO uint32_t otg_hs_hcintmsk15_reg;

        // bit fields
        struct {
            __IO uint32_t xfrcm_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chhm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ahberr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stall_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nakm_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackm_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nyet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txerrm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bberrm_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t frmorm_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dterrm_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } otg_hs_hcintmsk15_bits;
    };

    // OTG_HS_HCTSIZ15 @ offset=0x000002D0
    union {
        __IO uint32_t otg_hs_hctsiz15_reg;

        // bit fields
        struct {
            __IO uint32_t xfrsiz_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 18;
            __IO uint32_t pktcnt_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t dpid_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 2;
        } otg_hs_hctsiz15_bits;
    };

    // OTG_HS_HCDMA15 @ offset=0x000002D4
    __IO uint32_t otg_hs_hcdma15_reg;

} otg2_hs_host_t;

// Peripheral OTG2_HS_PWRCLK @ base_addess=0x40080E00
typedef struct otg2_hs_pwrclk_t {

    // OTG_HS_PCGCR @ offset=0x00000000
    union {
        __IO uint32_t otg_hs_pcgcr_reg;

        // bit fields
        struct {
            __IO uint32_t stppclk_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gatehclk_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t physusp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } otg_hs_pcgcr_bits;
    };

} otg2_hs_pwrclk_t;

// Peripheral PWR @ base_addess=0x58024800
typedef struct pwr_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t lpds_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t pvde_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pls_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t dbp_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t flps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 4;
            __IO uint32_t svos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t avden_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t als_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 14;
        } cr1_bits;
    };

    // CSR1 @ offset=0x00000004
    union {
        __IO uint32_t csr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t pvdo_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 8;
            __IO uint32_t actvosrdy_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t actvos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 1;
            __IO uint32_t avdo_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 15;
        } csr1_bits;
    };

    // CR2 @ offset=0x00000008
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t bren_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t monen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 11;
            __IO uint32_t brrdy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 3;
            __IO uint32_t vbatl_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vbath_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t templ_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t temph_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 8;
        } cr2_bits;
    };

    // CR3 @ offset=0x0000000C
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t bypass_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ldoen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scuen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t vbe_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vbrs_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 14;
            __IO uint32_t usb33den_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usbregen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb33rdy_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 5;
        } cr3_bits;
    };

    // CPUCR @ offset=0x00000010
    union {
        __IO uint32_t cpucr_reg;

        // bit fields
        struct {
            __IO uint32_t pdds_d1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pdds_d2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pdds_d3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t stopf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbf_d1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbf_d2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cssf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t run_d3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } cpucr_bits;
    };

    __IO uint8_t reserved0[4];

    // D3CR @ offset=0x00000018
    union {
        __IO uint32_t d3cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 13;
            __IO uint32_t vosrdy_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vos_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 17;
        } d3cr_bits;
    };

    __IO uint8_t reserved1[4];

    // WKUPCR @ offset=0x00000020
    __IO uint32_t wkupcr_reg;

    // WKUPFR @ offset=0x00000024
    union {
        __IO uint32_t wkupfr_reg;

        // bit fields
        struct {
            __IO uint32_t wkupf1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupf2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupf3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupf4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupf5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupf6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 26;
        } wkupfr_bits;
    };

    // WKUPEPR @ offset=0x00000028
    union {
        __IO uint32_t wkupepr_reg;

        // bit fields
        struct {
            __IO uint32_t wkupen1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupen2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupen3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupen4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupen5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupen6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t wkupp1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupp2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupp3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupp4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupp5_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wkupp6_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t wkuppupd1_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t wkuppupd2_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t wkuppupd3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t wkuppupd4_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t wkuppupd5_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t wkuppupd6_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } wkupepr_bits;
    };

} pwr_t;

// Peripheral QUADSPI @ base_addess=0x52005000
typedef struct quadspi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abort_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sshift_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dfm_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsel_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthres_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t teie_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ftie_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t smie_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t toie_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t apms_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pmm_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t prescaler_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } cr_bits;
    };

    // DCR @ offset=0x00000004
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t ckmode_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t csht_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } dcr_bits;
    };

    // SR @ offset=0x00000008
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t tef_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ftf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t smf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tof_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t flevel_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 23;
        } sr_bits;
    };

    // FCR @ offset=0x0000000C
    union {
        __IO uint32_t fcr_reg;

        // bit fields
        struct {
            __IO uint32_t ctef_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctcf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t csmf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctof_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } fcr_bits;
    };

    // DLR @ offset=0x00000010
    __IO uint32_t dlr_reg;

    // CCR @ offset=0x00000014
    union {
        __IO uint32_t ccr_reg;

        // bit fields
        struct {
            __IO uint32_t instruction_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t imode_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t admode_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t adsize_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t abmode_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t absize_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t dcyc_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t dmode_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t fmode_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 1;
            __IO uint32_t sioo_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9: 1;
            __IO uint32_t dhhc_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddrm_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ccr_bits;
    };

    // AR @ offset=0x00000018
    __IO uint32_t ar_reg;

    // ABR @ offset=0x0000001C
    __IO uint32_t abr_reg;

    // DR @ offset=0x00000020
    __IO uint32_t dr_reg;

    // PSMKR @ offset=0x00000024
    __IO uint32_t psmkr_reg;

    // PSMAR @ offset=0x00000028
    __IO uint32_t psmar_reg;

    // PIR @ offset=0x0000002C
    __IO uint32_t pir_reg;

    // LPTR @ offset=0x00000030
    __IO uint32_t lptr_reg;

} quadspi_t;

// Peripheral RAMECC1 @ base_addess=0x52009000
typedef struct ramecc1_t {

    // IER @ offset=0x00000000
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t gie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccseie__bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccdeie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccdebwie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 28;
        } ier_bits;
    };

    __IO uint8_t reserved0[28];

    // M1CR @ offset=0x00000020
    union {
        __IO uint32_t m1cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m1cr_bits;
    };

    // M1SR @ offset=0x00000024
    union {
        __IO uint32_t m1sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m1sr_bits;
    };

    // M1FAR @ offset=0x00000028
    __IO uint32_t m1far_reg;

    // M1FDRL @ offset=0x0000002C
    __IO uint32_t m1fdrl_reg;

    // M1FDRH @ offset=0x00000030
    __IO uint32_t m1fdrh_reg;

    // M1FECR @ offset=0x00000034
    __IO uint32_t m1fecr_reg;

    __IO uint8_t reserved1[8];

    // M2CR @ offset=0x00000040
    union {
        __IO uint32_t m2cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m2cr_bits;
    };

    // M2SR @ offset=0x00000044
    union {
        __IO uint32_t m2sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m2sr_bits;
    };

    // M2FAR @ offset=0x00000048
    __IO uint32_t m2far_reg;

    // M2FDRL @ offset=0x0000004C
    __IO uint32_t m2fdrl_reg;

    // M2FDRH @ offset=0x00000050
    __IO uint32_t m2fdrh_reg;

    __IO uint8_t reserved2[4];

    // M2FECR @ offset=0x00000058
    __IO uint32_t m2fecr_reg;

    __IO uint8_t reserved3[4];

    // M3CR @ offset=0x00000060
    union {
        __IO uint32_t m3cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m3cr_bits;
    };

    // M3SR @ offset=0x00000064
    union {
        __IO uint32_t m3sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m3sr_bits;
    };

    // M3FAR @ offset=0x00000068
    __IO uint32_t m3far_reg;

    // M3FDRL @ offset=0x0000006C
    __IO uint32_t m3fdrl_reg;

    // M3FDRH @ offset=0x00000070
    __IO uint32_t m3fdrh_reg;

    __IO uint8_t reserved4[8];

    // M3FECR @ offset=0x0000007C
    __IO uint32_t m3fecr_reg;

    // M4CR @ offset=0x00000080
    union {
        __IO uint32_t m4cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m4cr_bits;
    };

    // M4SR @ offset=0x00000084
    union {
        __IO uint32_t m4sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m4sr_bits;
    };

    // M4FAR @ offset=0x00000088
    __IO uint32_t m4far_reg;

    // M4FDRL @ offset=0x0000008C
    __IO uint32_t m4fdrl_reg;

    union {
        // M4FDRH @ offset=0x00000090
        __IO uint32_t m4fdrh_reg;

        // M4FECR @ offset=0x00000090
        __IO uint32_t m4fecr_reg;

    };

    __IO uint8_t reserved5[8];

    // M5CR @ offset=0x000000A0
    union {
        __IO uint32_t m5cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m5cr_bits;
    };

    // M5SR @ offset=0x000000A4
    union {
        __IO uint32_t m5sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m5sr_bits;
    };

    // M5FAR @ offset=0x000000A8
    __IO uint32_t m5far_reg;

    // M5FDRL @ offset=0x000000AC
    __IO uint32_t m5fdrl_reg;

    // M5FDRH @ offset=0x000000B0
    __IO uint32_t m5fdrh_reg;

    // M5FECR @ offset=0x000000B4
    __IO uint32_t m5fecr_reg;

} ramecc1_t;

// Peripheral RAMECC2 @ base_addess=0x48023000
typedef struct ramecc2_t {

    // IER @ offset=0x00000000
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t gie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccseie__bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccdeie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccdebwie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 28;
        } ier_bits;
    };

    __IO uint8_t reserved0[28];

    // M1CR @ offset=0x00000020
    union {
        __IO uint32_t m1cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m1cr_bits;
    };

    // M1SR @ offset=0x00000024
    union {
        __IO uint32_t m1sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m1sr_bits;
    };

    // M1FAR @ offset=0x00000028
    __IO uint32_t m1far_reg;

    // M1FDRL @ offset=0x0000002C
    __IO uint32_t m1fdrl_reg;

    // M1FDRH @ offset=0x00000030
    __IO uint32_t m1fdrh_reg;

    // M1FECR @ offset=0x00000034
    __IO uint32_t m1fecr_reg;

    __IO uint8_t reserved1[8];

    // M2CR @ offset=0x00000040
    union {
        __IO uint32_t m2cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m2cr_bits;
    };

    // M2SR @ offset=0x00000044
    union {
        __IO uint32_t m2sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m2sr_bits;
    };

    // M2FAR @ offset=0x00000048
    __IO uint32_t m2far_reg;

    // M2FDRL @ offset=0x0000004C
    __IO uint32_t m2fdrl_reg;

    // M2FDRH @ offset=0x00000050
    __IO uint32_t m2fdrh_reg;

    __IO uint8_t reserved2[4];

    // M2FECR @ offset=0x00000058
    __IO uint32_t m2fecr_reg;

    __IO uint8_t reserved3[4];

    // M3CR @ offset=0x00000060
    union {
        __IO uint32_t m3cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m3cr_bits;
    };

    // M3SR @ offset=0x00000064
    union {
        __IO uint32_t m3sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m3sr_bits;
    };

    // M3FAR @ offset=0x00000068
    __IO uint32_t m3far_reg;

    // M3FDRL @ offset=0x0000006C
    __IO uint32_t m3fdrl_reg;

    // M3FDRH @ offset=0x00000070
    __IO uint32_t m3fdrh_reg;

    __IO uint8_t reserved4[8];

    // M3FECR @ offset=0x0000007C
    __IO uint32_t m3fecr_reg;

    // M4CR @ offset=0x00000080
    union {
        __IO uint32_t m4cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m4cr_bits;
    };

    // M4SR @ offset=0x00000084
    union {
        __IO uint32_t m4sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m4sr_bits;
    };

    // M4FAR @ offset=0x00000088
    __IO uint32_t m4far_reg;

    // M4FDRL @ offset=0x0000008C
    __IO uint32_t m4fdrl_reg;

    union {
        // M4FDRH @ offset=0x00000090
        __IO uint32_t m4fdrh_reg;

        // M4FECR @ offset=0x00000090
        __IO uint32_t m4fecr_reg;

    };

    __IO uint8_t reserved5[8];

    // M5CR @ offset=0x000000A0
    union {
        __IO uint32_t m5cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m5cr_bits;
    };

    // M5SR @ offset=0x000000A4
    union {
        __IO uint32_t m5sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m5sr_bits;
    };

    // M5FAR @ offset=0x000000A8
    __IO uint32_t m5far_reg;

    // M5FDRL @ offset=0x000000AC
    __IO uint32_t m5fdrl_reg;

    // M5FDRH @ offset=0x000000B0
    __IO uint32_t m5fdrh_reg;

    // M5FECR @ offset=0x000000B4
    __IO uint32_t m5fecr_reg;

} ramecc2_t;

// Peripheral RAMECC3 @ base_addess=0x58027000
typedef struct ramecc3_t {

    // IER @ offset=0x00000000
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t gie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccseie__bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccdeie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t geccdebwie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 28;
        } ier_bits;
    };

    __IO uint8_t reserved0[28];

    // M1CR @ offset=0x00000020
    union {
        __IO uint32_t m1cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m1cr_bits;
    };

    // M1SR @ offset=0x00000024
    union {
        __IO uint32_t m1sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m1sr_bits;
    };

    // M1FAR @ offset=0x00000028
    __IO uint32_t m1far_reg;

    // M1FDRL @ offset=0x0000002C
    __IO uint32_t m1fdrl_reg;

    // M1FDRH @ offset=0x00000030
    __IO uint32_t m1fdrh_reg;

    // M1FECR @ offset=0x00000034
    __IO uint32_t m1fecr_reg;

    __IO uint8_t reserved1[8];

    // M2CR @ offset=0x00000040
    union {
        __IO uint32_t m2cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t eccseie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdeie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccdebwie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eccelen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } m2cr_bits;
    };

    // M2SR @ offset=0x00000044
    union {
        __IO uint32_t m2sr_reg;

        // bit fields
        struct {
            __IO uint32_t sedcf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t debwdf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } m2sr_bits;
    };

    // M2FAR @ offset=0x00000048
    __IO uint32_t m2far_reg;

    // M2FDRL @ offset=0x0000004C
    __IO uint32_t m2fdrl_reg;

    // M2FDRH @ offset=0x00000050
    __IO uint32_t m2fdrh_reg;

    __IO uint8_t reserved2[4];

    // M2FECR @ offset=0x00000058
    __IO uint32_t m2fecr_reg;

} ramecc3_t;

// Peripheral RCC @ base_addess=0x58024400
typedef struct rcc_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t hsion_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsikeron_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsirdy_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsidiv_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t hsidivf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t csion_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csirdy_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csikeron_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t rc48on_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rc48rdy_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t d1ckrdy_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t d2ckrdy_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hseon_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hserdy_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsebyp_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsecsson_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 4;
            __IO uint32_t pll1on_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll1rdy_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2on_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2rdy_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3on_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3rdy_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 2;
        } cr_bits;
    };

    union {
        // ICSCR @ offset=0x00000004
        union {
            __IO uint32_t icscr_reg;

            // bit fields
            struct {
                __IO uint32_t hsical_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 11;
                __IO uint32_t hsitrim_bit : 6; // bit offset=12  bit width=6  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 5;
                __IO uint32_t csical_bit : 8; // bit offset=18  bit width=8  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved2: 7;
                __IO uint32_t csitrim_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3 : 5;
            } icscr_bits;
        };

        // HSICFGR @ offset=0x00000004
        union {
            __IO uint32_t hsicfgr_reg;

            // bit fields
            struct {
                __IO uint32_t hsical_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 23;
                __IO uint32_t hsitrim_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 7;
            } hsicfgr_bits;
        };

    };

    // CRRCR @ offset=0x00000008
    __IO uint32_t crrcr_reg;

    // CFGR @ offset=0x00000010
    union {
        __IO uint32_t cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t sw_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t sws_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t stopwuck_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stopkerwuck_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtcpre_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t hrtimsel_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t timpre_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t mco1pre_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t mco1sel_bit : 3; // bit offset=22  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t mco2pre_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t mco2sel_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 2;
        } cfgr_bits;
    };

    __IO uint8_t reserved0[4];

    // D1CFGR @ offset=0x00000018
    union {
        __IO uint32_t d1cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t hpre_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t d1ppre_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t d1cpre_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } d1cfgr_bits;
    };

    // D2CFGR @ offset=0x0000001C
    union {
        __IO uint32_t d2cfgr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t d2ppre1_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t d2ppre2_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 23;
        } d2cfgr_bits;
    };

    // D3CFGR @ offset=0x00000020
    __IO uint32_t d3cfgr_reg;

    __IO uint8_t reserved1[4];

    // PLLCKSELR @ offset=0x00000028
    union {
        __IO uint32_t pllckselr_reg;

        // bit fields
        struct {
            __IO uint32_t pllsrc_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t divm1_bit : 6; // bit offset=4  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t divm2_bit : 6; // bit offset=12  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t divm3_bit : 6; // bit offset=20  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } pllckselr_bits;
    };

    // PLLCFGR @ offset=0x0000002C
    union {
        __IO uint32_t pllcfgr_reg;

        // bit fields
        struct {
            __IO uint32_t pll1fracen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll1vcosel_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll1rge_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t pll2fracen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2vcosel_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2rge_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pll3fracen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3vcosel_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3rge_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 5;
            __IO uint32_t divp1en_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divq1en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divr1en_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divp2en_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divq2en_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divr2en_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divp3en_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divq3en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t divr3en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } pllcfgr_bits;
    };

    // PLL1DIVR @ offset=0x00000030
    union {
        __IO uint32_t pll1divr_reg;

        // bit fields
        struct {
            __IO uint32_t divn1_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t divp1_bit : 7; // bit offset=9  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t divq1_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t divr1_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } pll1divr_bits;
    };

    // PLL1FRACR @ offset=0x00000034
    __IO uint32_t pll1fracr_reg;

    // PLL2DIVR @ offset=0x00000038
    union {
        __IO uint32_t pll2divr_reg;

        // bit fields
        struct {
            __IO uint32_t divn2_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t divp2_bit : 7; // bit offset=9  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t divq2_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t divr2_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } pll2divr_bits;
    };

    // PLL2FRACR @ offset=0x0000003C
    __IO uint32_t pll2fracr_reg;

    // PLL3DIVR @ offset=0x00000040
    union {
        __IO uint32_t pll3divr_reg;

        // bit fields
        struct {
            __IO uint32_t divn3_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t divp3_bit : 7; // bit offset=9  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t divq3_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t divr3_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } pll3divr_bits;
    };

    // PLL3FRACR @ offset=0x00000044
    __IO uint32_t pll3fracr_reg;

    __IO uint8_t reserved2[4];

    // D1CCIPR @ offset=0x0000004C
    union {
        __IO uint32_t d1ccipr_reg;

        // bit fields
        struct {
            __IO uint32_t fmcsel_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t qspisel_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 11;
            __IO uint32_t sdmmcsel_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 11;
            __IO uint32_t ckpersel_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } d1ccipr_bits;
    };

    // D2CCIP1R @ offset=0x00000050
    union {
        __IO uint32_t d2ccip1r_reg;

        // bit fields
        struct {
            __IO uint32_t sai1sel_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t sai23sel_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t spi123sel_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t spi45sel_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t spdifsel_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dfsdm1sel_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t fdcansel_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 2;
            __IO uint32_t swpsel_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } d2ccip1r_bits;
    };

    // D2CCIP2R @ offset=0x00000054
    union {
        __IO uint32_t d2ccip2r_reg;

        // bit fields
        struct {
            __IO uint32_t usart234578sel_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t usart16sel_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 4;
            __IO uint32_t rngsel_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t i2c123sel_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 7;
            __IO uint32_t usbsel_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t cecsel_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 5;
            __IO uint32_t lptim1sel_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 3;
        } d2ccip2r_bits;
    };

    // D3CCIPR @ offset=0x00000058
    union {
        __IO uint32_t d3ccipr_reg;

        // bit fields
        struct {
            __IO uint32_t lpuart1sel_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t i2c4sel_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t lptim2sel_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lptim345sel_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t adcsel_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 4;
            __IO uint32_t sai4asel_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t sai4bsel_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t spi6sel_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } d3ccipr_bits;
    };

    __IO uint8_t reserved3[4];

    // CIER @ offset=0x00000060
    union {
        __IO uint32_t cier_reg;

        // bit fields
        struct {
            __IO uint32_t lsirdyie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lserdyie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsirdyie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hserdyie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csirdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rc48rdyie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll1rdyie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2rdyie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3rdyie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsecssie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 22;
        } cier_bits;
    };

    // CIFR @ offset=0x00000064
    union {
        __IO uint32_t cifr_reg;

        // bit fields
        struct {
            __IO uint32_t lsirdyf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lserdyf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsirdyf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hserdyf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csirdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rc48rdyf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll1rdyf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2rdyf_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3rdyf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsecssf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsecssf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } cifr_bits;
    };

    // CICR @ offset=0x00000068
    union {
        __IO uint32_t cicr_reg;

        // bit fields
        struct {
            __IO uint32_t lsirdyc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lserdyc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsirdyc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hserdyc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hse_ready_interrupt_clear_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rc48rdyc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll1rdyc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll2rdyc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pll3rdyc_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsecssc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsecssc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 21;
        } cicr_bits;
    };

    __IO uint8_t reserved4[4];

    // BDCR @ offset=0x00000070
    union {
        __IO uint32_t bdcr_reg;

        // bit fields
        struct {
            __IO uint32_t lseon_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lserdy_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsebyp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsedrv_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t lsecsson_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsecssd_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t rtcsrc_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 6;
            __IO uint32_t rtcen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswrst_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } bdcr_bits;
    };

    // CSR @ offset=0x00000074
    union {
        __IO uint32_t csr_reg;

        // bit fields
        struct {
            __IO uint32_t lsion_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsirdy_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } csr_bits;
    };

    __IO uint8_t reserved5[4];

    // AHB3RSTR @ offset=0x0000007C
    union {
        __IO uint32_t ahb3rstr_reg;

        // bit fields
        struct {
            __IO uint32_t mdmarst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dma2drst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jpgdecrst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t fmcrst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t qspirst_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sdmmc1rst_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 14;
            __IO uint32_t cpurst_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ahb3rstr_bits;
    };

    // AHB1RSTR @ offset=0x00000080
    union {
        __IO uint32_t ahb1rstr_reg;

        // bit fields
        struct {
            __IO uint32_t dma1rst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dma2rst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t adc12rst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t eth1macrst_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 9;
            __IO uint32_t usb1otgrst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t usb2otgrst_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 4;
        } ahb1rstr_bits;
    };

    // AHB2RSTR @ offset=0x00000084
    union {
        __IO uint32_t ahb2rstr_reg;

        // bit fields
        struct {
            __IO uint32_t camitfrst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t cryptrst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hashrst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rngrst_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t sdmmc2rst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 22;
        } ahb2rstr_bits;
    };

    // AHB4RSTR @ offset=0x00000088
    union {
        __IO uint32_t ahb4rstr_reg;

        // bit fields
        struct {
            __IO uint32_t gpioarst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiobrst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiocrst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiodrst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioerst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiofrst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiogrst_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiohrst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiojrst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiokrst_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t crcrst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bdmarst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t adc3rst_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsemrst_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 6;
        } ahb4rstr_bits;
    };

    // APB3RSTR @ offset=0x0000008C
    __IO uint32_t apb3rstr_reg;

    // APB1LRSTR @ offset=0x00000090
    union {
        __IO uint32_t apb1lrstr_reg;

        // bit fields
        struct {
            __IO uint32_t tim2rst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim3rst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim4rst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim5rst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim6rst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim7rst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim12rst_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim13rst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim14rst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim1rst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t spi2rst_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi3rst_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spdifrxrst_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart2rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart3rst_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart4rst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart5rst_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c1rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c2rst_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c3rst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cecrst_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dac12rst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart7rst_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart8rst_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } apb1lrstr_bits;
    };

    // APB1HRSTR @ offset=0x00000094
    union {
        __IO uint32_t apb1hrstr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t crsrst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swprst_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t opamprst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mdiosrst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t fdcanrst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 23;
        } apb1hrstr_bits;
    };

    // APB2RSTR @ offset=0x00000098
    union {
        __IO uint32_t apb2rstr_reg;

        // bit fields
        struct {
            __IO uint32_t tim1rst_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim8rst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t usart1rst_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart6rst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t spi1rst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi4rst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t tim15rst_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim16rst_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim17rst_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t spi5rst_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t sai1rst_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai2rst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai3rst_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dfsdm1rst_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hrtimrst_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 2;
        } apb2rstr_bits;
    };

    // APB4RSTR @ offset=0x0000009C
    union {
        __IO uint32_t apb4rstr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t syscfgrst_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t lpuart1rst_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t spi6rst_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t i2c4rst_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lptim2rst_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim3rst_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim4rst_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim5rst_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t comp12rst_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vrefrst_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t sai4rst_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 10;
        } apb4rstr_bits;
    };

    // GCR @ offset=0x000000A0
    __IO uint32_t gcr_reg;

    __IO uint8_t reserved6[4];

    // D3AMR @ offset=0x000000A8
    union {
        __IO uint32_t d3amr_reg;

        // bit fields
        struct {
            __IO uint32_t bdmaamen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t lpuart1amen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t spi6amen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t i2c4amen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t lptim2amen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim3amen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim4amen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim5amen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t comp12amen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vrefamen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtcamen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 2;
            __IO uint32_t crcamen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 1;
            __IO uint32_t sai4amen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 2;
            __IO uint32_t adc3amen_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved8: 3;
            __IO uint32_t bkpramamen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram4amen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved9 : 2;
        } d3amr_bits;
    };

    __IO uint8_t reserved7[36];

    // RSR @ offset=0x000000D0
    union {
        __IO uint32_t rsr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t rmvf_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpurstf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t d1rstf_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t d2rstf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t borrstf_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinrstf_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t porrstf_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sftrstf_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t iwdg1rstf_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t wwdg1rstf_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lpwrrstf_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 1;
        } rsr_bits;
    };

    // AHB3ENR @ offset=0x000000D4
    union {
        __IO uint32_t ahb3enr_reg;

        // bit fields
        struct {
            __IO uint32_t mdmaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dma2den_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jpgdecen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t fmcen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t qspien_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sdmmc1en_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 15;
        } ahb3enr_bits;
    };

    // AHB1ENR @ offset=0x000000D8
    union {
        __IO uint32_t ahb1enr_reg;

        // bit fields
        struct {
            __IO uint32_t dma1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dma2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t adc12en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t eth1macen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1txen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1rxen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t usb1otghsen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb1otghsulpien_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otghsen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otghsulpien_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } ahb1enr_bits;
    };

    // AHB2ENR @ offset=0x000000DC
    union {
        __IO uint32_t ahb2enr_reg;

        // bit fields
        struct {
            __IO uint32_t dcmien_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t crypten_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hashen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rngen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t sdmmc2en_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 19;
            __IO uint32_t sram1en_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram2en_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram3en_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ahb2enr_bits;
    };

    // AHB4ENR @ offset=0x000000E0
    union {
        __IO uint32_t ahb4enr_reg;

        // bit fields
        struct {
            __IO uint32_t gpioaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioben_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiocen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioden_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioeen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiofen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiogen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiohen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioien_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiojen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioken_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t crcen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bdmaen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t adc3en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsemen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t bkpramen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } ahb4enr_bits;
    };

    // APB3ENR @ offset=0x000000E4
    union {
        __IO uint32_t apb3enr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t ltdcen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t wwdg1en_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 25;
        } apb3enr_bits;
    };

    // APB1LENR @ offset=0x000000E8
    union {
        __IO uint32_t apb1lenr_reg;

        // bit fields
        struct {
            __IO uint32_t tim2en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim3en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim4en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim5en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim6en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim7en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim12en_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim13en_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim14en_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim1en_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t spi2en_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi3en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spdifrxen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart2en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart3en_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart4en_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart5en_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c1en_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c2en_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c3en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cecen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dac12en_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart7en_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart8en_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } apb1lenr_bits;
    };

    // APB1HENR @ offset=0x000000EC
    union {
        __IO uint32_t apb1henr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t crsen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t opampen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mdiosen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t fdcanen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 23;
        } apb1henr_bits;
    };

    // APB2ENR @ offset=0x000000F0
    union {
        __IO uint32_t apb2enr_reg;

        // bit fields
        struct {
            __IO uint32_t tim1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim8en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t usart1en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart6en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t spi1en_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi4en_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t tim16en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim15en_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim17en_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi5en_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sai1en_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai2en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai3en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dfsdm1en_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hrtimen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 2;
        } apb2enr_bits;
    };

    // APB4ENR @ offset=0x000000F4
    union {
        __IO uint32_t apb4enr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t syscfgen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t lpuart1en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t spi6en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t i2c4en_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lptim2en_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim3en_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim4en_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim5en_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t comp12en_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vrefen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtcapben_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t sai4en_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 10;
        } apb4enr_bits;
    };

    __IO uint8_t reserved8[4];

    // AHB3LPENR @ offset=0x000000FC
    union {
        __IO uint32_t ahb3lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t mdmalpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dma2dlpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jpgdeclpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t flashlpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t fmclpen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t qspilpen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t sdmmc1lpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 11;
            __IO uint32_t d1dtcm1lpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtcm2lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t itcmlpen_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t axisramlpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ahb3lpenr_bits;
    };

    // AHB1LPENR @ offset=0x00000100
    union {
        __IO uint32_t ahb1lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t dma1lpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dma2lpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t adc12lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t eth1maclpen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1txlpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1rxlpen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t usb1otghslpen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb1otghsulpilpen_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otghslpen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otghsulpilpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } ahb1lpenr_bits;
    };

    // AHB2LPENR @ offset=0x00000104
    union {
        __IO uint32_t ahb2lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t camitflpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t cryptlpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hashlpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t sdmmc2lpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rnglpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 18;
            __IO uint32_t sram1lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram2lpen_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram3lpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ahb2lpenr_bits;
    };

    // AHB4LPENR @ offset=0x00000108
    union {
        __IO uint32_t ahb4lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t gpioalpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioblpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioclpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiodlpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioelpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioflpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioglpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiohlpen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioilpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiojlpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioklpen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t crclpen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bdmalpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t adc3lpen_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t bkpramlpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram4lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 2;
        } ahb4lpenr_bits;
    };

    // APB3LPENR @ offset=0x0000010C
    union {
        __IO uint32_t apb3lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t ltdclpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t wwdg1lpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 25;
        } apb3lpenr_bits;
    };

    // APB1LLPENR @ offset=0x00000110
    union {
        __IO uint32_t apb1llpenr_reg;

        // bit fields
        struct {
            __IO uint32_t tim2lpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim3lpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim4lpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim5lpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim6lpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim7lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim12lpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim13lpen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim14lpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim1lpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t spi2lpen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi3lpen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spdifrxlpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart2lpen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart3lpen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart4lpen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart5lpen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c1lpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c2lpen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c3lpen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t hdmiceclpen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dac12lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart7lpen_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart8lpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } apb1llpenr_bits;
    };

    // APB1HLPENR @ offset=0x00000114
    union {
        __IO uint32_t apb1hlpenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t crslpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swplpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t opamplpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mdioslpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t fdcanlpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 23;
        } apb1hlpenr_bits;
    };

    // APB2LPENR @ offset=0x00000118
    union {
        __IO uint32_t apb2lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t tim1lpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim8lpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t usart1lpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart6lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t spi1lpen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi4lpen_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t tim15lpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim16lpen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim17lpen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t spi5lpen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t sai1lpen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai2lpen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai3lpen_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dfsdm1lpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hrtimlpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 2;
        } apb2lpenr_bits;
    };

    // APB4LPENR @ offset=0x0000011C
    union {
        __IO uint32_t apb4lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t syscfglpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t lpuart1lpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t spi6lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t i2c4lpen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lptim2lpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim3lpen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim4lpen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim5lpen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t comp12lpen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vreflpen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtcapblpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t sai4lpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 10;
        } apb4lpenr_bits;
    };

    __IO uint8_t reserved9[16];

    // C1_RSR @ offset=0x00000130
    union {
        __IO uint32_t c1_rsr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t rmvf_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpurstf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t d1rstf_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t d2rstf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t borrstf_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pinrstf_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t porrstf_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sftrstf_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t iwdg1rstf_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t wwdg1rstf_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lpwrrstf_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 1;
        } c1_rsr_bits;
    };

    // C1_AHB3ENR @ offset=0x00000134
    union {
        __IO uint32_t c1_ahb3enr_reg;

        // bit fields
        struct {
            __IO uint32_t mdmaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dma2den_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jpgdecen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t fmcen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t qspien_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sdmmc1en_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 15;
        } c1_ahb3enr_bits;
    };

    // C1_AHB1ENR @ offset=0x00000138
    union {
        __IO uint32_t c1_ahb1enr_reg;

        // bit fields
        struct {
            __IO uint32_t dma1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dma2en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t adc12en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t eth1macen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1txen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1rxen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t usb1otghsen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb1otghsulpien_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otghsen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otghsulpien_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } c1_ahb1enr_bits;
    };

    // C1_AHB2ENR @ offset=0x0000013C
    union {
        __IO uint32_t c1_ahb2enr_reg;

        // bit fields
        struct {
            __IO uint32_t dcmien_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t crypten_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hashen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rngen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t sdmmc2en_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 19;
            __IO uint32_t sram1en_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram2en_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram3en_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } c1_ahb2enr_bits;
    };

    // C1_AHB4ENR @ offset=0x00000140
    union {
        __IO uint32_t c1_ahb4enr_reg;

        // bit fields
        struct {
            __IO uint32_t gpioaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioben_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiocen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioden_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioeen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiofen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiogen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiohen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioien_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiojen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioken_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t crcen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bdmaen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t adc3en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hsemen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t bkpramen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } c1_ahb4enr_bits;
    };

    // C1_APB3ENR @ offset=0x00000144
    union {
        __IO uint32_t c1_apb3enr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t ltdcen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t wwdg1en_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 25;
        } c1_apb3enr_bits;
    };

    // C1_APB1LENR @ offset=0x00000148
    union {
        __IO uint32_t c1_apb1lenr_reg;

        // bit fields
        struct {
            __IO uint32_t tim2en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim3en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim4en_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim5en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim6en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim7en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim12en_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim13en_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim14en_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim1en_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t spi2en_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi3en_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spdifrxen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart2en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart3en_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart4en_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart5en_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c1en_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c2en_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c3en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t hdmicecen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dac12en_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart7en_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart8en_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } c1_apb1lenr_bits;
    };

    // C1_APB1HENR @ offset=0x0000014C
    union {
        __IO uint32_t c1_apb1henr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t crsen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t opampen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mdiosen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t fdcanen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 23;
        } c1_apb1henr_bits;
    };

    // C1_APB2ENR @ offset=0x00000150
    union {
        __IO uint32_t c1_apb2enr_reg;

        // bit fields
        struct {
            __IO uint32_t tim1en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim8en_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t usart1en_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart6en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t spi1en_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi4en_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t tim16en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim15en_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim17en_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi5en_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t sai1en_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai2en_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai3en_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dfsdm1en_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hrtimen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 2;
        } c1_apb2enr_bits;
    };

    // C1_APB4ENR @ offset=0x00000154
    union {
        __IO uint32_t c1_apb4enr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t syscfgen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t lpuart1en_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t spi6en_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t i2c4en_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lptim2en_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim3en_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim4en_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim5en_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t comp12en_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vrefen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtcapben_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t sai4en_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 10;
        } c1_apb4enr_bits;
    };

    __IO uint8_t reserved10[4];

    // C1_AHB3LPENR @ offset=0x0000015C
    union {
        __IO uint32_t c1_ahb3lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t mdmalpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dma2dlpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t jpgdeclpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t flitflpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t fmclpen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t qspilpen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t sdmmc1lpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 11;
            __IO uint32_t d1dtcm1lpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtcm2lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t itcmlpen_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t axisramlpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } c1_ahb3lpenr_bits;
    };

    // C1_AHB1LPENR @ offset=0x00000160
    union {
        __IO uint32_t c1_ahb1lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t dma1lpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dma2lpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t adc12lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 9;
            __IO uint32_t eth1maclpen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1txlpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eth1rxlpen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t usb1otglpen_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb1ulpilpen_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2otglpen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usb2ulpilpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 3;
        } c1_ahb1lpenr_bits;
    };

    // C1_AHB2LPENR @ offset=0x00000164
    union {
        __IO uint32_t c1_ahb2lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t camitflpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t cryptlpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hashlpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t sdmmc2lpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rnglpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 18;
            __IO uint32_t sram1lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram2lpen_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram3lpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } c1_ahb2lpenr_bits;
    };

    // C1_AHB4LPENR @ offset=0x00000168
    union {
        __IO uint32_t c1_ahb4lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t gpioalpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioblpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioclpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiodlpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioelpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioflpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioglpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiohlpen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioilpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpiojlpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gpioklpen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 8;
            __IO uint32_t crclpen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bdmalpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t adc3lpen_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t bkpramlpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sram4lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 2;
        } c1_ahb4lpenr_bits;
    };

    // C1_APB3LPENR @ offset=0x0000016C
    union {
        __IO uint32_t c1_apb3lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t ltdclpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t wwdg1lpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 25;
        } c1_apb3lpenr_bits;
    };

    // C1_APB1LLPENR @ offset=0x00000170
    union {
        __IO uint32_t c1_apb1llpenr_reg;

        // bit fields
        struct {
            __IO uint32_t tim2lpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim3lpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim4lpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim5lpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim6lpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim7lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim12lpen_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim13lpen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim14lpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim1lpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t spi2lpen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi3lpen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spdifrxlpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart2lpen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart3lpen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart4lpen_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uart5lpen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c1lpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c2lpen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c3lpen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t hdmiceclpen_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t dac12lpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart7lpen_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart8lpen_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } c1_apb1llpenr_bits;
    };

    // C1_APB1HLPENR @ offset=0x00000174
    union {
        __IO uint32_t c1_apb1hlpenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t crslpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swplpen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t opamplpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mdioslpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t fdcanlpen_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 23;
        } c1_apb1hlpenr_bits;
    };

    // C1_APB2LPENR @ offset=0x00000178
    union {
        __IO uint32_t c1_apb2lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t tim1lpen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim8lpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t usart1lpen_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t usart6lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 6;
            __IO uint32_t spi1lpen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spi4lpen_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t tim15lpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim16lpen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tim17lpen_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t spi5lpen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t sai1lpen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai2lpen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sai3lpen_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dfsdm1lpen_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hrtimlpen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 2;
        } c1_apb2lpenr_bits;
    };

    // C1_APB4LPENR @ offset=0x0000017C
    union {
        __IO uint32_t c1_apb4lpenr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 1;
            __IO uint32_t syscfglpen_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t lpuart1lpen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t spi6lpen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t i2c4lpen_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 1;
            __IO uint32_t lptim2lpen_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim3lpen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim4lpen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lptim5lpen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t comp12lpen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vreflpen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtcapblpen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 4;
            __IO uint32_t sai4lpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 10;
        } c1_apb4lpenr_bits;
    };

} rcc_t;

// Peripheral RNG @ base_addess=0x48021800
typedef struct rng_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t rngen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ced_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 26;
        } cr_bits;
    };

    // SR @ offset=0x00000004
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t drdy_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cecs_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t secs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t ceis_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t seis_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } sr_bits;
    };

    // DR @ offset=0x00000008
    __IO uint32_t dr_reg;

} rng_t;

// Peripheral RTC @ base_addess=0x58004000
typedef struct rtc_t {

    // RTC_TR @ offset=0x00000000
    union {
        __IO uint32_t rtc_tr_reg;

        // bit fields
        struct {
            __IO uint32_t su_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t st_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t mnu_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t mnt_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t hu_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t ht_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pm_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6 : 9;
        } rtc_tr_bits;
    };

    // RTC_DR @ offset=0x00000004
    union {
        __IO uint32_t rtc_dr_reg;

        // bit fields
        struct {
            __IO uint32_t du_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dt_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t mu_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t mt_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wdu_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t yu_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t yt_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 11;
        } rtc_dr_bits;
    };

    // RTC_CR @ offset=0x00000008
    union {
        __IO uint32_t rtc_cr_reg;

        // bit fields
        struct {
            __IO uint32_t wucksel_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t tsedge_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t refckon_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bypshad_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fmt_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t alrae_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alrbe_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wute_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tse_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alraie_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alrbie_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wutie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsie_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t add1h_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sub1h_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bkp_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cosel_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pol_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t osel_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t coe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t itse_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } rtc_cr_bits;
    };

    // RTC_ISR @ offset=0x0000000C
    union {
        __IO uint32_t rtc_isr_reg;

        // bit fields
        struct {
            __IO uint32_t alrawf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t alrbwf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wutwf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t shpf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t inits_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rsf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t initf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t init_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alraf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t alrbf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wutf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tsovf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp1f_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp2f_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp3f_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t recalpf_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t itsf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 14;
        } rtc_isr_bits;
    };

    // RTC_PRER @ offset=0x00000010
    union {
        __IO uint32_t rtc_prer_reg;

        // bit fields
        struct {
            __IO uint32_t prediv_s_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t prediv_a_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } rtc_prer_bits;
    };

    // RTC_WUTR @ offset=0x00000014
    __IO uint32_t rtc_wutr_reg;

    __IO uint8_t reserved0[4];

    // RTC_ALRMAR @ offset=0x0000001C
    union {
        __IO uint32_t rtc_alrmar_reg;

        // bit fields
        struct {
            __IO uint32_t su_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t st_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t msk1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mnu_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t mnt_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t msk2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hu_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t ht_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pm_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msk3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t du_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dt_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t wdsel_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msk4_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } rtc_alrmar_bits;
    };

    // RTC_ALRMBR @ offset=0x00000020
    union {
        __IO uint32_t rtc_alrmbr_reg;

        // bit fields
        struct {
            __IO uint32_t su_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t st_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t msk1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mnu_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t mnt_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t msk2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hu_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t ht_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t pm_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msk3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t du_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dt_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7: 1;
            __IO uint32_t wdsel_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msk4_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } rtc_alrmbr_bits;
    };

    // RTC_WPR @ offset=0x00000024
    __IO uint32_t rtc_wpr_reg;

    // RTC_SSR @ offset=0x00000028
    __IO uint32_t rtc_ssr_reg;

    // RTC_SHIFTR @ offset=0x0000002C
    union {
        __IO uint32_t rtc_shiftr_reg;

        // bit fields
        struct {
            __IO uint32_t subfs_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 30;
            __IO uint32_t add1s_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } rtc_shiftr_bits;
    };

    // RTC_TSTR @ offset=0x00000030
    union {
        __IO uint32_t rtc_tstr_reg;

        // bit fields
        struct {
            __IO uint32_t su_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t st_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t mnu_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 3;
            __IO uint32_t mnt_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3: 3;
            __IO uint32_t hu_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved4: 3;
            __IO uint32_t ht_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved5: 1;
            __IO uint32_t pm_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved6 : 9;
        } rtc_tstr_bits;
    };

    // RTC_TSDR @ offset=0x00000034
    union {
        __IO uint32_t rtc_tsdr_reg;

        // bit fields
        struct {
            __IO uint32_t du_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t dt_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 3;
            __IO uint32_t mu_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2: 3;
            __IO uint32_t mt_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wdu_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved3 : 18;
        } rtc_tsdr_bits;
    };

    // RTC_TSSSR @ offset=0x00000038
    __IO uint32_t rtc_tsssr_reg;

    // RTC_CALR @ offset=0x0000003C
    union {
        __IO uint32_t rtc_calr_reg;

        // bit fields
        struct {
            __IO uint32_t calm_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 12;
            __IO uint32_t calw16_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t calw8_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t calp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } rtc_calr_bits;
    };

    // RTC_TAMPCR @ offset=0x00000040
    union {
        __IO uint32_t rtc_tampcr_reg;

        // bit fields
        struct {
            __IO uint32_t tamp1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp1trg_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tampie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp2e_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp2trg_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp3e_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp3trg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tampts_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tampfreq_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t tampflt_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t tampprch_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t tamppudis_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp1ie_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp1noerase_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp1mf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp2ie_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp2noerase_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp2mf_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp3ie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp3noerase_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tamp3mf_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } rtc_tampcr_bits;
    };

    // RTC_ALRMASSR @ offset=0x00000044
    union {
        __IO uint32_t rtc_alrmassr_reg;

        // bit fields
        struct {
            __IO uint32_t ss_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 23;
            __IO uint32_t maskss_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 7;
        } rtc_alrmassr_bits;
    };

    // RTC_ALRMBSSR @ offset=0x00000048
    union {
        __IO uint32_t rtc_alrmbssr_reg;

        // bit fields
        struct {
            __IO uint32_t ss_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 23;
            __IO uint32_t maskss_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 7;
        } rtc_alrmbssr_bits;
    };

    // RTC_OR @ offset=0x0000004C
    union {
        __IO uint32_t rtc_or_reg;

        // bit fields
        struct {
            __IO uint32_t rtc_alarm_type_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtc_out_rmp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } rtc_or_bits;
    };

    // RTC_BKP0R @ offset=0x00000050
    __IO uint32_t rtc_bkp0r_reg;

    // RTC_BKP1R @ offset=0x00000054
    __IO uint32_t rtc_bkp1r_reg;

    // RTC_BKP2R @ offset=0x00000058
    __IO uint32_t rtc_bkp2r_reg;

    // RTC_BKP3R @ offset=0x0000005C
    __IO uint32_t rtc_bkp3r_reg;

    // RTC_BKP4R @ offset=0x00000060
    __IO uint32_t rtc_bkp4r_reg;

    // RTC_BKP5R @ offset=0x00000064
    __IO uint32_t rtc_bkp5r_reg;

    // RTC_BKP6R @ offset=0x00000068
    __IO uint32_t rtc_bkp6r_reg;

    // RTC_BKP7R @ offset=0x0000006C
    __IO uint32_t rtc_bkp7r_reg;

    // RTC_BKP8R @ offset=0x00000070
    __IO uint32_t rtc_bkp8r_reg;

    // RTC_BKP9R @ offset=0x00000074
    __IO uint32_t rtc_bkp9r_reg;

    // RTC_BKP10R @ offset=0x00000078
    __IO uint32_t rtc_bkp10r_reg;

    // RTC_BKP11R @ offset=0x0000007C
    __IO uint32_t rtc_bkp11r_reg;

    // RTC_BKP12R @ offset=0x00000080
    __IO uint32_t rtc_bkp12r_reg;

    // RTC_BKP13R @ offset=0x00000084
    __IO uint32_t rtc_bkp13r_reg;

    // RTC_BKP14R @ offset=0x00000088
    __IO uint32_t rtc_bkp14r_reg;

    // RTC_BKP15R @ offset=0x0000008C
    __IO uint32_t rtc_bkp15r_reg;

    // RTC_BKP16R @ offset=0x00000090
    __IO uint32_t rtc_bkp16r_reg;

    // RTC_BKP17R @ offset=0x00000094
    __IO uint32_t rtc_bkp17r_reg;

    // RTC_BKP18R @ offset=0x00000098
    __IO uint32_t rtc_bkp18r_reg;

    // RTC_BKP19R @ offset=0x0000009C
    __IO uint32_t rtc_bkp19r_reg;

    // RTC_BKP20R @ offset=0x000000A0
    __IO uint32_t rtc_bkp20r_reg;

    // RTC_BKP21R @ offset=0x000000A4
    __IO uint32_t rtc_bkp21r_reg;

    // RTC_BKP22R @ offset=0x000000A8
    __IO uint32_t rtc_bkp22r_reg;

    // RTC_BKP23R @ offset=0x000000AC
    __IO uint32_t rtc_bkp23r_reg;

    // RTC_BKP24R @ offset=0x000000B0
    __IO uint32_t rtc_bkp24r_reg;

    // RTC_BKP25R @ offset=0x000000B4
    __IO uint32_t rtc_bkp25r_reg;

    // RTC_BKP26R @ offset=0x000000B8
    __IO uint32_t rtc_bkp26r_reg;

    // RTC_BKP27R @ offset=0x000000BC
    __IO uint32_t rtc_bkp27r_reg;

    // RTC_BKP28R @ offset=0x000000C0
    __IO uint32_t rtc_bkp28r_reg;

    // RTC_BKP29R @ offset=0x000000C4
    __IO uint32_t rtc_bkp29r_reg;

    // RTC_BKP30R @ offset=0x000000C8
    __IO uint32_t rtc_bkp30r_reg;

    // RTC_BKP31R @ offset=0x000000CC
    __IO uint32_t rtc_bkp31r_reg;

} rtc_t;

// Peripheral SAI1 @ base_addess=0x40015800
typedef struct sai1_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t sai_gcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t syncout_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncin_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } sai_gcr_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t sai_acr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_acr1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t sai_acr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_acr2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t sai_afrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_afrcr_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t sai_aslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_aslotr_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t sai_aim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_aim_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t sai_asr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_asr_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t sai_aclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_aclrfr_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t sai_adr_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t sai_bcr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_bcr1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t sai_bcr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_bcr2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t sai_bfrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_bfrcr_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t sai_bslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_bslotr_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t sai_bim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_bim_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t sai_bsr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_bsr_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t sai_bclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_bclrfr_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t sai_bdr_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t sai_pdmcr_reg;

        // bit fields
        struct {
            __IO uint32_t pdmen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t micnbr_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cken1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } sai_pdmcr_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t sai_pdmdly_reg;

        // bit fields
        struct {
            __IO uint32_t dlym1l_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dlym1r_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t dlym2l_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t dlym2r_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t dlym3l_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dlym3r_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dlym4l_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dlym4r_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } sai_pdmdly_bits;
    };

} sai1_t;

// Peripheral SAI2 @ base_addess=0x40015C00
typedef struct sai2_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t sai_gcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t syncout_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncin_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } sai_gcr_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t sai_acr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_acr1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t sai_acr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_acr2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t sai_afrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_afrcr_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t sai_aslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_aslotr_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t sai_aim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_aim_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t sai_asr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_asr_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t sai_aclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_aclrfr_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t sai_adr_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t sai_bcr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_bcr1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t sai_bcr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_bcr2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t sai_bfrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_bfrcr_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t sai_bslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_bslotr_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t sai_bim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_bim_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t sai_bsr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_bsr_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t sai_bclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_bclrfr_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t sai_bdr_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t sai_pdmcr_reg;

        // bit fields
        struct {
            __IO uint32_t pdmen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t micnbr_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cken1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } sai_pdmcr_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t sai_pdmdly_reg;

        // bit fields
        struct {
            __IO uint32_t dlym1l_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dlym1r_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t dlym2l_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t dlym2r_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t dlym3l_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dlym3r_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dlym4l_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dlym4r_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } sai_pdmdly_bits;
    };

} sai2_t;

// Peripheral SAI3 @ base_addess=0x40016000
typedef struct sai3_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t sai_gcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t syncout_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncin_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } sai_gcr_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t sai_acr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_acr1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t sai_acr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_acr2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t sai_afrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_afrcr_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t sai_aslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_aslotr_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t sai_aim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_aim_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t sai_asr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_asr_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t sai_aclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_aclrfr_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t sai_adr_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t sai_bcr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_bcr1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t sai_bcr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_bcr2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t sai_bfrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_bfrcr_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t sai_bslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_bslotr_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t sai_bim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_bim_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t sai_bsr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_bsr_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t sai_bclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_bclrfr_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t sai_bdr_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t sai_pdmcr_reg;

        // bit fields
        struct {
            __IO uint32_t pdmen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t micnbr_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cken1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } sai_pdmcr_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t sai_pdmdly_reg;

        // bit fields
        struct {
            __IO uint32_t dlym1l_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dlym1r_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t dlym2l_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t dlym2r_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t dlym3l_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dlym3r_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dlym4l_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dlym4r_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } sai_pdmdly_bits;
    };

} sai3_t;

// Peripheral SAI4 @ base_addess=0x58005400
typedef struct sai4_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t sai_gcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t syncout_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncin_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } sai_gcr_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t sai_acr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_acr1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t sai_acr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_acr2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t sai_afrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_afrcr_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t sai_aslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_aslotr_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t sai_aim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_aim_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t sai_asr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_asr_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t sai_aclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_aclrfr_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t sai_adr_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t sai_bcr1_reg;

        // bit fields
        struct {
            __IO uint32_t mode_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t prtcfg_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ds_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t lsbfirst_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstr_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncen_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t mono_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t outdriv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 2;
            __IO uint32_t saixen_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmaen_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 1;
            __IO uint32_t nomck_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mckdiv_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 5;
            __IO uint32_t osr_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 5;
        } sai_bcr1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t sai_bcr2_reg;

        // bit fields
        struct {
            __IO uint32_t fth_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t fflush_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tris_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mute_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t muteval_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutecnt_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 5;
            __IO uint32_t cpl_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comp_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } sai_bcr2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t sai_bfrcr_reg;

        // bit fields
        struct {
            __IO uint32_t frl_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t fsall_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t fsdef_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fspol_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fsoff_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 13;
        } sai_bfrcr_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t sai_bslotr_reg;

        // bit fields
        struct {
            __IO uint32_t fboff_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t slotsz_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t nbslot_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t sloten_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 15;
        } sai_bslotr_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t sai_bim_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudrie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mutedetie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wckcfgie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t freqie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cnrdyie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t afsdetie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lfsdetie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } sai_bim_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t sai_bsr_reg;

        // bit fields
        struct {
            __IO uint32_t ovrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t mutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t freq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t afsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 9;
            __IO uint32_t flvl_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sai_bsr_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t sai_bclrfr_reg;

        // bit fields
        struct {
            __IO uint32_t covrudr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmutedet_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cwckcfg_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccnrdy_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cafsdet_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t clfsdet_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 25;
        } sai_bclrfr_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t sai_bdr_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t sai_pdmcr_reg;

        // bit fields
        struct {
            __IO uint32_t pdmen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t micnbr_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t cken1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cken4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } sai_pdmcr_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t sai_pdmdly_reg;

        // bit fields
        struct {
            __IO uint32_t dlym1l_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t dlym1r_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t dlym2l_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t dlym2r_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t dlym3l_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t dlym3r_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5: 3;
            __IO uint32_t dlym4l_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved6: 3;
            __IO uint32_t dlym4r_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved7 : 3;
        } sai_pdmdly_bits;
    };

} sai4_t;

// Peripheral SDMMC1 @ base_addess=0x52007000
typedef struct sdmmc1_t {

    // POWER @ offset=0x00000000
    union {
        __IO uint32_t power_reg;

        // bit fields
        struct {
            __IO uint32_t pwrctrl_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t vswitch_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswitchen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dirpol_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } power_bits;
    };

    // CLKCR @ offset=0x00000004
    union {
        __IO uint32_t clkcr_reg;

        // bit fields
        struct {
            __IO uint32_t clkdiv_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t pwrsav_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t widbus_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t negedge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hwfc_en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddr_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t busspeed_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t selclkrx_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } clkcr_bits;
    };

    // ARGR @ offset=0x00000008
    __IO uint32_t argr_reg;

    // CMDR @ offset=0x0000000C
    union {
        __IO uint32_t cmdr_reg;

        // bit fields
        struct {
            __IO uint32_t cmdindex_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t cmdtrans_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdstop_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitresp_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t waitint_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitpend_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpsmen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dthold_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bootmode_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t booten_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdsuspend_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } cmdr_bits;
    };

    // RESPCMDR @ offset=0x00000010
    __IO uint32_t respcmdr_reg;

    // RESP1R @ offset=0x00000014
    __IO uint32_t resp1r_reg;

    // RESP2R @ offset=0x00000018
    __IO uint32_t resp2r_reg;

    // RESP3R @ offset=0x0000001C
    __IO uint32_t resp3r_reg;

    // RESP4R @ offset=0x00000020
    __IO uint32_t resp4r_reg;

    // DTIMER @ offset=0x00000024
    __IO uint32_t dtimer_reg;

    // DLENR @ offset=0x00000028
    __IO uint32_t dlenr_reg;

    // DCTRL @ offset=0x0000002C
    union {
        __IO uint32_t dctrl_reg;

        // bit fields
        struct {
            __IO uint32_t dten_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtdir_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtmode_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dblocksize_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t rwstart_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwstop_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwmod_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdioen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bootacken_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fiforst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 18;
        } dctrl_bits;
    };

    // DCNTR @ offset=0x00000030
    __IO uint32_t dcntr_reg;

    // STAR @ offset=0x00000034
    union {
        __IO uint32_t star_reg;

        // bit fields
        struct {
            __IO uint32_t ccrcfail_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dcrcfail_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctimeout_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dtimeout_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txunderr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxoverr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmdrend_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmdsent_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dataend_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dhold_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dbckend_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dabort_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dpsmact_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpsmact_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifohe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxfifohf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifof_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxfifof_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoe_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxfifoe_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busyd0_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busyd0end_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sdioit_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ackfail_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t acktimeout_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vswend_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ckstop_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idmate_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idmabtc_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 3;
        } star_bits;
    };

    // ICR @ offset=0x00000038
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t ccrcfailc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcrcfailc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctimeoutc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtimeoutc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txunderrc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxoverrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdrendc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdsentc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dataendc_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dholdc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbckendc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dabortc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 9;
            __IO uint32_t busyd0endc_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdioitc_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackfailc_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t acktimeoutc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswendc_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstopc_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmatec_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmabtcc_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } icr_bits;
    };

    // MASKR @ offset=0x0000003C
    union {
        __IO uint32_t maskr_reg;

        // bit fields
        struct {
            __IO uint32_t ccrcfailie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcrcfailie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctimeoutie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtimeoutie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txunderrie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxoverrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdrendie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdsentie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dataendie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dholdie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbckendie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dabortie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t txfifoheie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxfifohfie_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t rxfifofie_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfifoeie_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t busyd0endie_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdioitie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackfailie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t acktimeoutie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswendie_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstopie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t idmabtcie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } maskr_bits;
    };

    // ACKTIMER @ offset=0x00000040
    __IO uint32_t acktimer_reg;

    __IO uint8_t reserved0[12];

    // IDMACTRLR @ offset=0x00000050
    union {
        __IO uint32_t idmactrlr_reg;

        // bit fields
        struct {
            __IO uint32_t idmaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmabmode_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmabact_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } idmactrlr_bits;
    };

    // IDMABSIZER @ offset=0x00000054
    __IO uint32_t idmabsizer_reg;

    // IDMABASE0R @ offset=0x00000058
    __IO uint32_t idmabase0r_reg;

    // IDMABASE1R @ offset=0x0000005C
    __IO uint32_t idmabase1r_reg;

    __IO uint8_t reserved1[32];

    // FIFOR @ offset=0x00000080
    __IO uint32_t fifor_reg;

    __IO uint8_t reserved2[880];

    // VER @ offset=0x000003F4
    union {
        __IO uint32_t ver_reg;

        // bit fields
        struct {
            __IO uint32_t minrev_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t majrev_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } ver_bits;
    };

    // ID @ offset=0x000003F8
    __IO uint32_t id_reg;

} sdmmc1_t;

// Peripheral SDMMC2 @ base_addess=0x48022400
typedef struct sdmmc2_t {

    // POWER @ offset=0x00000000
    union {
        __IO uint32_t power_reg;

        // bit fields
        struct {
            __IO uint32_t pwrctrl_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t vswitch_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswitchen_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dirpol_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } power_bits;
    };

    // CLKCR @ offset=0x00000004
    union {
        __IO uint32_t clkcr_reg;

        // bit fields
        struct {
            __IO uint32_t clkdiv_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t pwrsav_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t widbus_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t negedge_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hwfc_en_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddr_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t busspeed_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t selclkrx_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 11;
        } clkcr_bits;
    };

    // ARGR @ offset=0x00000008
    __IO uint32_t argr_reg;

    // CMDR @ offset=0x0000000C
    union {
        __IO uint32_t cmdr_reg;

        // bit fields
        struct {
            __IO uint32_t cmdindex_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t cmdtrans_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdstop_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitresp_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t waitint_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t waitpend_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpsmen_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dthold_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bootmode_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t booten_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdsuspend_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } cmdr_bits;
    };

    // RESPCMDR @ offset=0x00000010
    __IO uint32_t respcmdr_reg;

    // RESP1R @ offset=0x00000014
    __IO uint32_t resp1r_reg;

    // RESP2R @ offset=0x00000018
    __IO uint32_t resp2r_reg;

    // RESP3R @ offset=0x0000001C
    __IO uint32_t resp3r_reg;

    // RESP4R @ offset=0x00000020
    __IO uint32_t resp4r_reg;

    // DTIMER @ offset=0x00000024
    __IO uint32_t dtimer_reg;

    // DLENR @ offset=0x00000028
    __IO uint32_t dlenr_reg;

    // DCTRL @ offset=0x0000002C
    union {
        __IO uint32_t dctrl_reg;

        // bit fields
        struct {
            __IO uint32_t dten_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtdir_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtmode_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t dblocksize_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 3;
            __IO uint32_t rwstart_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwstop_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rwmod_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdioen_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bootacken_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fiforst_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 18;
        } dctrl_bits;
    };

    // DCNTR @ offset=0x00000030
    __IO uint32_t dcntr_reg;

    // STAR @ offset=0x00000034
    union {
        __IO uint32_t star_reg;

        // bit fields
        struct {
            __IO uint32_t ccrcfail_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dcrcfail_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctimeout_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dtimeout_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txunderr_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxoverr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmdrend_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmdsent_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dataend_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dhold_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dbckend_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dabort_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dpsmact_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cpsmact_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifohe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxfifohf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifof_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxfifof_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfifoe_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxfifoe_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busyd0_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busyd0end_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sdioit_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ackfail_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t acktimeout_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vswend_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ckstop_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idmate_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idmabtc_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 3;
        } star_bits;
    };

    // ICR @ offset=0x00000038
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t ccrcfailc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcrcfailc_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctimeoutc_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtimeoutc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txunderrc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxoverrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdrendc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdsentc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dataendc_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dholdc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbckendc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dabortc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 9;
            __IO uint32_t busyd0endc_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdioitc_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackfailc_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t acktimeoutc_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswendc_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstopc_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmatec_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmabtcc_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } icr_bits;
    };

    // MASKR @ offset=0x0000003C
    union {
        __IO uint32_t maskr_reg;

        // bit fields
        struct {
            __IO uint32_t ccrcfailie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dcrcfailie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctimeoutie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtimeoutie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txunderrie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxoverrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdrendie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmdsentie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dataendie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dholdie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dbckendie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dabortie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t txfifoheie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxfifohfie_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t rxfifofie_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfifoeie_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t busyd0endie_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sdioitie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ackfailie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t acktimeoutie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vswendie_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckstopie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t idmabtcie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 3;
        } maskr_bits;
    };

    // ACKTIMER @ offset=0x00000040
    __IO uint32_t acktimer_reg;

    __IO uint8_t reserved0[12];

    // IDMACTRLR @ offset=0x00000050
    union {
        __IO uint32_t idmactrlr_reg;

        // bit fields
        struct {
            __IO uint32_t idmaen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmabmode_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idmabact_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 29;
        } idmactrlr_bits;
    };

    // IDMABSIZER @ offset=0x00000054
    __IO uint32_t idmabsizer_reg;

    // IDMABASE0R @ offset=0x00000058
    __IO uint32_t idmabase0r_reg;

    // IDMABASE1R @ offset=0x0000005C
    __IO uint32_t idmabase1r_reg;

    __IO uint8_t reserved1[32];

    // FIFOR @ offset=0x00000080
    __IO uint32_t fifor_reg;

    __IO uint8_t reserved2[880];

    // VER @ offset=0x000003F4
    union {
        __IO uint32_t ver_reg;

        // bit fields
        struct {
            __IO uint32_t minrev_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t majrev_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } ver_bits;
    };

    // ID @ offset=0x000003F8
    __IO uint32_t id_reg;

} sdmmc2_t;

// Peripheral SPDIFRX @ base_addess=0x40004000
typedef struct spdifrx_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t spdifrxen_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t rxdmaen_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxsteo_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t drfmt_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t pmsk_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t vmsk_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cumsk_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ptmsk_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cbdmaen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chsel_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nbtr_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 1;
            __IO uint32_t wfa_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t insel_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t cksen_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cksbkpen_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 10;
        } cr_bits;
    };

    // IMR @ offset=0x00000004
    union {
        __IO uint32_t imr_reg;

        // bit fields
        struct {
            __IO uint32_t rxneie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csrneie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t perrie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sblkie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t syncdie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ifeie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 25;
        } imr_bits;
    };

    // SR @ offset=0x00000008
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t rxne_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t csrne_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t perr_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbd_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t syncd_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ferr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t serr_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t terr_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 7;
            __IO uint32_t width5_bit : 15; // bit offset=16  bit width=15  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } sr_bits;
    };

    // IFCR @ offset=0x0000000C
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t perrcf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrcf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbdcf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t syncdcf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 26;
        } ifcr_bits;
    };

    union {
        // DR_00 @ offset=0x00000010
        union {
            __IO uint32_t dr_00_reg;

            // bit fields
            struct {
                __IO uint32_t dr_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 23;
                __IO uint32_t pe_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t v_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t u_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t c_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t pt_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1 : 3;
            } dr_00_bits;
        };

        // DR_01 @ offset=0x00000010
        union {
            __IO uint32_t dr_01_reg;

            // bit fields
            struct {
                __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t v_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t u_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t c_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t pt_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 3;
                __IO uint32_t dr_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1 : 23;
            } dr_01_bits;
        };

        // DR_10 @ offset=0x00000010
        union {
            __IO uint32_t dr_10_reg;

            // bit fields
            struct {
                __IO uint32_t drnl1_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved0: 15;
                __IO uint32_t drnl2_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
                __IO uint32_t reserved1 : 15;
            } dr_10_bits;
        };

    };

    // CSR @ offset=0x00000014
    union {
        __IO uint32_t csr_reg;

        // bit fields
        struct {
            __IO uint32_t usr_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t cs_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1: 7;
            __IO uint32_t sob_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved2 : 7;
        } csr_bits;
    };

    // DIR @ offset=0x00000018
    union {
        __IO uint32_t dir_reg;

        // bit fields
        struct {
            __IO uint32_t thi_bit : 13; // bit offset=0  bit width=13  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t tlo_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } dir_bits;
    };

    __IO uint8_t reserved0[976];

    // VERR @ offset=0x000003F4
    union {
        __IO uint32_t verr_reg;

        // bit fields
        struct {
            __IO uint32_t minrev_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t majrev_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } verr_bits;
    };

    // IDR @ offset=0x000003F8
    __IO uint32_t idr_reg;

    // SIDR @ offset=0x000003FC
    __IO uint32_t sidr_reg;

} spdifrx_t;

// Peripheral SPI1 @ base_addess=0x40013000
typedef struct spi1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t iolock_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcrci_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcrci_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssi_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hddir_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cstart_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t masrx_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tser_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsize_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cr2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t cfg1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t mbr_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrdet_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrcfg_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthvl_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t dsize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
        } cfg1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t cfg2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t afcntr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssom_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssoe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssiop_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssm_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsbfrst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t master_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sp_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t comm_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ioswp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t midi_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t mssi_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
        } cfg2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t tserfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t modfie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tifreie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crceie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txtfie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eotie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dpxpie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxpie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ctsize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxwne_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxplvl_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t txc_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tserf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tifre_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t crce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txtf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eot_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dxp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t suspc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tserfc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t modfc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tifrec_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crcec_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txtfc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eotc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 12;
        } ifcr_bits;
    };

    __IO uint8_t reserved0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t txdr_reg;

    __IO uint8_t reserved1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t rxdr_reg;

    __IO uint8_t reserved2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t crcpoly_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t txcrc_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t rxcrc_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t udrdr_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t cgfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t mckoe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odd_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t datfmt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wsinv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fixch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chlen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datlen_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcmsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sstd_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2scfg_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2smod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cgfr_bits;
    };

} spi1_t;

// Peripheral SPI2 @ base_addess=0x40003800
typedef struct spi2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t iolock_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcrci_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcrci_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssi_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hddir_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cstart_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t masrx_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tser_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsize_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cr2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t cfg1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t mbr_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrdet_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrcfg_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthvl_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t dsize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
        } cfg1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t cfg2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t afcntr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssom_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssoe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssiop_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssm_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsbfrst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t master_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sp_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t comm_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ioswp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t midi_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t mssi_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
        } cfg2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t tserfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t modfie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tifreie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crceie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txtfie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eotie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dpxpie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxpie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ctsize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxwne_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxplvl_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t txc_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tserf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tifre_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t crce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txtf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eot_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dxp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t suspc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tserfc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t modfc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tifrec_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crcec_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txtfc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eotc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 12;
        } ifcr_bits;
    };

    __IO uint8_t reserved0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t txdr_reg;

    __IO uint8_t reserved1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t rxdr_reg;

    __IO uint8_t reserved2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t crcpoly_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t txcrc_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t rxcrc_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t udrdr_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t cgfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t mckoe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odd_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t datfmt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wsinv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fixch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chlen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datlen_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcmsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sstd_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2scfg_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2smod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cgfr_bits;
    };

} spi2_t;

// Peripheral SPI3 @ base_addess=0x40003C00
typedef struct spi3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t iolock_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcrci_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcrci_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssi_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hddir_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cstart_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t masrx_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tser_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsize_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cr2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t cfg1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t mbr_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrdet_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrcfg_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthvl_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t dsize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
        } cfg1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t cfg2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t afcntr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssom_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssoe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssiop_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssm_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsbfrst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t master_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sp_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t comm_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ioswp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t midi_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t mssi_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
        } cfg2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t tserfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t modfie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tifreie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crceie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txtfie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eotie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dpxpie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxpie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ctsize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxwne_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxplvl_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t txc_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tserf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tifre_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t crce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txtf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eot_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dxp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t suspc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tserfc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t modfc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tifrec_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crcec_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txtfc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eotc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 12;
        } ifcr_bits;
    };

    __IO uint8_t reserved0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t txdr_reg;

    __IO uint8_t reserved1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t rxdr_reg;

    __IO uint8_t reserved2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t crcpoly_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t txcrc_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t rxcrc_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t udrdr_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t cgfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t mckoe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odd_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t datfmt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wsinv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fixch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chlen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datlen_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcmsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sstd_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2scfg_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2smod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cgfr_bits;
    };

} spi3_t;

// Peripheral SPI4 @ base_addess=0x40013400
typedef struct spi4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t iolock_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcrci_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcrci_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssi_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hddir_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cstart_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t masrx_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tser_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsize_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cr2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t cfg1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t mbr_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrdet_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrcfg_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthvl_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t dsize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
        } cfg1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t cfg2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t afcntr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssom_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssoe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssiop_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssm_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsbfrst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t master_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sp_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t comm_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ioswp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t midi_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t mssi_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
        } cfg2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t tserfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t modfie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tifreie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crceie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txtfie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eotie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dpxpie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxpie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ctsize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxwne_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxplvl_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t txc_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tserf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tifre_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t crce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txtf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eot_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dxp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t suspc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tserfc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t modfc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tifrec_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crcec_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txtfc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eotc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 12;
        } ifcr_bits;
    };

    __IO uint8_t reserved0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t txdr_reg;

    __IO uint8_t reserved1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t rxdr_reg;

    __IO uint8_t reserved2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t crcpoly_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t txcrc_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t rxcrc_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t udrdr_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t cgfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t mckoe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odd_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t datfmt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wsinv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fixch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chlen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datlen_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcmsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sstd_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2scfg_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2smod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cgfr_bits;
    };

} spi4_t;

// Peripheral SPI5 @ base_addess=0x40015000
typedef struct spi5_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t iolock_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcrci_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcrci_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssi_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hddir_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cstart_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t masrx_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tser_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsize_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cr2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t cfg1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t mbr_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrdet_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrcfg_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthvl_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t dsize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
        } cfg1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t cfg2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t afcntr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssom_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssoe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssiop_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssm_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsbfrst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t master_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sp_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t comm_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ioswp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t midi_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t mssi_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
        } cfg2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t tserfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t modfie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tifreie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crceie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txtfie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eotie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dpxpie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxpie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ctsize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxwne_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxplvl_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t txc_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tserf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tifre_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t crce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txtf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eot_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dxp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t suspc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tserfc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t modfc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tifrec_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crcec_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txtfc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eotc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 12;
        } ifcr_bits;
    };

    __IO uint8_t reserved0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t txdr_reg;

    __IO uint8_t reserved1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t rxdr_reg;

    __IO uint8_t reserved2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t crcpoly_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t txcrc_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t rxcrc_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t udrdr_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t cgfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t mckoe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odd_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t datfmt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wsinv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fixch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chlen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datlen_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcmsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sstd_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2scfg_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2smod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cgfr_bits;
    };

} spi5_t;

// Peripheral SPI6 @ base_addess=0x58001400
typedef struct spi6_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t iolock_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcrci_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rcrci_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crc33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssi_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hddir_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t csusp_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cstart_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t masrx_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t spe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t tser_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t tsize_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } cr2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t cfg1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t mbr_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcen_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crcsize_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdmaen_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxdmaen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrdet_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrcfg_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t fthvl_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t dsize_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
        } cfg1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t cfg2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t afcntr_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssom_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssoe_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssiop_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ssm_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lsbfrst_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t master_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sp_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t comm_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ioswp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t midi_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t mssi_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
        } cfg2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t tserfie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t modfie_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tifreie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t crceie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udrie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txtfie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eotie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dpxpie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txpie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxpie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 11;
        } ier_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ctsize_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxwne_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxplvl_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t txc_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tserf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t modf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tifre_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t crce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ovr_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txtf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eot_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t dxp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } sr_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t ifcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t suspc_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tserfc_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t modfc_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tifrec_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crcec_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ovrc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrc_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txtfc_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eotc_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 12;
        } ifcr_bits;
    };

    __IO uint8_t reserved0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t txdr_reg;

    __IO uint8_t reserved1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t rxdr_reg;

    __IO uint8_t reserved2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t crcpoly_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t txcrc_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t rxcrc_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t udrdr_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t cgfr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 25;
            __IO uint32_t mckoe_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t odd_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sdiv_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t datfmt_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wsinv_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fixch_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckpol_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t chlen_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t datlen_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t pcmsync_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2sstd_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2scfg_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2smod_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cgfr_bits;
    };

} spi6_t;

// Peripheral SWPMI @ base_addess=0x40008800
typedef struct swpmi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t rxdma_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txdma_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxmode_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txmode_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lpbk_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swpact_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 4;
            __IO uint32_t deact_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swpten_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } cr_bits;
    };

    // BRR @ offset=0x00000004
    __IO uint32_t brr_reg;

    __IO uint8_t reserved0[4];

    // ISR @ offset=0x0000000C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t rxbff_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txbef_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxberf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txunrf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcf_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t srf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t susp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t deactf_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rdyf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0 : 20;
        } isr_bits;
    };

    // ICR @ offset=0x00000010
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t crxbff_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctxbef_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crxberf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t crxovrf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctxunrf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0: 2;
            __IO uint32_t ctcf_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t csrf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1: 2;
            __IO uint32_t crdyf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved2 : 20;
        } icr_bits;
    };

    // IER @ offset=0x00000014
    union {
        __IO uint32_t ier_reg;

        // bit fields
        struct {
            __IO uint32_t rxbfie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txbeie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxberie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxovrie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txunrie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t srie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t rdyie_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } ier_bits;
    };

    // RFL @ offset=0x00000018
    __IO uint32_t rfl_reg;

    // TDR @ offset=0x0000001C
    __IO uint32_t tdr_reg;

    // RDR @ offset=0x00000020
    __IO uint32_t rdr_reg;

    // OR @ offset=0x00000024
    union {
        __IO uint32_t or_reg;

        // bit fields
        struct {
            __IO uint32_t swp_tbyp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swp_class_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0 : 30;
        } or_bits;
    };

} swpmi_t;

// Peripheral SYSCFG @ base_addess=0x58000400
typedef struct syscfg_t {

    __IO uint8_t reserved0[4];

    // PMCR @ offset=0x00000004
    union {
        __IO uint32_t pmcr_reg;

        // bit fields
        struct {
            __IO uint32_t i2c1fmp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c2fmp_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c3fmp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t i2c4fmp_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pb6fmp_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pb7fmp_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pb8fmp_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pb9fmp_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t booste_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t boostvddsel_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 11;
            __IO uint32_t epis_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t pa0so_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pa1so_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pc2so_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pc3so_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 4;
        } pmcr_bits;
    };

    // EXTICR1 @ offset=0x00000008
    union {
        __IO uint32_t exticr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t exti3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } exticr1_bits;
    };

    // EXTICR2 @ offset=0x0000000C
    union {
        __IO uint32_t exticr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t exti7_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti6_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti5_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti4_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } exticr2_bits;
    };

    // EXTICR3 @ offset=0x00000010
    union {
        __IO uint32_t exticr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t exti11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } exticr3_bits;
    };

    // EXTICR4 @ offset=0x00000014
    union {
        __IO uint32_t exticr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t exti15_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti14_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti13_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t exti12_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 16;
        } exticr4_bits;
    };

    __IO uint8_t reserved1[8];

    // CCCSR @ offset=0x00000020
    union {
        __IO uint32_t cccsr_reg;

        // bit fields
        struct {
            __IO uint32_t en_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cs_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t ready_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t hslv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } cccsr_bits;
    };

    // CCVR @ offset=0x00000024
    union {
        __IO uint32_t ccvr_reg;

        // bit fields
        struct {
            __IO uint32_t ncv_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 3;
            __IO uint32_t pcv_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 27;
        } ccvr_bits;
    };

    // CCCR @ offset=0x00000028
    union {
        __IO uint32_t cccr_reg;

        // bit fields
        struct {
            __IO uint32_t ncc_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t pcc_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } cccr_bits;
    };

    // PWRCR @ offset=0x0000002C
    __IO uint32_t pwrcr_reg;

    __IO uint8_t reserved2[244];

    // PKGR @ offset=0x00000124
    __IO uint32_t pkgr_reg;

    __IO uint8_t reserved3[472];

    // UR0 @ offset=0x00000300
    union {
        __IO uint32_t ur0_reg;

        // bit fields
        struct {
            __IO uint32_t bks_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t rdp_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur0_bits;
    };

    __IO uint8_t reserved4[4];

    // UR2 @ offset=0x00000308
    union {
        __IO uint32_t ur2_reg;

        // bit fields
        struct {
            __IO uint32_t borh_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t boot_add0_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } ur2_bits;
    };

    // UR3 @ offset=0x0000030C
    __IO uint32_t ur3_reg;

    // UR4 @ offset=0x00000310
    __IO uint32_t ur4_reg;

    // UR5 @ offset=0x00000314
    union {
        __IO uint32_t ur5_reg;

        // bit fields
        struct {
            __IO uint32_t mesad_1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t wrpn_1_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur5_bits;
    };

    // UR6 @ offset=0x00000318
    union {
        __IO uint32_t ur6_reg;

        // bit fields
        struct {
            __IO uint32_t pa_beg_1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t pa_end_1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur6_bits;
    };

    // UR7 @ offset=0x0000031C
    union {
        __IO uint32_t ur7_reg;

        // bit fields
        struct {
            __IO uint32_t sa_beg_1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t sa_end_1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur7_bits;
    };

    // UR8 @ offset=0x00000320
    union {
        __IO uint32_t ur8_reg;

        // bit fields
        struct {
            __IO uint32_t mepad_2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t mesad_2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur8_bits;
    };

    // UR9 @ offset=0x00000324
    union {
        __IO uint32_t ur9_reg;

        // bit fields
        struct {
            __IO uint32_t wrpn_2_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t pa_beg_2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur9_bits;
    };

    // UR10 @ offset=0x00000328
    union {
        __IO uint32_t ur10_reg;

        // bit fields
        struct {
            __IO uint32_t pa_end_2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t sa_beg_2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur10_bits;
    };

    // UR11 @ offset=0x0000032C
    union {
        __IO uint32_t ur11_reg;

        // bit fields
        struct {
            __IO uint32_t sa_end_2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t iwdg1m_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur11_bits;
    };

    // UR12 @ offset=0x00000330
    __IO uint32_t ur12_reg;

    // UR13 @ offset=0x00000334
    union {
        __IO uint32_t ur13_reg;

        // bit fields
        struct {
            __IO uint32_t sdrs_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t d1sbrst_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur13_bits;
    };

    // UR14 @ offset=0x00000338
    __IO uint32_t ur14_reg;

    // UR15 @ offset=0x0000033C
    __IO uint32_t ur15_reg;

    // UR16 @ offset=0x00000340
    union {
        __IO uint32_t ur16_reg;

        // bit fields
        struct {
            __IO uint32_t fziwdgstp_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved0: 15;
            __IO uint32_t pkp_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reserved1 : 15;
        } ur16_bits;
    };

    // UR17 @ offset=0x00000344
    __IO uint32_t ur17_reg;

} syscfg_t;

// Peripheral TIM1 @ base_addess=0x40010000
typedef struct tim1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t mms2_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois3n_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois2n_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1n_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccus_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccpc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 11;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comde_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t cc6if_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc5if_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbif_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t b2if_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bif_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t comg_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bg_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t b2g_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 23;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc4ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc4m_4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ne_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc5e_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc5p_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t cc6e_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc6p_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 10;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t rcr_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t ccr1_reg;

    // CCR2 @ offset=0x00000038
    __IO uint32_t ccr2_reg;

    // CCR3 @ offset=0x0000003C
    __IO uint32_t ccr3_reg;

    // CCR4 @ offset=0x00000040
    __IO uint32_t ccr4_reg;

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t bdtr_reg;

        // bit fields
        struct {
            __IO uint32_t dtg_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t lock_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ossi_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ossr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bke_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkp_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aoe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t moe_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkf_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t bk2f_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t bk2e_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2p_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 6;
        } bdtr_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    // CCMR3_Output @ offset=0x00000054
    union {
        __IO uint32_t ccmr3_output_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t oc5fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc5pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc5m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t oc5ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t oc6fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc6pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc6m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t oc6ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc5m3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 7;
            __IO uint32_t oc6m3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 7;
        } ccmr3_output_bits;
    };

    // CCR5 @ offset=0x00000058
    union {
        __IO uint32_t ccr5_reg;

        // bit fields
        struct {
            __IO uint32_t ccr5_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 28;
            __IO uint32_t gc5c1_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gc5c2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gc5c3_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ccr5_bits;
    };

    // CCR6 @ offset=0x0000005C
    __IO uint32_t ccr6_reg;

    // AF1 @ offset=0x00000060
    union {
        __IO uint32_t af1_reg;

        // bit fields
        struct {
            __IO uint32_t bkine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bkdf1bk0e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkinp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t etrsel_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } af1_bits;
    };

    // AF2 @ offset=0x00000064
    union {
        __IO uint32_t af2_reg;

        // bit fields
        struct {
            __IO uint32_t bk2ine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bk2df1bk1e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2inp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } af2_bits;
    };

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim1_t;

// Peripheral TIM12 @ base_addess=0x40001800
typedef struct tim12_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim12_t;

// Peripheral TIM13 @ base_addess=0x40001C00
typedef struct tim13_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim13_t;

// Peripheral TIM14 @ base_addess=0x40002000
typedef struct tim14_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim14_t;

// Peripheral TIM15 @ base_addess=0x40014000
typedef struct tim15_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t ccpc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t ccus_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1n_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 21;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ts_2_0_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 8;
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 11;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 2;
            __IO uint32_t comie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t comde_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 10;
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bif_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t bg_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t comg_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 19;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 3;
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 3;
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 18;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t rcr_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t ccr1_reg;

    // CCR2 @ offset=0x00000038
    __IO uint32_t ccr2_reg;

    __IO uint8_t reserved0[8];

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t bdtr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t moe_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aoe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkp_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bke_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ossr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ossi_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lock_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dtg_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkf_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 8;
        } bdtr_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved1[16];

    // AF1 @ offset=0x00000060
    union {
        __IO uint32_t af1_reg;

        // bit fields
        struct {
            __IO uint32_t bkine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bkdf1bk0e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkinp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } af1_bits;
    };

    __IO uint8_t reserved2[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 23;
        } tisel_bits;
    };

} tim15_t;

// Peripheral TIM16 @ base_addess=0x40014400
typedef struct tim16_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t ois1n_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccus_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccpc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 18;
        } cr2_bits;
    };

    __IO uint8_t reserved0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t comie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t comde_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bif_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 18;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t bg_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t comg_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 21;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 11;
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2 : 15;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 4;
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 25;
            } ccmr1_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t rcr_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t ccr1_reg;

    __IO uint8_t reserved1[12];

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t bdtr_reg;

        // bit fields
        struct {
            __IO uint32_t dtg_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t lock_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ossi_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ossr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bke_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkp_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aoe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t moe_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkf_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } bdtr_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved2[16];

    // TIM16_AF1 @ offset=0x00000060
    union {
        __IO uint32_t tim16_af1_reg;

        // bit fields
        struct {
            __IO uint32_t bkine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bkdfbk1e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkinp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } tim16_af1_bits;
    };

    __IO uint8_t reserved3[4];

    // TIM16_TISEL @ offset=0x00000068
    __IO uint32_t tim16_tisel_reg;

} tim16_t;

// Peripheral TIM17 @ base_addess=0x40014800
typedef struct tim17_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t ois1n_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccus_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccpc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 18;
        } cr2_bits;
    };

    __IO uint8_t reserved0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t comie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t bie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t comde_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 18;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 9;
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bif_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 18;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t bg_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t comg_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 21;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 11;
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2 : 15;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 4;
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 25;
            } ccmr1_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 3;
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 25;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t rcr_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t ccr1_reg;

    __IO uint8_t reserved1[12];

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t bdtr_reg;

        // bit fields
        struct {
            __IO uint32_t dtg_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t lock_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ossi_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ossr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bke_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkp_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aoe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t moe_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkf_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 15;
        } bdtr_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved2[16];

    // TIM17_AF1 @ offset=0x00000060
    union {
        __IO uint32_t tim17_af1_reg;

        // bit fields
        struct {
            __IO uint32_t bkine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bkdfbk1e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkinp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } tim17_af1_bits;
    };

    __IO uint8_t reserved3[4];

    // TIM17_TISEL @ offset=0x00000068
    __IO uint32_t tim17_tisel_reg;

} tim17_t;

// Peripheral TIM2 @ base_addess=0x40000000
typedef struct tim2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim2_t;

// Peripheral TIM3 @ base_addess=0x40000400
typedef struct tim3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim3_t;

// Peripheral TIM4 @ base_addess=0x40000800
typedef struct tim4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim4_t;

// Peripheral TIM5 @ base_addess=0x40000C00
typedef struct tim5_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 12;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 12;
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 10;
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 6;
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 20;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2pcs_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t icpcs_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 24;
                __IO uint32_t oc4m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t o24ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 15;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 5;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 15;
            __IO uint32_t cnt_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t arr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t arr_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t arr_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } arr_bits;
    };

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t ccr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr1_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr1_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t ccr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr2_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr2_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t ccr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr3_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr3_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t ccr4_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 16;
            __IO uint32_t ccr4_h_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccr4_l_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 14;
        } ccr4_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    __IO uint8_t reserved0[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t af1_reg;

    __IO uint8_t reserved1[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim5_t;

// Peripheral TIM6 @ base_addess=0x40001000
typedef struct tim6_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    __IO uint32_t cr2_reg;

    __IO uint8_t reserved0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    __IO uint32_t sr_reg;

    // EGR @ offset=0x00000014
    __IO uint32_t egr_reg;

    __IO uint8_t reserved1[12];

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

} tim6_t;

// Peripheral TIM7 @ base_addess=0x40001400
typedef struct tim7_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 11;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 15;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    __IO uint32_t cr2_reg;

    __IO uint8_t reserved0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    __IO uint32_t sr_reg;

    // EGR @ offset=0x00000014
    __IO uint32_t egr_reg;

    __IO uint8_t reserved1[12];

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

} tim7_t;

// Peripheral TIM8 @ base_addess=0x40010400
typedef struct tim8_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t cen_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t udis_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t urs_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t opm_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dir_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cms_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t arpe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ckd_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t uifremap_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 20;
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t mms2_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois3n_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois2n_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1n_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ois1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ti1s_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mms_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccds_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccus_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ccpc_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t smcr_reg;

        // bit fields
        struct {
            __IO uint32_t sms_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 3;
            __IO uint32_t ts_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t msm_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etf_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t etps_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 1;
            __IO uint32_t ece_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t etp_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sms_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 3;
            __IO uint32_t ts_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 11;
        } smcr_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t dier_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 14;
            __IO uint32_t tde_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comde_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4de_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3de_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2de_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1de_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ude_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4ie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ie_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ie_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ie_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 3;
        } dier_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t sr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 17;
            __IO uint32_t cc6if_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc5if_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t sbif_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4of_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3of_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2of_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1of_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t b2if_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bif_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tif_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t comif_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4if_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3if_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2if_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1if_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uif_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } sr_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t egr_reg;

        // bit fields
        struct {
            __IO uint32_t ug_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc1g_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc2g_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc3g_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cc4g_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t comg_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tg_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t bg_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t b2g_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved0 : 23;
        } egr_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc1fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc1ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc2fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc2m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc2ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc1m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc2m_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr1_output_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t ccmr1_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic2f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic2psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc2s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic1psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc1s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr1_input_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_output_reg;

            // bit fields
            struct {
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved0: 1;
                __IO uint32_t oc3fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1: 2;
                __IO uint32_t oc3ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved2: 1;
                __IO uint32_t oc4fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc4m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved3: 2;
                __IO uint32_t oc4ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t oc3m_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved4: 7;
                __IO uint32_t oc4m_4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved5 : 7;
            } ccmr2_output_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t ccmr2_input_reg;

            // bit fields
            struct {
                __IO uint32_t reserved0: 12;
                __IO uint32_t ic4f_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic4psc_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc4s_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3f_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t ic3psc_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t cc3s_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t reserved1 : 14;
            } ccmr2_input_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t ccer_reg;

        // bit fields
        struct {
            __IO uint32_t cc1e_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1p_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1ne_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc1np_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2e_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2p_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2ne_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc2np_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3p_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3ne_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc3np_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4e_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc4p_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t cc4np_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc5e_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc5p_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t cc6e_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cc6p_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 10;
        } ccer_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t cnt_reg;

        // bit fields
        struct {
            __IO uint32_t cnt_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 30;
            __IO uint32_t uifcpy_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } cnt_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t psc_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t arr_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t rcr_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t ccr1_reg;

    // CCR2 @ offset=0x00000038
    __IO uint32_t ccr2_reg;

    // CCR3 @ offset=0x0000003C
    __IO uint32_t ccr3_reg;

    // CCR4 @ offset=0x00000040
    __IO uint32_t ccr4_reg;

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t bdtr_reg;

        // bit fields
        struct {
            __IO uint32_t dtg_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t lock_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 1;
            __IO uint32_t ossi_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ossr_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bke_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkp_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t aoe_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t moe_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkf_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 3;
            __IO uint32_t bk2f_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 3;
            __IO uint32_t bk2e_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2p_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4 : 6;
        } bdtr_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t dcr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t dbl_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t dba_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } dcr_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t dmar_reg;

    // CCMR3_Output @ offset=0x00000054
    union {
        __IO uint32_t ccmr3_output_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 2;
            __IO uint32_t oc5fe_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc5pe_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc5m_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t oc5ce_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 2;
            __IO uint32_t oc6fe_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc6pe_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc6m_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3: 2;
            __IO uint32_t oc6ce_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t oc5m3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved4: 7;
            __IO uint32_t oc6m3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved5 : 7;
        } ccmr3_output_bits;
    };

    // CCR5 @ offset=0x00000058
    union {
        __IO uint32_t ccr5_reg;

        // bit fields
        struct {
            __IO uint32_t ccr5_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 28;
            __IO uint32_t gc5c1_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gc5c2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t gc5c3_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ccr5_bits;
    };

    // CCR6 @ offset=0x0000005C
    __IO uint32_t ccr6_reg;

    // AF1 @ offset=0x00000060
    union {
        __IO uint32_t af1_reg;

        // bit fields
        struct {
            __IO uint32_t bkine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bkdf1bk0e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkinp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bkcmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 2;
            __IO uint32_t etrsel_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2 : 17;
        } af1_bits;
    };

    // AF2 @ offset=0x00000064
    union {
        __IO uint32_t af2_reg;

        // bit fields
        struct {
            __IO uint32_t bk2ine_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp1e_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp2e_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 5;
            __IO uint32_t bk2df1bk1e_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2inp_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp1p_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t bk2cmp2p_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 20;
        } af2_bits;
    };

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t tisel_reg;

        // bit fields
        struct {
            __IO uint32_t ti1sel_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 7;
            __IO uint32_t ti2sel_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1: 7;
            __IO uint32_t ti3sel_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved2: 7;
            __IO uint32_t ti4sel_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved3 : 7;
        } tisel_bits;
    };

} tim8_t;

// Peripheral UART4 @ base_addess=0x40004C00
typedef struct uart4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} uart4_t;

// Peripheral UART5 @ base_addess=0x40005000
typedef struct uart5_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} uart5_t;

// Peripheral UART7 @ base_addess=0x40007800
typedef struct uart7_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} uart7_t;

// Peripheral UART8 @ base_addess=0x40007C00
typedef struct uart8_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} uart8_t;

// Peripheral USART1 @ base_addess=0x40011000
typedef struct usart1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} usart1_t;

// Peripheral USART2 @ base_addess=0x40004400
typedef struct usart2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} usart2_t;

// Peripheral USART3 @ base_addess=0x40004800
typedef struct usart3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} usart3_t;

// Peripheral USART6 @ base_addess=0x40011400
typedef struct usart6_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t cr1_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 31;
            __IO uint32_t rxffie_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txfeie_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t fifoen_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eobie_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoie_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t deat0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dedt0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t over8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cmie_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t mme_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t m0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wake_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t pce_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ps_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t peie_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txeie_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxneie_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t idleie_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t te_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t re_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t uesm_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ue_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t cr2_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 28;
            __IO uint32_t add4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t add0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtoen_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abrmod0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t abren_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t msbfirst_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t tainv_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txinv_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxinv_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t swap_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t linen_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t stop_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t clken_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpol_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t cpha_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbcl_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdie_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t lbdl_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t addm7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dis_nss_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t slven_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t cr3_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 29;
            __IO uint32_t txftcfg_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftie_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rxftcfg_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t tcbgtie_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t txftie_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wufie_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t wus_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t scarcnt_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t dep_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dem_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ddre_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ovrdis_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t onebit_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctsie_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ctse_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t rtse_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmat_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t dmar_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t scen_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t nack_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hdsel_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t irlp_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t iren_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t eie_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
        } cr3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t brr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t brr_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t brr_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 26;
        } brr_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t gtpr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 8;
            __IO uint32_t gt_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t psc_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 22;
        } gtpr_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t rtor_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 24;
            __IO uint32_t blen_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t rto_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 6;
        } rtor_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t rqr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 4;
            __IO uint32_t txfrq_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rxfrq_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t mmrq_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t sbkrq_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t abrrq_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t reserved1 : 23;
        } rqr_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t isr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 27;
            __IO uint32_t txft_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxft_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tcbgt_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxff_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txfe_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t reack_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t teack_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t wuf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rwu_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t sbkf_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cmf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t busy_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abrf_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t abre_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t udr_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t eobf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rtof_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t cts_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ctsif_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t lbdf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t txe_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t tc_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t rxne_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t idle_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ore_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t nf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t fe_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t pe_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
        } isr_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t icr_reg;

        // bit fields
        struct {
            __IO uint32_t reserved0: 20;
            __IO uint32_t wucf_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t cmcf_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t udrcf_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t eobcf_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t rtocf_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ctscf_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t lbdcf_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tcbgtc_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t tccf_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t txfecf_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t idlecf_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t orecf_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ncf_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t fecf_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t pecf_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
        } icr_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t rdr_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t tdr_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t presc_reg;

} usart6_t;

// Peripheral VREFBUF @ base_addess=0x58003C00
typedef struct vrefbuf_t {

    // CSR @ offset=0x00000000
    union {
        __IO uint32_t csr_reg;

        // bit fields
        struct {
            __IO uint32_t envr_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t hiz_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 1;
            __IO uint32_t vrr_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t vrs_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 27;
        } csr_bits;
    };

    // CCR @ offset=0x00000004
    __IO uint32_t ccr_reg;

} vrefbuf_t;

// Peripheral WWDG @ base_addess=0x50003000
typedef struct wwdg_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t cr_reg;

        // bit fields
        struct {
            __IO uint32_t t_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 6;
            __IO uint32_t wdga_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 24;
        } cr_bits;
    };

    // CFR @ offset=0x00000004
    union {
        __IO uint32_t cfr_reg;

        // bit fields
        struct {
            __IO uint32_t w_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved0: 10;
            __IO uint32_t wdgtb_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ewi_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t reserved1 : 19;
        } cfr_bits;
    };

    // SR @ offset=0x00000008
    __IO uint32_t sr_reg;

} wwdg_t;

/*------------------------ Device Macro Define ---------------------*/
// Device STM32H743

#define PERI_ADC1                ((adc1_t *) 0x40022000)
#define PERI_ADC12_COMMON        ((adc12_common_t *) 0x40022300)
#define PERI_ADC2                ((adc2_t *) 0x40022100)
#define PERI_ADC3                ((adc3_t *) 0x58026000)
#define PERI_ADC3_COMMON         ((adc3_common_t *) 0x58026300)
#define PERI_AXI                 ((axi_t *) 0x51000000)
#define PERI_BDMA                ((bdma_t *) 0x58025400)
#define PERI_CAN_CCU             ((can_ccu_t *) 0x4000A800)
#define PERI_CEC                 ((cec_t *) 0x40006C00)
#define PERI_COMP1               ((comp1_t *) 0x58003800)
#define PERI_CRC                 ((crc_t *) 0x58024C00)
#define PERI_CRS                 ((crs_t *) 0x40008400)
#define PERI_DAC                 ((dac_t *) 0x40007400)
#define PERI_DBGMCU              ((dbgmcu_t *) 0x5C001000)
#define PERI_DCMI                ((dcmi_t *) 0x48020000)
#define PERI_DELAY_BLOCK_QUADSPI ((delay_block_quadspi_t *) 0x52006000)
#define PERI_DELAY_BLOCK_SDMMC1  ((delay_block_sdmmc1_t *) 0x52008000)
#define PERI_DELAY_BLOCK_SDMMC2  ((delay_block_sdmmc2_t *) 0x48022800)
#define PERI_DFSDM               ((dfsdm_t *) 0x40017000)
#define PERI_DMA1                ((dma1_t *) 0x40020000)
#define PERI_DMA2                ((dma2_t *) 0x40020400)
#define PERI_DMA2D               ((dma2d_t *) 0x52001000)
#define PERI_DMAMUX1             ((dmamux1_t *) 0x40020800)
#define PERI_DMAMUX2             ((dmamux2_t *) 0x58025800)
#define PERI_EXTI                ((exti_t *) 0x58000000)
#define PERI_ETHERNET_DMA        ((ethernet_dma_t *) 0x40029000)
#define PERI_ETHERNET_MAC        ((ethernet_mac_t *) 0x40028000)
#define PERI_ETHERNET_MTL        ((ethernet_mtl_t *) 0x40028C00)
#define PERI_FDCAN1              ((fdcan1_t *) 0x4000A000)
#define PERI_FDCAN2              ((fdcan2_t *) 0x4000A400)
#define PERI_FMC                 ((fmc_t *) 0x52004000)
#define PERI_FLASH               ((flash_t *) 0x52002000)
#define PERI_GPIOA               ((gpioa_t *) 0x58020000)
#define PERI_GPIOB               ((gpiob_t *) 0x58020400)
#define PERI_GPIOC               ((gpioc_t *) 0x58020800)
#define PERI_GPIOD               ((gpiod_t *) 0x58020C00)
#define PERI_GPIOE               ((gpioe_t *) 0x58021000)
#define PERI_GPIOF               ((gpiof_t *) 0x58021400)
#define PERI_GPIOG               ((gpiog_t *) 0x58021800)
#define PERI_GPIOH               ((gpioh_t *) 0x58021C00)
#define PERI_GPIOI               ((gpioi_t *) 0x58022000)
#define PERI_GPIOJ               ((gpioj_t *) 0x58022400)
#define PERI_GPIOK               ((gpiok_t *) 0x58022800)
#define PERI_HRTIM_COMMON        ((hrtim_common_t *) 0x40017780)
#define PERI_HRTIM_MASTER        ((hrtim_master_t *) 0x40017400)
#define PERI_HRTIM_TIMA          ((hrtim_tima_t *) 0x40017480)
#define PERI_HRTIM_TIMB          ((hrtim_timb_t *) 0x40017500)
#define PERI_HRTIM_TIMC          ((hrtim_timc_t *) 0x40017580)
#define PERI_HRTIM_TIMD          ((hrtim_timd_t *) 0x40017600)
#define PERI_HRTIM_TIME          ((hrtim_time_t *) 0x40017680)
#define PERI_HSEM                ((hsem_t *) 0x58026400)
#define PERI_I2C1                ((i2c1_t *) 0x40005400)
#define PERI_I2C2                ((i2c2_t *) 0x40005800)
#define PERI_I2C3                ((i2c3_t *) 0x40005C00)
#define PERI_I2C4                ((i2c4_t *) 0x58001C00)
#define PERI_IWDG                ((iwdg_t *) 0x58004800)
#define PERI_JPEG                ((jpeg_t *) 0x52003000)
#define PERI_LPTIM1              ((lptim1_t *) 0x40002400)
#define PERI_LPTIM2              ((lptim2_t *) 0x58002400)
#define PERI_LPTIM3              ((lptim3_t *) 0x58002800)
#define PERI_LPTIM4              ((lptim4_t *) 0x58002C00)
#define PERI_LPTIM5              ((lptim5_t *) 0x58003000)
#define PERI_LPUART1             ((lpuart1_t *) 0x58000C00)
#define PERI_LTDC                ((ltdc_t *) 0x50001000)
#define PERI_MDIOS               ((mdios_t *) 0x40009400)
#define PERI_MDMA                ((mdma_t *) 0x52000000)
#define PERI_OPAMP               ((opamp_t *) 0x40009000)
#define PERI_OTG1_HS_DEVICE      ((otg1_hs_device_t *) 0x40040800)
#define PERI_OTG1_HS_GLOBAL      ((otg1_hs_global_t *) 0x40040000)
#define PERI_OTG1_HS_HOST        ((otg1_hs_host_t *) 0x40040400)
#define PERI_OTG1_HS_PWRCLK      ((otg1_hs_pwrclk_t *) 0x40040E00)
#define PERI_OTG2_HS_DEVICE      ((otg2_hs_device_t *) 0x40080800)
#define PERI_OTG2_HS_GLOBAL      ((otg2_hs_global_t *) 0x40080000)
#define PERI_OTG2_HS_HOST        ((otg2_hs_host_t *) 0x40080400)
#define PERI_OTG2_HS_PWRCLK      ((otg2_hs_pwrclk_t *) 0x40080E00)
#define PERI_PWR                 ((pwr_t *) 0x58024800)
#define PERI_QUADSPI             ((quadspi_t *) 0x52005000)
#define PERI_RAMECC1             ((ramecc1_t *) 0x52009000)
#define PERI_RAMECC2             ((ramecc2_t *) 0x48023000)
#define PERI_RAMECC3             ((ramecc3_t *) 0x58027000)
#define PERI_RCC                 ((rcc_t *) 0x58024400)
#define PERI_RNG                 ((rng_t *) 0x48021800)
#define PERI_RTC                 ((rtc_t *) 0x58004000)
#define PERI_SAI1                ((sai1_t *) 0x40015800)
#define PERI_SAI2                ((sai2_t *) 0x40015C00)
#define PERI_SAI3                ((sai3_t *) 0x40016000)
#define PERI_SAI4                ((sai4_t *) 0x58005400)
#define PERI_SDMMC1              ((sdmmc1_t *) 0x52007000)
#define PERI_SDMMC2              ((sdmmc2_t *) 0x48022400)
#define PERI_SPDIFRX             ((spdifrx_t *) 0x40004000)
#define PERI_SPI1                ((spi1_t *) 0x40013000)
#define PERI_SPI2                ((spi2_t *) 0x40003800)
#define PERI_SPI3                ((spi3_t *) 0x40003C00)
#define PERI_SPI4                ((spi4_t *) 0x40013400)
#define PERI_SPI5                ((spi5_t *) 0x40015000)
#define PERI_SPI6                ((spi6_t *) 0x58001400)
#define PERI_SWPMI               ((swpmi_t *) 0x40008800)
#define PERI_SYSCFG              ((syscfg_t *) 0x58000400)
#define PERI_TIM1                ((tim1_t *) 0x40010000)
#define PERI_TIM12               ((tim12_t *) 0x40001800)
#define PERI_TIM13               ((tim13_t *) 0x40001C00)
#define PERI_TIM14               ((tim14_t *) 0x40002000)
#define PERI_TIM15               ((tim15_t *) 0x40014000)
#define PERI_TIM16               ((tim16_t *) 0x40014400)
#define PERI_TIM17               ((tim17_t *) 0x40014800)
#define PERI_TIM2                ((tim2_t *) 0x40000000)
#define PERI_TIM3                ((tim3_t *) 0x40000400)
#define PERI_TIM4                ((tim4_t *) 0x40000800)
#define PERI_TIM5                ((tim5_t *) 0x40000C00)
#define PERI_TIM6                ((tim6_t *) 0x40001000)
#define PERI_TIM7                ((tim7_t *) 0x40001400)
#define PERI_TIM8                ((tim8_t *) 0x40010400)
#define PERI_UART4               ((uart4_t *) 0x40004C00)
#define PERI_UART5               ((uart5_t *) 0x40005000)
#define PERI_UART7               ((uart7_t *) 0x40007800)
#define PERI_UART8               ((uart8_t *) 0x40007C00)
#define PERI_USART1              ((usart1_t *) 0x40011000)
#define PERI_USART2              ((usart2_t *) 0x40004400)
#define PERI_USART3              ((usart3_t *) 0x40004800)
#define PERI_USART6              ((usart6_t *) 0x40011400)
#define PERI_VREFBUF             ((vrefbuf_t *) 0x58003C00)
#define PERI_WWDG                ((wwdg_t *) 0x50003000)
