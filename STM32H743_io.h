#ifndef STM32H743_H_
#define STM32H743_H_

#include <stdint.h>

#define __IO volatile

// Device STM32H743

// Peripheral ADC1 @ base_addess=0x40022000
typedef struct adc1_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDY_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSMP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD3_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQOVF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } ISR_bits;
    };

    // IER @ offset=0x00000004
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDYIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSMPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOSIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD3IE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQOVFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // CR @ offset=0x00000008
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ADEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSTART_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JADSTART_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSTP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JADSTP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t BOOST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t ADCALLIN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t LINCALRDYW1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW5_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADVREGEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEEPPWD_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCALDIF_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCAL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t DMNGT_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RES_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTSEL_bit : 5; // bit offset=5  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRMOD_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTDLY_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DISCEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCNUM_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDISCEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1SGL_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JAWD1EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JAUTO_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH1CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQDIS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t CFGR2_reg;

        // bit fields
        struct {
            __IO uint32_t ROVSE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVSE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OVSS_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TROVS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVSM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t LSHIFT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CFGR2_bits;
    };

    // SMPR1 @ offset=0x00000014
    union {
        __IO uint32_t SMPR1_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SMP1_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP2_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP3_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP4_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP5_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP6_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP7_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP8_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP9_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } SMPR1_bits;
    };

    // SMPR2 @ offset=0x00000018
    union {
        __IO uint32_t SMPR2_reg;

        // bit fields
        struct {
            __IO uint32_t SMP10_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP11_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP12_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP13_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP14_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP15_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP16_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP17_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP18_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP19_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } SMPR2_bits;
    };

    // PCSEL @ offset=0x0000001C
    __IO uint32_t PCSEL_reg;

    // LTR1 @ offset=0x00000020
    __IO uint32_t LTR1_reg;

    // LHTR1 @ offset=0x00000024
    __IO uint32_t LHTR1_reg;

    __IO uint8_t RESERVED0[8];

    // SQR1 @ offset=0x00000030
    union {
        __IO uint32_t SQR1_reg;

        // bit fields
        struct {
            __IO uint32_t L3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SQ1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ2_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ3_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ4_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR1_bits;
    };

    // SQR2 @ offset=0x00000034
    union {
        __IO uint32_t SQR2_reg;

        // bit fields
        struct {
            __IO uint32_t SQ5_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ6_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ7_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ8_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ9_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR2_bits;
    };

    // SQR3 @ offset=0x00000038
    union {
        __IO uint32_t SQR3_reg;

        // bit fields
        struct {
            __IO uint32_t SQ10_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ11_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ12_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ13_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ14_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR3_bits;
    };

    // SQR4 @ offset=0x0000003C
    union {
        __IO uint32_t SQR4_reg;

        // bit fields
        struct {
            __IO uint32_t SQ15_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ16_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 21;
        } SQR4_bits;
    };

    // DR @ offset=0x00000040
    __IO uint32_t DR_reg;

    __IO uint8_t RESERVED1[8];

    // JSQR @ offset=0x0000004C
    union {
        __IO uint32_t JSQR_reg;

        // bit fields
        struct {
            __IO uint32_t JL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=2  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSQ1_bit : 5; // bit offset=9  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSQ2_bit : 5; // bit offset=15  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t JSQ3_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t JSQ4_bit : 5; // bit offset=27  bit width=5  access=SVDAccessType.READ_WRITE
        } JSQR_bits;
    };

    __IO uint8_t RESERVED2[16];

    // OFR1 @ offset=0x00000060
    union {
        __IO uint32_t OFR1_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR1_bits;
    };

    // OFR2 @ offset=0x00000064
    union {
        __IO uint32_t OFR2_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR2_bits;
    };

    // OFR3 @ offset=0x00000068
    union {
        __IO uint32_t OFR3_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR3_bits;
    };

    // OFR4 @ offset=0x0000006C
    union {
        __IO uint32_t OFR4_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR4_bits;
    };

    __IO uint8_t RESERVED3[16];

    // JDR1 @ offset=0x00000080
    __IO uint32_t JDR1_reg;

    // JDR2 @ offset=0x00000084
    __IO uint32_t JDR2_reg;

    // JDR3 @ offset=0x00000088
    __IO uint32_t JDR3_reg;

    // JDR4 @ offset=0x0000008C
    __IO uint32_t JDR4_reg;

    __IO uint8_t RESERVED4[16];

    // AWD2CR @ offset=0x000000A0
    __IO uint32_t AWD2CR_reg;

    // AWD3CR @ offset=0x000000A4
    __IO uint32_t AWD3CR_reg;

    __IO uint8_t RESERVED5[8];

    // LTR2 @ offset=0x000000B0
    __IO uint32_t LTR2_reg;

    // HTR2 @ offset=0x000000B4
    __IO uint32_t HTR2_reg;

    // LTR3 @ offset=0x000000B8
    __IO uint32_t LTR3_reg;

    // HTR3 @ offset=0x000000BC
    __IO uint32_t HTR3_reg;

    // DIFSEL @ offset=0x000000C0
    __IO uint32_t DIFSEL_reg;

    // CALFACT @ offset=0x000000C4
    union {
        __IO uint32_t CALFACT_reg;

        // bit fields
        struct {
            __IO uint32_t CALFACT_S_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t CALFACT_D_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } CALFACT_bits;
    };

    // CALFACT2 @ offset=0x000000C8
    __IO uint32_t CALFACT2_reg;

} adc1_t;

// Peripheral ADC12_Common @ base_addess=0x40022300
typedef struct adc12_common_t {

    // CSR @ offset=0x00000000
    union {
        __IO uint32_t CSR_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDY_MST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOSMP_MST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOC_MST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOS_MST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_MST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOC_MST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOS_MST_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD1_MST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD2_MST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD3_MST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JQOVF_MST_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t ADRDY_SLV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOSMP_SLV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOC_SLV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOS_SLV_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_SLV_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOC_SLV_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOS_SLV_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD1_SLV_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD2_SLV_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD3_SLV_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JQOVF_SLV_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 5;
        } CSR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR @ offset=0x00000008
    union {
        __IO uint32_t CCR_reg;

        // bit fields
        struct {
            __IO uint32_t DUAL_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DELAY_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t DAMDF_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKMODE_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRESC_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSENSEEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBATEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 7;
        } CCR_bits;
    };

    // CDR @ offset=0x0000000C
    union {
        __IO uint32_t CDR_reg;

        // bit fields
        struct {
            __IO uint32_t RDATA_MST_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t RDATA_SLV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CDR_bits;
    };

    // CDR2 @ offset=0x00000010
    __IO uint32_t CDR2_reg;

} adc12_common_t;

// Peripheral ADC2 @ base_addess=0x40022100
typedef struct adc2_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDY_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSMP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD3_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQOVF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } ISR_bits;
    };

    // IER @ offset=0x00000004
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDYIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSMPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOSIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD3IE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQOVFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // CR @ offset=0x00000008
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ADEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSTART_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JADSTART_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSTP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JADSTP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t BOOST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t ADCALLIN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t LINCALRDYW1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW5_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADVREGEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEEPPWD_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCALDIF_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCAL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t DMNGT_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RES_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTSEL_bit : 5; // bit offset=5  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRMOD_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTDLY_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DISCEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCNUM_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDISCEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1SGL_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JAWD1EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JAUTO_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH1CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQDIS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t CFGR2_reg;

        // bit fields
        struct {
            __IO uint32_t ROVSE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVSE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OVSS_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TROVS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVSM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t LSHIFT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CFGR2_bits;
    };

    // SMPR1 @ offset=0x00000014
    union {
        __IO uint32_t SMPR1_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SMP1_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP2_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP3_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP4_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP5_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP6_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP7_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP8_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP9_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } SMPR1_bits;
    };

    // SMPR2 @ offset=0x00000018
    union {
        __IO uint32_t SMPR2_reg;

        // bit fields
        struct {
            __IO uint32_t SMP10_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP11_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP12_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP13_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP14_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP15_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP16_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP17_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP18_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP19_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } SMPR2_bits;
    };

    // PCSEL @ offset=0x0000001C
    __IO uint32_t PCSEL_reg;

    // LTR1 @ offset=0x00000020
    __IO uint32_t LTR1_reg;

    // LHTR1 @ offset=0x00000024
    __IO uint32_t LHTR1_reg;

    __IO uint8_t RESERVED0[8];

    // SQR1 @ offset=0x00000030
    union {
        __IO uint32_t SQR1_reg;

        // bit fields
        struct {
            __IO uint32_t L3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SQ1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ2_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ3_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ4_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR1_bits;
    };

    // SQR2 @ offset=0x00000034
    union {
        __IO uint32_t SQR2_reg;

        // bit fields
        struct {
            __IO uint32_t SQ5_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ6_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ7_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ8_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ9_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR2_bits;
    };

    // SQR3 @ offset=0x00000038
    union {
        __IO uint32_t SQR3_reg;

        // bit fields
        struct {
            __IO uint32_t SQ10_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ11_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ12_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ13_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ14_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR3_bits;
    };

    // SQR4 @ offset=0x0000003C
    union {
        __IO uint32_t SQR4_reg;

        // bit fields
        struct {
            __IO uint32_t SQ15_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ16_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 21;
        } SQR4_bits;
    };

    // DR @ offset=0x00000040
    __IO uint32_t DR_reg;

    __IO uint8_t RESERVED1[8];

    // JSQR @ offset=0x0000004C
    union {
        __IO uint32_t JSQR_reg;

        // bit fields
        struct {
            __IO uint32_t JL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=2  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSQ1_bit : 5; // bit offset=9  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSQ2_bit : 5; // bit offset=15  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t JSQ3_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t JSQ4_bit : 5; // bit offset=27  bit width=5  access=SVDAccessType.READ_WRITE
        } JSQR_bits;
    };

    __IO uint8_t RESERVED2[16];

    // OFR1 @ offset=0x00000060
    union {
        __IO uint32_t OFR1_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR1_bits;
    };

    // OFR2 @ offset=0x00000064
    union {
        __IO uint32_t OFR2_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR2_bits;
    };

    // OFR3 @ offset=0x00000068
    union {
        __IO uint32_t OFR3_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR3_bits;
    };

    // OFR4 @ offset=0x0000006C
    union {
        __IO uint32_t OFR4_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR4_bits;
    };

    __IO uint8_t RESERVED3[16];

    // JDR1 @ offset=0x00000080
    __IO uint32_t JDR1_reg;

    // JDR2 @ offset=0x00000084
    __IO uint32_t JDR2_reg;

    // JDR3 @ offset=0x00000088
    __IO uint32_t JDR3_reg;

    // JDR4 @ offset=0x0000008C
    __IO uint32_t JDR4_reg;

    __IO uint8_t RESERVED4[16];

    // AWD2CR @ offset=0x000000A0
    __IO uint32_t AWD2CR_reg;

    // AWD3CR @ offset=0x000000A4
    __IO uint32_t AWD3CR_reg;

    __IO uint8_t RESERVED5[8];

    // LTR2 @ offset=0x000000B0
    __IO uint32_t LTR2_reg;

    // HTR2 @ offset=0x000000B4
    __IO uint32_t HTR2_reg;

    // LTR3 @ offset=0x000000B8
    __IO uint32_t LTR3_reg;

    // HTR3 @ offset=0x000000BC
    __IO uint32_t HTR3_reg;

    // DIFSEL @ offset=0x000000C0
    __IO uint32_t DIFSEL_reg;

    // CALFACT @ offset=0x000000C4
    union {
        __IO uint32_t CALFACT_reg;

        // bit fields
        struct {
            __IO uint32_t CALFACT_S_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t CALFACT_D_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } CALFACT_bits;
    };

    // CALFACT2 @ offset=0x000000C8
    __IO uint32_t CALFACT2_reg;

} adc2_t;

// Peripheral ADC3 @ base_addess=0x58026000
typedef struct adc3_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDY_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSMP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD3_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQOVF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } ISR_bits;
    };

    // IER @ offset=0x00000004
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDYIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSMPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOSIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEOSIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD3IE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQOVFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // CR @ offset=0x00000008
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ADEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSTART_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JADSTART_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSTP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JADSTP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t BOOST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t ADCALLIN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t LINCALRDYW1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW5_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINCALRDYW6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADVREGEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEEPPWD_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCALDIF_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCAL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t DMNGT_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RES_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTSEL_bit : 5; // bit offset=5  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRMOD_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTDLY_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DISCEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCNUM_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDISCEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1SGL_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWD1EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JAWD1EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JAUTO_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH1CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JQDIS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t CFGR2_reg;

        // bit fields
        struct {
            __IO uint32_t ROVSE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVSE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OVSS_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TROVS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVSM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSHIFT4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t LSHIFT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CFGR2_bits;
    };

    // SMPR1 @ offset=0x00000014
    union {
        __IO uint32_t SMPR1_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SMP1_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP2_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP3_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP4_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP5_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP6_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP7_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP8_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP9_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } SMPR1_bits;
    };

    // SMPR2 @ offset=0x00000018
    union {
        __IO uint32_t SMPR2_reg;

        // bit fields
        struct {
            __IO uint32_t SMP10_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP11_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP12_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP13_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP14_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP15_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP16_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP17_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP18_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMP19_bit : 3; // bit offset=27  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } SMPR2_bits;
    };

    // PCSEL @ offset=0x0000001C
    __IO uint32_t PCSEL_reg;

    // LTR1 @ offset=0x00000020
    __IO uint32_t LTR1_reg;

    // LHTR1 @ offset=0x00000024
    __IO uint32_t LHTR1_reg;

    __IO uint8_t RESERVED0[8];

    // SQR1 @ offset=0x00000030
    union {
        __IO uint32_t SQR1_reg;

        // bit fields
        struct {
            __IO uint32_t L3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SQ1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ2_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ3_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ4_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR1_bits;
    };

    // SQR2 @ offset=0x00000034
    union {
        __IO uint32_t SQR2_reg;

        // bit fields
        struct {
            __IO uint32_t SQ5_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ6_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ7_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ8_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ9_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR2_bits;
    };

    // SQR3 @ offset=0x00000038
    union {
        __IO uint32_t SQR3_reg;

        // bit fields
        struct {
            __IO uint32_t SQ10_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ11_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SQ12_bit : 5; // bit offset=12  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SQ13_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SQ14_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } SQR3_bits;
    };

    // SQR4 @ offset=0x0000003C
    union {
        __IO uint32_t SQR4_reg;

        // bit fields
        struct {
            __IO uint32_t SQ15_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SQ16_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 21;
        } SQR4_bits;
    };

    // DR @ offset=0x00000040
    __IO uint32_t DR_reg;

    __IO uint8_t RESERVED1[8];

    // JSQR @ offset=0x0000004C
    union {
        __IO uint32_t JSQR_reg;

        // bit fields
        struct {
            __IO uint32_t JL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=2  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSQ1_bit : 5; // bit offset=9  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSQ2_bit : 5; // bit offset=15  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t JSQ3_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t JSQ4_bit : 5; // bit offset=27  bit width=5  access=SVDAccessType.READ_WRITE
        } JSQR_bits;
    };

    __IO uint8_t RESERVED2[16];

    // OFR1 @ offset=0x00000060
    union {
        __IO uint32_t OFR1_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR1_bits;
    };

    // OFR2 @ offset=0x00000064
    union {
        __IO uint32_t OFR2_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR2_bits;
    };

    // OFR3 @ offset=0x00000068
    union {
        __IO uint32_t OFR3_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR3_bits;
    };

    // OFR4 @ offset=0x0000006C
    union {
        __IO uint32_t OFR4_reg;

        // bit fields
        struct {
            __IO uint32_t OFFSET1_bit : 26; // bit offset=0  bit width=26  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET1_CH_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OFR4_bits;
    };

    __IO uint8_t RESERVED3[16];

    // JDR1 @ offset=0x00000080
    __IO uint32_t JDR1_reg;

    // JDR2 @ offset=0x00000084
    __IO uint32_t JDR2_reg;

    // JDR3 @ offset=0x00000088
    __IO uint32_t JDR3_reg;

    // JDR4 @ offset=0x0000008C
    __IO uint32_t JDR4_reg;

    __IO uint8_t RESERVED4[16];

    // AWD2CR @ offset=0x000000A0
    __IO uint32_t AWD2CR_reg;

    // AWD3CR @ offset=0x000000A4
    __IO uint32_t AWD3CR_reg;

    __IO uint8_t RESERVED5[8];

    // LTR2 @ offset=0x000000B0
    __IO uint32_t LTR2_reg;

    // HTR2 @ offset=0x000000B4
    __IO uint32_t HTR2_reg;

    // LTR3 @ offset=0x000000B8
    __IO uint32_t LTR3_reg;

    // HTR3 @ offset=0x000000BC
    __IO uint32_t HTR3_reg;

    // DIFSEL @ offset=0x000000C0
    __IO uint32_t DIFSEL_reg;

    // CALFACT @ offset=0x000000C4
    union {
        __IO uint32_t CALFACT_reg;

        // bit fields
        struct {
            __IO uint32_t CALFACT_S_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t CALFACT_D_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } CALFACT_bits;
    };

    // CALFACT2 @ offset=0x000000C8
    __IO uint32_t CALFACT2_reg;

} adc3_t;

// Peripheral ADC3_Common @ base_addess=0x58026300
typedef struct adc3_common_t {

    // CSR @ offset=0x00000000
    union {
        __IO uint32_t CSR_reg;

        // bit fields
        struct {
            __IO uint32_t ADRDY_MST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOSMP_MST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOC_MST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOS_MST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_MST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOC_MST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOS_MST_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD1_MST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD2_MST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD3_MST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JQOVF_MST_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t ADRDY_SLV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOSMP_SLV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOC_SLV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOS_SLV_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_SLV_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOC_SLV_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEOS_SLV_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD1_SLV_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD2_SLV_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWD3_SLV_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JQOVF_SLV_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 5;
        } CSR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR @ offset=0x00000008
    union {
        __IO uint32_t CCR_reg;

        // bit fields
        struct {
            __IO uint32_t DUAL_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DELAY_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t DAMDF_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKMODE_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRESC_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSENSEEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBATEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 7;
        } CCR_bits;
    };

    // CDR @ offset=0x0000000C
    union {
        __IO uint32_t CDR_reg;

        // bit fields
        struct {
            __IO uint32_t RDATA_MST_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t RDATA_SLV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CDR_bits;
    };

    // CDR2 @ offset=0x00000010
    __IO uint32_t CDR2_reg;

} adc3_common_t;

// Peripheral AXI @ base_addess=0x51000000
typedef struct axi_t {

    __IO uint8_t RESERVED0[8144];

    // AXI_PERIPH_ID_4 @ offset=0x00001FD0
    union {
        __IO uint32_t AXI_PERIPH_ID_4_reg;

        // bit fields
        struct {
            __IO uint32_t JEP106CON_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t KCOUNT4_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } AXI_PERIPH_ID_4_bits;
    };

    __IO uint8_t RESERVED1[12];

    // AXI_PERIPH_ID_0 @ offset=0x00001FE0
    __IO uint32_t AXI_PERIPH_ID_0_reg;

    // AXI_PERIPH_ID_1 @ offset=0x00001FE4
    union {
        __IO uint32_t AXI_PERIPH_ID_1_reg;

        // bit fields
        struct {
            __IO uint32_t PARTNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEP106I_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } AXI_PERIPH_ID_1_bits;
    };

    // AXI_PERIPH_ID_2 @ offset=0x00001FE8
    union {
        __IO uint32_t AXI_PERIPH_ID_2_reg;

        // bit fields
        struct {
            __IO uint32_t JEP106ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t JEDEC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REVISION_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } AXI_PERIPH_ID_2_bits;
    };

    // AXI_PERIPH_ID_3 @ offset=0x00001FEC
    union {
        __IO uint32_t AXI_PERIPH_ID_3_reg;

        // bit fields
        struct {
            __IO uint32_t CUST_MOD_NUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t REV_AND_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } AXI_PERIPH_ID_3_bits;
    };

    // AXI_COMP_ID_0 @ offset=0x00001FF0
    __IO uint32_t AXI_COMP_ID_0_reg;

    // AXI_COMP_ID_1 @ offset=0x00001FF4
    union {
        __IO uint32_t AXI_COMP_ID_1_reg;

        // bit fields
        struct {
            __IO uint32_t PREAMBLE_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t CLASS_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } AXI_COMP_ID_1_bits;
    };

    // AXI_COMP_ID_2 @ offset=0x00001FF8
    __IO uint32_t AXI_COMP_ID_2_reg;

    // AXI_COMP_ID_3 @ offset=0x00001FFC
    __IO uint32_t AXI_COMP_ID_3_reg;

    __IO uint8_t RESERVED2[8];

    // AXI_TARG1_FN_MOD_ISS_BM @ offset=0x00002008
    union {
        __IO uint32_t AXI_TARG1_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG1_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED3[24];

    // AXI_TARG1_FN_MOD2 @ offset=0x00002024
    __IO uint32_t AXI_TARG1_FN_MOD2_reg;

    __IO uint8_t RESERVED4[4];

    // AXI_TARG1_FN_MOD_LB @ offset=0x0000202C
    __IO uint32_t AXI_TARG1_FN_MOD_LB_reg;

    __IO uint8_t RESERVED5[216];

    // AXI_TARG1_FN_MOD @ offset=0x00002108
    union {
        __IO uint32_t AXI_TARG1_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG1_FN_MOD_bits;
    };

    __IO uint8_t RESERVED6[3836];

    // AXI_TARG2_FN_MOD_ISS_BM @ offset=0x00003008
    union {
        __IO uint32_t AXI_TARG2_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG2_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED7[24];

    // AXI_TARG2_FN_MOD2 @ offset=0x00003024
    __IO uint32_t AXI_TARG2_FN_MOD2_reg;

    __IO uint8_t RESERVED8[4];

    // AXI_TARG2_FN_MOD_LB @ offset=0x0000302C
    __IO uint32_t AXI_TARG2_FN_MOD_LB_reg;

    __IO uint8_t RESERVED9[216];

    // AXI_TARG2_FN_MOD @ offset=0x00003108
    union {
        __IO uint32_t AXI_TARG2_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG2_FN_MOD_bits;
    };

    __IO uint8_t RESERVED10[3836];

    // AXI_TARG3_FN_MOD_ISS_BM @ offset=0x00004008
    union {
        __IO uint32_t AXI_TARG3_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG3_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED11[4092];

    // AXI_TARG4_FN_MOD_ISS_BM @ offset=0x00005008
    union {
        __IO uint32_t AXI_TARG4_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG4_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED12[4092];

    // AXI_TARG5_FN_MOD_ISS_BM @ offset=0x00006008
    union {
        __IO uint32_t AXI_TARG5_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG5_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED13[4092];

    // AXI_TARG6_FN_MOD_ISS_BM @ offset=0x00007008
    union {
        __IO uint32_t AXI_TARG6_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG6_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED14[4096];

    // AXI_TARG7_FN_MOD_ISS_BM @ offset=0x0000800C
    union {
        __IO uint32_t AXI_TARG7_FN_MOD_ISS_BM_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG7_FN_MOD_ISS_BM_bits;
    };

    __IO uint8_t RESERVED15[20];

    // AXI_TARG7_FN_MOD2 @ offset=0x00008024
    __IO uint32_t AXI_TARG7_FN_MOD2_reg;

    __IO uint8_t RESERVED16[224];

    // AXI_TARG7_FN_MOD @ offset=0x00008108
    union {
        __IO uint32_t AXI_TARG7_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_TARG7_FN_MOD_bits;
    };

    __IO uint8_t RESERVED17[237336];

    // AXI_INI1_FN_MOD2 @ offset=0x00042024
    __IO uint32_t AXI_INI1_FN_MOD2_reg;

    // AXI_INI1_FN_MOD_AHB @ offset=0x00042028
    union {
        __IO uint32_t AXI_INI1_FN_MOD_AHB_reg;

        // bit fields
        struct {
            __IO uint32_t RD_INC_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WR_INC_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI1_FN_MOD_AHB_bits;
    };

    __IO uint8_t RESERVED18[212];

    // AXI_INI1_READ_QOS @ offset=0x00042100
    __IO uint32_t AXI_INI1_READ_QOS_reg;

    // AXI_INI1_WRITE_QOS @ offset=0x00042104
    __IO uint32_t AXI_INI1_WRITE_QOS_reg;

    // AXI_INI1_FN_MOD @ offset=0x00042108
    union {
        __IO uint32_t AXI_INI1_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI1_FN_MOD_bits;
    };

    __IO uint8_t RESERVED19[4084];

    // AXI_INI2_READ_QOS @ offset=0x00043100
    __IO uint32_t AXI_INI2_READ_QOS_reg;

    // AXI_INI2_WRITE_QOS @ offset=0x00043104
    __IO uint32_t AXI_INI2_WRITE_QOS_reg;

    // AXI_INI2_FN_MOD @ offset=0x00043108
    union {
        __IO uint32_t AXI_INI2_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI2_FN_MOD_bits;
    };

    __IO uint8_t RESERVED20[3864];

    // AXI_INI3_FN_MOD2 @ offset=0x00044024
    __IO uint32_t AXI_INI3_FN_MOD2_reg;

    // AXI_INI3_FN_MOD_AHB @ offset=0x00044028
    union {
        __IO uint32_t AXI_INI3_FN_MOD_AHB_reg;

        // bit fields
        struct {
            __IO uint32_t RD_INC_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WR_INC_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI3_FN_MOD_AHB_bits;
    };

    __IO uint8_t RESERVED21[212];

    // AXI_INI3_READ_QOS @ offset=0x00044100
    __IO uint32_t AXI_INI3_READ_QOS_reg;

    // AXI_INI3_WRITE_QOS @ offset=0x00044104
    __IO uint32_t AXI_INI3_WRITE_QOS_reg;

    // AXI_INI3_FN_MOD @ offset=0x00044108
    union {
        __IO uint32_t AXI_INI3_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI3_FN_MOD_bits;
    };

    __IO uint8_t RESERVED22[4084];

    // AXI_INI4_READ_QOS @ offset=0x00045100
    __IO uint32_t AXI_INI4_READ_QOS_reg;

    // AXI_INI4_WRITE_QOS @ offset=0x00045104
    __IO uint32_t AXI_INI4_WRITE_QOS_reg;

    // AXI_INI4_FN_MOD @ offset=0x00045108
    union {
        __IO uint32_t AXI_INI4_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI4_FN_MOD_bits;
    };

    __IO uint8_t RESERVED23[4084];

    // AXI_INI5_READ_QOS @ offset=0x00046100
    __IO uint32_t AXI_INI5_READ_QOS_reg;

    // AXI_INI5_WRITE_QOS @ offset=0x00046104
    __IO uint32_t AXI_INI5_WRITE_QOS_reg;

    // AXI_INI5_FN_MOD @ offset=0x00046108
    union {
        __IO uint32_t AXI_INI5_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI5_FN_MOD_bits;
    };

    __IO uint8_t RESERVED24[4084];

    // AXI_INI6_READ_QOS @ offset=0x00047100
    __IO uint32_t AXI_INI6_READ_QOS_reg;

    // AXI_INI6_WRITE_QOS @ offset=0x00047104
    __IO uint32_t AXI_INI6_WRITE_QOS_reg;

    // AXI_INI6_FN_MOD @ offset=0x00047108
    union {
        __IO uint32_t AXI_INI6_FN_MOD_reg;

        // bit fields
        struct {
            __IO uint32_t READ_ISS_OVERRIDE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRITE_ISS_OVERRIDE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } AXI_INI6_FN_MOD_bits;
    };

} axi_t;

// Peripheral BDMA @ base_addess=0x58025400
typedef struct bdma_t {

    // BDMA_ISR @ offset=0x00000000
    union {
        __IO uint32_t BDMA_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t GIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF4_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF4_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF5_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF5_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF5_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF6_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF6_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF7_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF7_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF7_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF7_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } BDMA_ISR_bits;
    };

    // BDMA_IFCR @ offset=0x00000004
    union {
        __IO uint32_t BDMA_IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CGIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF3_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF4_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF4_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF5_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF5_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF5_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF6_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF6_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF6_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGIF7_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTCIF7_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CHTIF7_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTEIF7_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BDMA_IFCR_bits;
    };

    // BDMA_CCR0 @ offset=0x00000008
    union {
        __IO uint32_t BDMA_CCR0_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR0_bits;
    };

    // BDMA_CNDTR0 @ offset=0x0000000C
    __IO uint32_t BDMA_CNDTR0_reg;

    // BDMA_CPAR0 @ offset=0x00000010
    __IO uint32_t BDMA_CPAR0_reg;

    // BDMA_CM0AR0 @ offset=0x00000014
    __IO uint32_t BDMA_CM0AR0_reg;

    // BDMA_CM1AR0 @ offset=0x00000018
    __IO uint32_t BDMA_CM1AR0_reg;

    // BDMA_CCR1 @ offset=0x0000001C
    union {
        __IO uint32_t BDMA_CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR1_bits;
    };

    // BDMA_CNDTR1 @ offset=0x00000020
    __IO uint32_t BDMA_CNDTR1_reg;

    // BDMA_CPAR1 @ offset=0x00000024
    __IO uint32_t BDMA_CPAR1_reg;

    // BDMA_CM0AR1 @ offset=0x00000028
    __IO uint32_t BDMA_CM0AR1_reg;

    // BDMA_CM1AR1 @ offset=0x0000002C
    __IO uint32_t BDMA_CM1AR1_reg;

    // BDMA_CCR2 @ offset=0x00000030
    union {
        __IO uint32_t BDMA_CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR2_bits;
    };

    // BDMA_CNDTR2 @ offset=0x00000034
    __IO uint32_t BDMA_CNDTR2_reg;

    // BDMA_CPAR2 @ offset=0x00000038
    __IO uint32_t BDMA_CPAR2_reg;

    // BDMA_CM0AR2 @ offset=0x0000003C
    __IO uint32_t BDMA_CM0AR2_reg;

    // BDMA_CM1AR2 @ offset=0x00000040
    __IO uint32_t BDMA_CM1AR2_reg;

    // BDMA_CCR3 @ offset=0x00000044
    union {
        __IO uint32_t BDMA_CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR3_bits;
    };

    // BDMA_CNDTR3 @ offset=0x00000048
    __IO uint32_t BDMA_CNDTR3_reg;

    // BDMA_CPAR3 @ offset=0x0000004C
    __IO uint32_t BDMA_CPAR3_reg;

    // BDMA_CM0AR3 @ offset=0x00000050
    __IO uint32_t BDMA_CM0AR3_reg;

    // BDMA_CM1AR3 @ offset=0x00000054
    __IO uint32_t BDMA_CM1AR3_reg;

    // BDMA_CCR4 @ offset=0x00000058
    union {
        __IO uint32_t BDMA_CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR4_bits;
    };

    // BDMA_CNDTR4 @ offset=0x0000005C
    __IO uint32_t BDMA_CNDTR4_reg;

    // BDMA_CPAR4 @ offset=0x00000060
    __IO uint32_t BDMA_CPAR4_reg;

    // BDMA_CM0AR4 @ offset=0x00000064
    __IO uint32_t BDMA_CM0AR4_reg;

    // BDMA_CM1AR4 @ offset=0x00000068
    __IO uint32_t BDMA_CM1AR4_reg;

    // BDMA_CCR5 @ offset=0x0000006C
    union {
        __IO uint32_t BDMA_CCR5_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR5_bits;
    };

    // BDMA_CNDTR5 @ offset=0x00000070
    __IO uint32_t BDMA_CNDTR5_reg;

    // BDMA_CPAR5 @ offset=0x00000074
    __IO uint32_t BDMA_CPAR5_reg;

    // BDMA_CM0AR5 @ offset=0x00000078
    __IO uint32_t BDMA_CM0AR5_reg;

    // BDMA_CM1AR5 @ offset=0x0000007C
    __IO uint32_t BDMA_CM1AR5_reg;

    // BDMA_CCR6 @ offset=0x00000080
    union {
        __IO uint32_t BDMA_CCR6_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR6_bits;
    };

    // BDMA_CNDTR6 @ offset=0x00000084
    __IO uint32_t BDMA_CNDTR6_reg;

    // BDMA_CPAR6 @ offset=0x00000088
    __IO uint32_t BDMA_CPAR6_reg;

    // BDMA_CM0AR6 @ offset=0x0000008C
    __IO uint32_t BDMA_CM0AR6_reg;

    // BDMA_CM1AR6 @ offset=0x00000090
    __IO uint32_t BDMA_CM1AR6_reg;

    // BDMA_CCR7 @ offset=0x00000094
    union {
        __IO uint32_t BDMA_CCR7_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEM2MEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } BDMA_CCR7_bits;
    };

    // BDMA_CNDTR7 @ offset=0x00000098
    __IO uint32_t BDMA_CNDTR7_reg;

    // BDMA_CPAR7 @ offset=0x0000009C
    __IO uint32_t BDMA_CPAR7_reg;

    // BDMA_CM0AR7 @ offset=0x000000A0
    __IO uint32_t BDMA_CM0AR7_reg;

    // BDMA_CM1AR7 @ offset=0x000000A4
    __IO uint32_t BDMA_CM1AR7_reg;

} bdma_t;

// Peripheral CAN_CCU @ base_addess=0x4000A800
typedef struct can_ccu_t {

    // CREL @ offset=0x00000000
    union {
        __IO uint32_t CREL_reg;

        // bit fields
        struct {
            __IO uint32_t DAY_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MON_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t YEAR_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t SUBSTEP_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t STEP_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t REL_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CREL_bits;
    };

    // CCFG @ offset=0x00000004
    union {
        __IO uint32_t CCFG_reg;

        // bit fields
        struct {
            __IO uint32_t TQBT_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BCC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OCPM_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CDIV_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 11;
            __IO uint32_t SWR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CCFG_bits;
    };

    // CSTAT @ offset=0x00000008
    union {
        __IO uint32_t CSTAT_reg;

        // bit fields
        struct {
            __IO uint32_t OCPC_bit : 18; // bit offset=0  bit width=18  access=SVDAccessType.READ_WRITE
            __IO uint32_t TQC_bit : 11; // bit offset=18  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CALS_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } CSTAT_bits;
    };

    // CWD @ offset=0x0000000C
    union {
        __IO uint32_t CWD_reg;

        // bit fields
        struct {
            __IO uint32_t WDC_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t WDV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CWD_bits;
    };

    // IR @ offset=0x00000010
    union {
        __IO uint32_t IR_reg;

        // bit fields
        struct {
            __IO uint32_t CWE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } IR_bits;
    };

    // IE @ offset=0x00000014
    union {
        __IO uint32_t IE_reg;

        // bit fields
        struct {
            __IO uint32_t CWEE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSCE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } IE_bits;
    };

} can_ccu_t;

// Peripheral CEC @ base_addess=0x40006C00
typedef struct cec_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t CECEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXSOM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEOM_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } CR_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t SFT_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXTOL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRESTP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BREGEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBPEGEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDNOGEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SFTOPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t OAR_bit : 15; // bit offset=16  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSTN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

    // TXDR @ offset=0x00000008
    __IO uint32_t TXDR_reg;

    // RXDR @ offset=0x0000000C
    __IO uint32_t RXDR_reg;

    // ISR @ offset=0x00000010
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t RXBR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXEND_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBPE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBPE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXACKE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARBLST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXBR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEND_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUDR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXACKE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 19;
        } ISR_bits;
    };

    // IER @ offset=0x00000014
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXBRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXENDIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BREIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBPEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBPEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXACKIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARBLSTIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXBRIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXENDIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUDRIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRIE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXACKIE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 19;
        } IER_bits;
    };

} cec_t;

// Peripheral COMP1 @ base_addess=0x58003800
typedef struct comp1_t {

    // SR @ offset=0x00000000
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t C1VAL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t C2VAL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t C1IF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t C2IF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 14;
        } SR_bits;
    };

    // ICFR @ offset=0x00000004
    union {
        __IO uint32_t ICFR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t CC1IF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2IF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 14;
        } ICFR_bits;
    };

    // OR @ offset=0x00000008
    union {
        __IO uint32_t OR_reg;

        // bit fields
        struct {
            __IO uint32_t AFOP_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t OR_bit : 21; // bit offset=11  bit width=21  access=SVDAccessType.READ_WRITE
        } OR_bits;
    };

    // CFGR1 @ offset=0x0000000C
    union {
        __IO uint32_t CFGR1_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRGEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCALEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t POLARITY_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ITEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t HYST_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t PWRMODE_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t INMSEL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t INPSEL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t BLANKING_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 3;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR1_bits;
    };

    // CFGR2 @ offset=0x00000010
    union {
        __IO uint32_t CFGR2_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRGEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCALEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t POLARITY_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WINMODE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t ITEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t HYST_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t PWRMODE_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t INMSEL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t INPSEL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t BLANKING_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 3;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR2_bits;
    };

} comp1_t;

// Peripheral CRC @ base_addess=0x58024C00
typedef struct crc_t {

    // DR @ offset=0x00000000
    __IO uint32_t DR_reg;

    // IDR @ offset=0x00000004
    __IO uint32_t IDR_reg;

    // CR @ offset=0x00000008
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESET_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t POLYSIZE_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t REV_IN_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t REV_OUT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // INIT @ offset=0x00000010
    __IO uint32_t INIT_reg;

    // POL @ offset=0x00000014
    __IO uint32_t POL_reg;

} crc_t;

// Peripheral CRS @ base_addess=0x40008400
typedef struct crs_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCOKIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCWARNIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ESYNCIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTOTRIMEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TRIM_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 18;
        } CR_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t RELOAD_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t FELIM_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCDIV_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SYNCSRC_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SYNCPOL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

    // ISR @ offset=0x00000008
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCOKF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SYNCWARNF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ERRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ESYNCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SYNCERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SYNCMISS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TRIMOVF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t FEDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FECAP_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } ISR_bits;
    };

    // ICR @ offset=0x0000000C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCOKC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCWARNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERRC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ESYNCC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } ICR_bits;
    };

} crs_t;

// Peripheral DAC @ base_addess=0x40007400
typedef struct dac_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEN1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSEL1_bit : 3; // bit offset=2  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t WAVE1_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MAMP1_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAUDRIE1_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CEN1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EN2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEN2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSEL2_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t WAVE2_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MAMP2_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAUDRIE2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CEN2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CR_bits;
    };

    // SWTRGR @ offset=0x00000004
    union {
        __IO uint32_t SWTRGR_reg;

        // bit fields
        struct {
            __IO uint32_t SWTRIG1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SWTRIG2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 30;
        } SWTRGR_bits;
    };

    // DHR12R1 @ offset=0x00000008
    __IO uint32_t DHR12R1_reg;

    // DHR12L1 @ offset=0x0000000C
    __IO uint32_t DHR12L1_reg;

    // DHR8R1 @ offset=0x00000010
    __IO uint32_t DHR8R1_reg;

    // DHR12R2 @ offset=0x00000014
    __IO uint32_t DHR12R2_reg;

    // DHR12L2 @ offset=0x00000018
    __IO uint32_t DHR12L2_reg;

    // DHR8R2 @ offset=0x0000001C
    __IO uint32_t DHR8R2_reg;

    // DHR12RD @ offset=0x00000020
    union {
        __IO uint32_t DHR12RD_reg;

        // bit fields
        struct {
            __IO uint32_t DACC1DHR_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t DACC2DHR_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } DHR12RD_bits;
    };

    // DHR12LD @ offset=0x00000024
    union {
        __IO uint32_t DHR12LD_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t DACC1DHR_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t DACC2DHR_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } DHR12LD_bits;
    };

    // DHR8RD @ offset=0x00000028
    union {
        __IO uint32_t DHR8RD_reg;

        // bit fields
        struct {
            __IO uint32_t DACC1DHR_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DACC2DHR_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } DHR8RD_bits;
    };

    // DOR1 @ offset=0x0000002C
    __IO uint32_t DOR1_reg;

    // DOR2 @ offset=0x00000030
    __IO uint32_t DOR2_reg;

    // SR @ offset=0x00000034
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t DMAUDR1_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CAL_FLAG1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BWST1_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 13;
            __IO uint32_t DMAUDR2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CAL_FLAG2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BWST2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // CCR @ offset=0x00000038
    union {
        __IO uint32_t CCR_reg;

        // bit fields
        struct {
            __IO uint32_t OTRIM1_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t OTRIM2_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 11;
        } CCR_bits;
    };

    // MCR @ offset=0x0000003C
    union {
        __IO uint32_t MCR_reg;

        // bit fields
        struct {
            __IO uint32_t MODE1_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t MODE2_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } MCR_bits;
    };

    // SHSR1 @ offset=0x00000040
    __IO uint32_t SHSR1_reg;

    // SHSR2 @ offset=0x00000044
    __IO uint32_t SHSR2_reg;

    // SHHR @ offset=0x00000048
    union {
        __IO uint32_t SHHR_reg;

        // bit fields
        struct {
            __IO uint32_t THOLD1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 6;
            __IO uint32_t THOLD2_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 6;
        } SHHR_bits;
    };

    // SHRR @ offset=0x0000004C
    union {
        __IO uint32_t SHRR_reg;

        // bit fields
        struct {
            __IO uint32_t TREFRESH1_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t TREFRESH2_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } SHRR_bits;
    };

} dac_t;

// Peripheral DBGMCU @ base_addess=0x5C001000
typedef struct dbgmcu_t {

    // IDC @ offset=0x00000000
    union {
        __IO uint32_t IDC_reg;

        // bit fields
        struct {
            __IO uint32_t DEV_ID_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t REV_ID_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } IDC_bits;
    };

    // CR @ offset=0x00000004
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t DBGSLEEP_D1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBGSTOP_D1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBGSTBY_D1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBGSLEEP_D2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBGSTOP_D2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBGSTBY_D2_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DBGSTOP_D3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBGSTBY_D3_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 11;
            __IO uint32_t TRACECLKEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t D1DBGCKEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t D3DBGCKEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t TRGOEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 3;
        } CR_bits;
    };

    __IO uint8_t RESERVED0[44];

    // APB3FZ1 @ offset=0x00000034
    __IO uint32_t APB3FZ1_reg;

    __IO uint8_t RESERVED1[4];

    // APB1LFZ1 @ offset=0x0000003C
    union {
        __IO uint32_t APB1LFZ1_reg;

        // bit fields
        struct {
            __IO uint32_t DBG_TIM2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM3_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM5_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM6_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM7_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM12_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM13_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM14_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_LPTIM1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t DBG_I2C1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_I2C2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_I2C3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } APB1LFZ1_bits;
    };

    __IO uint8_t RESERVED2[12];

    // APB2FZ1 @ offset=0x0000004C
    union {
        __IO uint32_t APB2FZ1_reg;

        // bit fields
        struct {
            __IO uint32_t DBG_TIM1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM8_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t DBG_TIM15_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM16_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_TIM17_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 10;
            __IO uint32_t DBG_HRTIM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 2;
        } APB2FZ1_bits;
    };

    __IO uint8_t RESERVED3[4];

    // APB4FZ1 @ offset=0x00000054
    union {
        __IO uint32_t APB4FZ1_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t DBG_I2C4_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DBG_LPTIM2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_LPTIM3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_LPTIM4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBG_LPTIM5_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t DBG_RTC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DBG_IWDG1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 13;
        } APB4FZ1_bits;
    };

} dbgmcu_t;

// Peripheral DCMI @ base_addess=0x48020000
typedef struct dcmi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t CAPTURE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CROP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JPEG_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ESS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCKPOL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSPOL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSPOL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FCRC_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EDM_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ENABLE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BSM_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OEBS_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OELS_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 11;
        } CR_bits;
    };

    // SR @ offset=0x00000004
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t HSYNC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VSYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FNE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 29;
        } SR_bits;
    };

    // RIS @ offset=0x00000008
    union {
        __IO uint32_t RIS_reg;

        // bit fields
        struct {
            __IO uint32_t FRAME_RIS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_RIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ERR_RIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VSYNC_RIS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LINE_RIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RIS_bits;
    };

    // IER @ offset=0x0000000C
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t FRAME_IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVR_IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERR_IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSYNC_IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINE_IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } IER_bits;
    };

    // MIS @ offset=0x00000010
    union {
        __IO uint32_t MIS_reg;

        // bit fields
        struct {
            __IO uint32_t FRAME_MIS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_MIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ERR_MIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VSYNC_MIS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LINE_MIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MIS_bits;
    };

    // ICR @ offset=0x00000014
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t FRAME_ISC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVR_ISC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ERR_ISC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t VSYNC_ISC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LINE_ISC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } ICR_bits;
    };

    // ESCR @ offset=0x00000018
    union {
        __IO uint32_t ESCR_reg;

        // bit fields
        struct {
            __IO uint32_t FSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSC_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LEC_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FEC_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } ESCR_bits;
    };

    // ESUR @ offset=0x0000001C
    union {
        __IO uint32_t ESUR_reg;

        // bit fields
        struct {
            __IO uint32_t FSU_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSU_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LEU_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FEU_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } ESUR_bits;
    };

    // CWSTRT @ offset=0x00000020
    union {
        __IO uint32_t CWSTRT_reg;

        // bit fields
        struct {
            __IO uint32_t HOFFCNT_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t VST_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 3;
        } CWSTRT_bits;
    };

    // CWSIZE @ offset=0x00000024
    union {
        __IO uint32_t CWSIZE_reg;

        // bit fields
        struct {
            __IO uint32_t CAPCNT_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t VLINE_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } CWSIZE_bits;
    };

    // DR @ offset=0x00000028
    union {
        __IO uint32_t DR_reg;

        // bit fields
        struct {
            __IO uint32_t BYTE0_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t BYTE1_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t BYTE2_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t BYTE3_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } DR_bits;
    };

} dcmi_t;

// Peripheral DELAY_Block_QUADSPI @ base_addess=0x52006000
typedef struct delay_block_quadspi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t DEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } CR_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t UNIT_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LNG_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t LNGF_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

} delay_block_quadspi_t;

// Peripheral DELAY_Block_SDMMC1 @ base_addess=0x52008000
typedef struct delay_block_sdmmc1_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t DEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } CR_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t UNIT_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LNG_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t LNGF_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

} delay_block_sdmmc1_t;

// Peripheral DELAY_Block_SDMMC2 @ base_addess=0x48022800
typedef struct delay_block_sdmmc2_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t DEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } CR_bits;
    };

    // CFGR @ offset=0x00000004
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t UNIT_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LNG_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t LNGF_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

} delay_block_sdmmc2_t;

// Peripheral DFSDM @ base_addess=0x40017000
typedef struct dfsdm_t {

    // DFSDM_CHCFG0R1 @ offset=0x00000000
    union {
        __IO uint32_t DFSDM_CHCFG0R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG0R1_bits;
    };

    // DFSDM_CHCFG1R1 @ offset=0x00000004
    union {
        __IO uint32_t DFSDM_CHCFG1R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG1R1_bits;
    };

    // DFSDM_CHCFG2R1 @ offset=0x00000008
    union {
        __IO uint32_t DFSDM_CHCFG2R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG2R1_bits;
    };

    // DFSDM_CHCFG3R1 @ offset=0x0000000C
    union {
        __IO uint32_t DFSDM_CHCFG3R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG3R1_bits;
    };

    // DFSDM_CHCFG4R1 @ offset=0x00000010
    union {
        __IO uint32_t DFSDM_CHCFG4R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG4R1_bits;
    };

    // DFSDM_CHCFG5R1 @ offset=0x00000014
    union {
        __IO uint32_t DFSDM_CHCFG5R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG5R1_bits;
    };

    // DFSDM_CHCFG6R1 @ offset=0x00000018
    union {
        __IO uint32_t DFSDM_CHCFG6R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG6R1_bits;
    };

    // DFSDM_CHCFG7R1 @ offset=0x0000001C
    union {
        __IO uint32_t DFSDM_CHCFG7R1_reg;

        // bit fields
        struct {
            __IO uint32_t SITP_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPICKSEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCDEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHINSEL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DATMPX_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATPACK_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKOUTDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t CKOUTSRC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DFSDMEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG7R1_bits;
    };

    // DFSDM_CHCFG0R2 @ offset=0x00000020
    union {
        __IO uint32_t DFSDM_CHCFG0R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG0R2_bits;
    };

    // DFSDM_CHCFG1R2 @ offset=0x00000024
    union {
        __IO uint32_t DFSDM_CHCFG1R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG1R2_bits;
    };

    // DFSDM_CHCFG2R2 @ offset=0x00000028
    union {
        __IO uint32_t DFSDM_CHCFG2R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG2R2_bits;
    };

    // DFSDM_CHCFG3R2 @ offset=0x0000002C
    union {
        __IO uint32_t DFSDM_CHCFG3R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG3R2_bits;
    };

    // DFSDM_CHCFG4R2 @ offset=0x00000030
    union {
        __IO uint32_t DFSDM_CHCFG4R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG4R2_bits;
    };

    // DFSDM_CHCFG5R2 @ offset=0x00000034
    union {
        __IO uint32_t DFSDM_CHCFG5R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG5R2_bits;
    };

    // DFSDM_CHCFG6R2 @ offset=0x00000038
    union {
        __IO uint32_t DFSDM_CHCFG6R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG6R2_bits;
    };

    // DFSDM_CHCFG7R2 @ offset=0x0000003C
    union {
        __IO uint32_t DFSDM_CHCFG7R2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DTRBS_bit : 5; // bit offset=3  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFFSET_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM_CHCFG7R2_bits;
    };

    // DFSDM_AWSCD0R @ offset=0x00000040
    union {
        __IO uint32_t DFSDM_AWSCD0R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD0R_bits;
    };

    // DFSDM_AWSCD1R @ offset=0x00000044
    union {
        __IO uint32_t DFSDM_AWSCD1R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD1R_bits;
    };

    // DFSDM_AWSCD2R @ offset=0x00000048
    union {
        __IO uint32_t DFSDM_AWSCD2R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD2R_bits;
    };

    // DFSDM_AWSCD3R @ offset=0x0000004C
    union {
        __IO uint32_t DFSDM_AWSCD3R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD3R_bits;
    };

    // DFSDM_AWSCD4R @ offset=0x00000050
    union {
        __IO uint32_t DFSDM_AWSCD4R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD4R_bits;
    };

    // DFSDM_AWSCD5R @ offset=0x00000054
    union {
        __IO uint32_t DFSDM_AWSCD5R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD5R_bits;
    };

    // DFSDM_AWSCD6R @ offset=0x00000058
    union {
        __IO uint32_t DFSDM_AWSCD6R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD6R_bits;
    };

    // DFSDM_AWSCD7R @ offset=0x0000005C
    union {
        __IO uint32_t DFSDM_AWSCD7R_reg;

        // bit fields
        struct {
            __IO uint32_t SCDT_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BKSCD_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFOSR_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t AWFORD_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DFSDM_AWSCD7R_bits;
    };

    // DFSDM_CHWDAT0R @ offset=0x00000060
    __IO uint32_t DFSDM_CHWDAT0R_reg;

    // DFSDM_CHWDAT1R @ offset=0x00000064
    __IO uint32_t DFSDM_CHWDAT1R_reg;

    // DFSDM_CHWDAT2R @ offset=0x00000068
    __IO uint32_t DFSDM_CHWDAT2R_reg;

    // DFSDM_CHWDAT3R @ offset=0x0000006C
    __IO uint32_t DFSDM_CHWDAT3R_reg;

    // DFSDM_CHWDAT4R @ offset=0x00000070
    __IO uint32_t DFSDM_CHWDAT4R_reg;

    // DFSDM_CHWDAT5R @ offset=0x00000074
    __IO uint32_t DFSDM_CHWDAT5R_reg;

    // DFSDM_CHWDAT6R @ offset=0x00000078
    __IO uint32_t DFSDM_CHWDAT6R_reg;

    // DFSDM_CHWDAT7R @ offset=0x0000007C
    __IO uint32_t DFSDM_CHWDAT7R_reg;

    // DFSDM_CHDATIN0R @ offset=0x00000080
    union {
        __IO uint32_t DFSDM_CHDATIN0R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN0R_bits;
    };

    // DFSDM_CHDATIN1R @ offset=0x00000084
    union {
        __IO uint32_t DFSDM_CHDATIN1R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN1R_bits;
    };

    // DFSDM_CHDATIN2R @ offset=0x00000088
    union {
        __IO uint32_t DFSDM_CHDATIN2R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN2R_bits;
    };

    // DFSDM_CHDATIN3R @ offset=0x0000008C
    union {
        __IO uint32_t DFSDM_CHDATIN3R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN3R_bits;
    };

    // DFSDM_CHDATIN4R @ offset=0x00000090
    union {
        __IO uint32_t DFSDM_CHDATIN4R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN4R_bits;
    };

    // DFSDM_CHDATIN5R @ offset=0x00000094
    union {
        __IO uint32_t DFSDM_CHDATIN5R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN5R_bits;
    };

    // DFSDM_CHDATIN6R @ offset=0x00000098
    union {
        __IO uint32_t DFSDM_CHDATIN6R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN6R_bits;
    };

    // DFSDM_CHDATIN7R @ offset=0x0000009C
    union {
        __IO uint32_t DFSDM_CHDATIN7R_reg;

        // bit fields
        struct {
            __IO uint32_t INDAT0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INDAT1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } DFSDM_CHDATIN7R_bits;
    };

    // DFSDM0_CR1 @ offset=0x000000A0
    union {
        __IO uint32_t DFSDM0_CR1_reg;

        // bit fields
        struct {
            __IO uint32_t DFEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSWSTART_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSYNC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSCAN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDMAEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t RSWSTART_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCONT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSYNC_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t RDMAEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 2;
            __IO uint32_t RCH_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 2;
            __IO uint32_t FAST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFSEL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 1;
        } DFSDM0_CR1_bits;
    };

    // DFSDM1_CR1 @ offset=0x000000A4
    union {
        __IO uint32_t DFSDM1_CR1_reg;

        // bit fields
        struct {
            __IO uint32_t DFEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSWSTART_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSYNC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSCAN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDMAEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t RSWSTART_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCONT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSYNC_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t RDMAEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 2;
            __IO uint32_t RCH_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 2;
            __IO uint32_t FAST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFSEL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 1;
        } DFSDM1_CR1_bits;
    };

    // DFSDM2_CR1 @ offset=0x000000A8
    union {
        __IO uint32_t DFSDM2_CR1_reg;

        // bit fields
        struct {
            __IO uint32_t DFEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSWSTART_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSYNC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSCAN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDMAEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t RSWSTART_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCONT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSYNC_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t RDMAEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 2;
            __IO uint32_t RCH_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 2;
            __IO uint32_t FAST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFSEL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 1;
        } DFSDM2_CR1_bits;
    };

    // DFSDM3_CR1 @ offset=0x000000AC
    union {
        __IO uint32_t DFSDM3_CR1_reg;

        // bit fields
        struct {
            __IO uint32_t DFEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSWSTART_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t JSYNC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JSCAN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JDMAEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t JEXTSEL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t JEXTEN_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t RSWSTART_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCONT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSYNC_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t RDMAEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 2;
            __IO uint32_t RCH_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 2;
            __IO uint32_t FAST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWFSEL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 1;
        } DFSDM3_CR1_bits;
    };

    // DFSDM0_CR2 @ offset=0x000000B0
    union {
        __IO uint32_t DFSDM0_CR2_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REOCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCDIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EXCH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } DFSDM0_CR2_bits;
    };

    // DFSDM1_CR2 @ offset=0x000000B4
    union {
        __IO uint32_t DFSDM1_CR2_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REOCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCDIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EXCH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } DFSDM1_CR2_bits;
    };

    // DFSDM2_CR2 @ offset=0x000000B8
    union {
        __IO uint32_t DFSDM2_CR2_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REOCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCDIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EXCH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } DFSDM2_CR2_bits;
    };

    // DFSDM3_CR2 @ offset=0x000000BC
    union {
        __IO uint32_t DFSDM3_CR2_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REOCIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JOVRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ROVRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCDIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKABIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EXCH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWDCH_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } DFSDM3_CR2_bits;
    };

    // DFSDM0_ISR @ offset=0x000000C0
    union {
        __IO uint32_t DFSDM0_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REOCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWDF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t JCIP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RCIP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t SCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } DFSDM0_ISR_bits;
    };

    // DFSDM1_ISR @ offset=0x000000C4
    union {
        __IO uint32_t DFSDM1_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REOCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWDF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t JCIP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RCIP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t SCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } DFSDM1_ISR_bits;
    };

    // DFSDM2_ISR @ offset=0x000000C8
    union {
        __IO uint32_t DFSDM2_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REOCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWDF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t JCIP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RCIP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t SCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } DFSDM2_ISR_bits;
    };

    // DFSDM3_ISR @ offset=0x000000CC
    union {
        __IO uint32_t DFSDM3_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t JEOCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REOCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t JOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWDF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t JCIP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RCIP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t SCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } DFSDM3_ISR_bits;
    };

    // DFSDM0_ICR @ offset=0x000000D0
    union {
        __IO uint32_t DFSDM0_ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CLRJOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 12;
            __IO uint32_t CLRCKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRSCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } DFSDM0_ICR_bits;
    };

    // DFSDM1_ICR @ offset=0x000000D4
    union {
        __IO uint32_t DFSDM1_ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CLRJOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 12;
            __IO uint32_t CLRCKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRSCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } DFSDM1_ICR_bits;
    };

    // DFSDM2_ICR @ offset=0x000000D8
    union {
        __IO uint32_t DFSDM2_ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CLRJOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 12;
            __IO uint32_t CLRCKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRSCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } DFSDM2_ICR_bits;
    };

    // DFSDM3_ICR @ offset=0x000000DC
    union {
        __IO uint32_t DFSDM3_ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CLRJOVRF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRROVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 12;
            __IO uint32_t CLRCKABF_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRSCDF_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } DFSDM3_ICR_bits;
    };

    // DFSDM0_JCHGR @ offset=0x000000E0
    __IO uint32_t DFSDM0_JCHGR_reg;

    // DFSDM1_JCHGR @ offset=0x000000E4
    __IO uint32_t DFSDM1_JCHGR_reg;

    // DFSDM2_JCHGR @ offset=0x000000E8
    __IO uint32_t DFSDM2_JCHGR_reg;

    // DFSDM3_JCHGR @ offset=0x000000EC
    __IO uint32_t DFSDM3_JCHGR_reg;

    // DFSDM0_FCR @ offset=0x000000F0
    union {
        __IO uint32_t DFSDM0_FCR_reg;

        // bit fields
        struct {
            __IO uint32_t IOSR_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t FOSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t FORD_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } DFSDM0_FCR_bits;
    };

    // DFSDM1_FCR @ offset=0x000000F4
    union {
        __IO uint32_t DFSDM1_FCR_reg;

        // bit fields
        struct {
            __IO uint32_t IOSR_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t FOSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t FORD_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } DFSDM1_FCR_bits;
    };

    // DFSDM2_FCR @ offset=0x000000F8
    union {
        __IO uint32_t DFSDM2_FCR_reg;

        // bit fields
        struct {
            __IO uint32_t IOSR_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t FOSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t FORD_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } DFSDM2_FCR_bits;
    };

    // DFSDM3_FCR @ offset=0x000000FC
    union {
        __IO uint32_t DFSDM3_FCR_reg;

        // bit fields
        struct {
            __IO uint32_t IOSR_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t FOSR_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t FORD_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } DFSDM3_FCR_bits;
    };

    // DFSDM0_JDATAR @ offset=0x00000100
    union {
        __IO uint32_t DFSDM0_JDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t JDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t JDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM0_JDATAR_bits;
    };

    // DFSDM1_JDATAR @ offset=0x00000104
    union {
        __IO uint32_t DFSDM1_JDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t JDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t JDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM1_JDATAR_bits;
    };

    // DFSDM2_JDATAR @ offset=0x00000108
    union {
        __IO uint32_t DFSDM2_JDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t JDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t JDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM2_JDATAR_bits;
    };

    // DFSDM3_JDATAR @ offset=0x0000010C
    union {
        __IO uint32_t DFSDM3_JDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t JDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t JDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM3_JDATAR_bits;
    };

    // DFSDM0_RDATAR @ offset=0x00000110
    union {
        __IO uint32_t DFSDM0_RDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t RDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RPEND_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t RDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM0_RDATAR_bits;
    };

    // DFSDM1_RDATAR @ offset=0x00000114
    union {
        __IO uint32_t DFSDM1_RDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t RDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RPEND_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t RDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM1_RDATAR_bits;
    };

    // DFSDM2_RDATAR @ offset=0x00000118
    union {
        __IO uint32_t DFSDM2_RDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t RDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RPEND_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t RDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM2_RDATAR_bits;
    };

    // DFSDM3_RDATAR @ offset=0x0000011C
    union {
        __IO uint32_t DFSDM3_RDATAR_reg;

        // bit fields
        struct {
            __IO uint32_t RDATACH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RPEND_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t RDATA_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM3_RDATAR_bits;
    };

    // DFSDM0_AWHTR @ offset=0x00000120
    union {
        __IO uint32_t DFSDM0_AWHTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWH_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWHT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM0_AWHTR_bits;
    };

    // DFSDM1_AWHTR @ offset=0x00000124
    union {
        __IO uint32_t DFSDM1_AWHTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWH_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWHT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM1_AWHTR_bits;
    };

    // DFSDM2_AWHTR @ offset=0x00000128
    union {
        __IO uint32_t DFSDM2_AWHTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWH_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWHT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM2_AWHTR_bits;
    };

    // DFSDM3_AWHTR @ offset=0x0000012C
    union {
        __IO uint32_t DFSDM3_AWHTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWH_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWHT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM3_AWHTR_bits;
    };

    // DFSDM0_AWLTR @ offset=0x00000130
    union {
        __IO uint32_t DFSDM0_AWLTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWLT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM0_AWLTR_bits;
    };

    // DFSDM1_AWLTR @ offset=0x00000134
    union {
        __IO uint32_t DFSDM1_AWLTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWLT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM1_AWLTR_bits;
    };

    // DFSDM2_AWLTR @ offset=0x00000138
    union {
        __IO uint32_t DFSDM2_AWLTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWLT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM2_AWLTR_bits;
    };

    // DFSDM3_AWLTR @ offset=0x0000013C
    union {
        __IO uint32_t DFSDM3_AWLTR_reg;

        // bit fields
        struct {
            __IO uint32_t BKAWL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t AWLT_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_WRITE
        } DFSDM3_AWLTR_bits;
    };

    // DFSDM0_AWSR @ offset=0x00000140
    union {
        __IO uint32_t DFSDM0_AWSR_reg;

        // bit fields
        struct {
            __IO uint32_t AWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } DFSDM0_AWSR_bits;
    };

    // DFSDM1_AWSR @ offset=0x00000144
    union {
        __IO uint32_t DFSDM1_AWSR_reg;

        // bit fields
        struct {
            __IO uint32_t AWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } DFSDM1_AWSR_bits;
    };

    // DFSDM2_AWSR @ offset=0x00000148
    union {
        __IO uint32_t DFSDM2_AWSR_reg;

        // bit fields
        struct {
            __IO uint32_t AWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } DFSDM2_AWSR_bits;
    };

    // DFSDM3_AWSR @ offset=0x0000014C
    union {
        __IO uint32_t DFSDM3_AWSR_reg;

        // bit fields
        struct {
            __IO uint32_t AWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t AWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } DFSDM3_AWSR_bits;
    };

    // DFSDM0_AWCFR @ offset=0x00000150
    union {
        __IO uint32_t DFSDM0_AWCFR_reg;

        // bit fields
        struct {
            __IO uint32_t CLRAWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRAWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } DFSDM0_AWCFR_bits;
    };

    // DFSDM1_AWCFR @ offset=0x00000154
    union {
        __IO uint32_t DFSDM1_AWCFR_reg;

        // bit fields
        struct {
            __IO uint32_t CLRAWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRAWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } DFSDM1_AWCFR_bits;
    };

    // DFSDM2_AWCFR @ offset=0x00000158
    union {
        __IO uint32_t DFSDM2_AWCFR_reg;

        // bit fields
        struct {
            __IO uint32_t CLRAWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRAWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } DFSDM2_AWCFR_bits;
    };

    // DFSDM3_AWCFR @ offset=0x0000015C
    union {
        __IO uint32_t DFSDM3_AWCFR_reg;

        // bit fields
        struct {
            __IO uint32_t CLRAWLTF_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLRAWHTF_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } DFSDM3_AWCFR_bits;
    };

    // DFSDM0_EXMAX @ offset=0x00000160
    union {
        __IO uint32_t DFSDM0_EXMAX_reg;

        // bit fields
        struct {
            __IO uint32_t EXMAXCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMAX_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM0_EXMAX_bits;
    };

    // DFSDM1_EXMAX @ offset=0x00000164
    union {
        __IO uint32_t DFSDM1_EXMAX_reg;

        // bit fields
        struct {
            __IO uint32_t EXMAXCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMAX_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM1_EXMAX_bits;
    };

    // DFSDM2_EXMAX @ offset=0x00000168
    union {
        __IO uint32_t DFSDM2_EXMAX_reg;

        // bit fields
        struct {
            __IO uint32_t EXMAXCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMAX_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM2_EXMAX_bits;
    };

    // DFSDM3_EXMAX @ offset=0x0000016C
    union {
        __IO uint32_t DFSDM3_EXMAX_reg;

        // bit fields
        struct {
            __IO uint32_t EXMAXCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMAX_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM3_EXMAX_bits;
    };

    // DFSDM0_EXMIN @ offset=0x00000170
    union {
        __IO uint32_t DFSDM0_EXMIN_reg;

        // bit fields
        struct {
            __IO uint32_t EXMINCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMIN_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM0_EXMIN_bits;
    };

    // DFSDM1_EXMIN @ offset=0x00000174
    union {
        __IO uint32_t DFSDM1_EXMIN_reg;

        // bit fields
        struct {
            __IO uint32_t EXMINCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMIN_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM1_EXMIN_bits;
    };

    // DFSDM2_EXMIN @ offset=0x00000178
    union {
        __IO uint32_t DFSDM2_EXMIN_reg;

        // bit fields
        struct {
            __IO uint32_t EXMINCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMIN_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM2_EXMIN_bits;
    };

    // DFSDM3_EXMIN @ offset=0x0000017C
    union {
        __IO uint32_t DFSDM3_EXMIN_reg;

        // bit fields
        struct {
            __IO uint32_t EXMINCH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t EXMIN_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
        } DFSDM3_EXMIN_bits;
    };

    // DFSDM0_CNVTIMR @ offset=0x00000180
    __IO uint32_t DFSDM0_CNVTIMR_reg;

    // DFSDM1_CNVTIMR @ offset=0x00000184
    __IO uint32_t DFSDM1_CNVTIMR_reg;

    // DFSDM2_CNVTIMR @ offset=0x00000188
    __IO uint32_t DFSDM2_CNVTIMR_reg;

    // DFSDM3_CNVTIMR @ offset=0x0000018C
    __IO uint32_t DFSDM3_CNVTIMR_reg;

} dfsdm_t;

// Peripheral DMA1 @ base_addess=0x40020000
typedef struct dma1_t {

    // LISR @ offset=0x00000000
    union {
        __IO uint32_t LISR_reg;

        // bit fields
        struct {
            __IO uint32_t FEIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DMEIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DMEIF1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t FEIF2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DMEIF2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DMEIF3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED5 : 4;
        } LISR_bits;
    };

    // HISR @ offset=0x00000004
    union {
        __IO uint32_t HISR_reg;

        // bit fields
        struct {
            __IO uint32_t FEIF4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DMEIF4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DMEIF5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t FEIF6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DMEIF6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DMEIF7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED5 : 4;
        } HISR_bits;
    };

    // LIFCR @ offset=0x00000008
    union {
        __IO uint32_t LIFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CFEIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CDMEIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CDMEIF1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t CFEIF2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CDMEIF2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t CDMEIF3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 4;
        } LIFCR_bits;
    };

    // HIFCR @ offset=0x0000000C
    union {
        __IO uint32_t HIFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CFEIF4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CDMEIF4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CDMEIF5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t CFEIF6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CDMEIF6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t CDMEIF7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 4;
        } HIFCR_bits;
    };

    // S0CR @ offset=0x00000010
    union {
        __IO uint32_t S0CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 7;
        } S0CR_bits;
    };

    // S0NDTR @ offset=0x00000014
    __IO uint32_t S0NDTR_reg;

    // S0PAR @ offset=0x00000018
    __IO uint32_t S0PAR_reg;

    // S0M0AR @ offset=0x0000001C
    __IO uint32_t S0M0AR_reg;

    // S0M1AR @ offset=0x00000020
    __IO uint32_t S0M1AR_reg;

    // S0FCR @ offset=0x00000024
    union {
        __IO uint32_t S0FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S0FCR_bits;
    };

    // S1CR @ offset=0x00000028
    union {
        __IO uint32_t S1CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S1CR_bits;
    };

    // S1NDTR @ offset=0x0000002C
    __IO uint32_t S1NDTR_reg;

    // S1PAR @ offset=0x00000030
    __IO uint32_t S1PAR_reg;

    // S1M0AR @ offset=0x00000034
    __IO uint32_t S1M0AR_reg;

    // S1M1AR @ offset=0x00000038
    __IO uint32_t S1M1AR_reg;

    // S1FCR @ offset=0x0000003C
    union {
        __IO uint32_t S1FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S1FCR_bits;
    };

    // S2CR @ offset=0x00000040
    union {
        __IO uint32_t S2CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S2CR_bits;
    };

    // S2NDTR @ offset=0x00000044
    __IO uint32_t S2NDTR_reg;

    // S2PAR @ offset=0x00000048
    __IO uint32_t S2PAR_reg;

    // S2M0AR @ offset=0x0000004C
    __IO uint32_t S2M0AR_reg;

    // S2M1AR @ offset=0x00000050
    __IO uint32_t S2M1AR_reg;

    // S2FCR @ offset=0x00000054
    union {
        __IO uint32_t S2FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S2FCR_bits;
    };

    // S3CR @ offset=0x00000058
    union {
        __IO uint32_t S3CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S3CR_bits;
    };

    // S3NDTR @ offset=0x0000005C
    __IO uint32_t S3NDTR_reg;

    // S3PAR @ offset=0x00000060
    __IO uint32_t S3PAR_reg;

    // S3M0AR @ offset=0x00000064
    __IO uint32_t S3M0AR_reg;

    // S3M1AR @ offset=0x00000068
    __IO uint32_t S3M1AR_reg;

    // S3FCR @ offset=0x0000006C
    union {
        __IO uint32_t S3FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S3FCR_bits;
    };

    // S4CR @ offset=0x00000070
    union {
        __IO uint32_t S4CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S4CR_bits;
    };

    // S4NDTR @ offset=0x00000074
    __IO uint32_t S4NDTR_reg;

    // S4PAR @ offset=0x00000078
    __IO uint32_t S4PAR_reg;

    // S4M0AR @ offset=0x0000007C
    __IO uint32_t S4M0AR_reg;

    // S4M1AR @ offset=0x00000080
    __IO uint32_t S4M1AR_reg;

    // S4FCR @ offset=0x00000084
    union {
        __IO uint32_t S4FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S4FCR_bits;
    };

    // S5CR @ offset=0x00000088
    union {
        __IO uint32_t S5CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S5CR_bits;
    };

    // S5NDTR @ offset=0x0000008C
    __IO uint32_t S5NDTR_reg;

    // S5PAR @ offset=0x00000090
    __IO uint32_t S5PAR_reg;

    // S5M0AR @ offset=0x00000094
    __IO uint32_t S5M0AR_reg;

    // S5M1AR @ offset=0x00000098
    __IO uint32_t S5M1AR_reg;

    // S5FCR @ offset=0x0000009C
    union {
        __IO uint32_t S5FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S5FCR_bits;
    };

    // S6CR @ offset=0x000000A0
    union {
        __IO uint32_t S6CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S6CR_bits;
    };

    // S6NDTR @ offset=0x000000A4
    __IO uint32_t S6NDTR_reg;

    // S6PAR @ offset=0x000000A8
    __IO uint32_t S6PAR_reg;

    // S6M0AR @ offset=0x000000AC
    __IO uint32_t S6M0AR_reg;

    // S6M1AR @ offset=0x000000B0
    __IO uint32_t S6M1AR_reg;

    // S6FCR @ offset=0x000000B4
    union {
        __IO uint32_t S6FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S6FCR_bits;
    };

    // S7CR @ offset=0x000000B8
    union {
        __IO uint32_t S7CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S7CR_bits;
    };

    // S7NDTR @ offset=0x000000BC
    __IO uint32_t S7NDTR_reg;

    // S7PAR @ offset=0x000000C0
    __IO uint32_t S7PAR_reg;

    // S7M0AR @ offset=0x000000C4
    __IO uint32_t S7M0AR_reg;

    // S7M1AR @ offset=0x000000C8
    __IO uint32_t S7M1AR_reg;

    // S7FCR @ offset=0x000000CC
    union {
        __IO uint32_t S7FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S7FCR_bits;
    };

} dma1_t;

// Peripheral DMA2 @ base_addess=0x40020400
typedef struct dma2_t {

    // LISR @ offset=0x00000000
    union {
        __IO uint32_t LISR_reg;

        // bit fields
        struct {
            __IO uint32_t FEIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DMEIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DMEIF1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t FEIF2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DMEIF2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DMEIF3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED5 : 4;
        } LISR_bits;
    };

    // HISR @ offset=0x00000004
    union {
        __IO uint32_t HISR_reg;

        // bit fields
        struct {
            __IO uint32_t FEIF4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DMEIF4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DMEIF5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t FEIF6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DMEIF6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FEIF7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DMEIF7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEIF7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HTIF7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED5 : 4;
        } HISR_bits;
    };

    // LIFCR @ offset=0x00000008
    union {
        __IO uint32_t LIFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CFEIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CDMEIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CDMEIF1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF1_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t CFEIF2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CDMEIF2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF3_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t CDMEIF3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF3_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF3_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 4;
        } LIFCR_bits;
    };

    // HIFCR @ offset=0x0000000C
    union {
        __IO uint32_t HIFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CFEIF4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CDMEIF4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF4_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF5_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CDMEIF5_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF5_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF5_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t CFEIF6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CDMEIF6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF6_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF6_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF6_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CFEIF7_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t CDMEIF7_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTEIF7_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHTIF7_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 4;
        } HIFCR_bits;
    };

    // S0CR @ offset=0x00000010
    union {
        __IO uint32_t S0CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 7;
        } S0CR_bits;
    };

    // S0NDTR @ offset=0x00000014
    __IO uint32_t S0NDTR_reg;

    // S0PAR @ offset=0x00000018
    __IO uint32_t S0PAR_reg;

    // S0M0AR @ offset=0x0000001C
    __IO uint32_t S0M0AR_reg;

    // S0M1AR @ offset=0x00000020
    __IO uint32_t S0M1AR_reg;

    // S0FCR @ offset=0x00000024
    union {
        __IO uint32_t S0FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S0FCR_bits;
    };

    // S1CR @ offset=0x00000028
    union {
        __IO uint32_t S1CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S1CR_bits;
    };

    // S1NDTR @ offset=0x0000002C
    __IO uint32_t S1NDTR_reg;

    // S1PAR @ offset=0x00000030
    __IO uint32_t S1PAR_reg;

    // S1M0AR @ offset=0x00000034
    __IO uint32_t S1M0AR_reg;

    // S1M1AR @ offset=0x00000038
    __IO uint32_t S1M1AR_reg;

    // S1FCR @ offset=0x0000003C
    union {
        __IO uint32_t S1FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S1FCR_bits;
    };

    // S2CR @ offset=0x00000040
    union {
        __IO uint32_t S2CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S2CR_bits;
    };

    // S2NDTR @ offset=0x00000044
    __IO uint32_t S2NDTR_reg;

    // S2PAR @ offset=0x00000048
    __IO uint32_t S2PAR_reg;

    // S2M0AR @ offset=0x0000004C
    __IO uint32_t S2M0AR_reg;

    // S2M1AR @ offset=0x00000050
    __IO uint32_t S2M1AR_reg;

    // S2FCR @ offset=0x00000054
    union {
        __IO uint32_t S2FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S2FCR_bits;
    };

    // S3CR @ offset=0x00000058
    union {
        __IO uint32_t S3CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S3CR_bits;
    };

    // S3NDTR @ offset=0x0000005C
    __IO uint32_t S3NDTR_reg;

    // S3PAR @ offset=0x00000060
    __IO uint32_t S3PAR_reg;

    // S3M0AR @ offset=0x00000064
    __IO uint32_t S3M0AR_reg;

    // S3M1AR @ offset=0x00000068
    __IO uint32_t S3M1AR_reg;

    // S3FCR @ offset=0x0000006C
    union {
        __IO uint32_t S3FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S3FCR_bits;
    };

    // S4CR @ offset=0x00000070
    union {
        __IO uint32_t S4CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S4CR_bits;
    };

    // S4NDTR @ offset=0x00000074
    __IO uint32_t S4NDTR_reg;

    // S4PAR @ offset=0x00000078
    __IO uint32_t S4PAR_reg;

    // S4M0AR @ offset=0x0000007C
    __IO uint32_t S4M0AR_reg;

    // S4M1AR @ offset=0x00000080
    __IO uint32_t S4M1AR_reg;

    // S4FCR @ offset=0x00000084
    union {
        __IO uint32_t S4FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S4FCR_bits;
    };

    // S5CR @ offset=0x00000088
    union {
        __IO uint32_t S5CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S5CR_bits;
    };

    // S5NDTR @ offset=0x0000008C
    __IO uint32_t S5NDTR_reg;

    // S5PAR @ offset=0x00000090
    __IO uint32_t S5PAR_reg;

    // S5M0AR @ offset=0x00000094
    __IO uint32_t S5M0AR_reg;

    // S5M1AR @ offset=0x00000098
    __IO uint32_t S5M1AR_reg;

    // S5FCR @ offset=0x0000009C
    union {
        __IO uint32_t S5FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S5FCR_bits;
    };

    // S6CR @ offset=0x000000A0
    union {
        __IO uint32_t S6CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S6CR_bits;
    };

    // S6NDTR @ offset=0x000000A4
    __IO uint32_t S6NDTR_reg;

    // S6PAR @ offset=0x000000A8
    __IO uint32_t S6PAR_reg;

    // S6M0AR @ offset=0x000000AC
    __IO uint32_t S6M0AR_reg;

    // S6M1AR @ offset=0x000000B0
    __IO uint32_t S6M1AR_reg;

    // S6FCR @ offset=0x000000B4
    union {
        __IO uint32_t S6FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S6FCR_bits;
    };

    // S7CR @ offset=0x000000B8
    union {
        __IO uint32_t S7CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFCTRL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIRC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MINC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSIZE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINCOS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBURST_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MBURST_bit : 2; // bit offset=23  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } S7CR_bits;
    };

    // S7NDTR @ offset=0x000000BC
    __IO uint32_t S7NDTR_reg;

    // S7PAR @ offset=0x000000C0
    __IO uint32_t S7PAR_reg;

    // S7M0AR @ offset=0x000000C4
    __IO uint32_t S7M0AR_reg;

    // S7M1AR @ offset=0x000000C8
    __IO uint32_t S7M1AR_reg;

    // S7FCR @ offset=0x000000CC
    union {
        __IO uint32_t S7FCR_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } S7FCR_bits;
    };

} dma2_t;

// Peripheral DMA2D @ base_addess=0x52001000
typedef struct dma2d_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t START_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SUSP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABORT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t TEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TWIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CAEIE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CEIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t MODE_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } CR_bits;
    };

    // ISR @ offset=0x00000004
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TWIF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CAEIF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CEIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 26;
        } ISR_bits;
    };

    // IFCR @ offset=0x00000008
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTWIF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CAECIF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCTCIF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCEIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 26;
        } IFCR_bits;
    };

    // FGMAR @ offset=0x0000000C
    __IO uint32_t FGMAR_reg;

    // FGOR @ offset=0x00000010
    __IO uint32_t FGOR_reg;

    // BGMAR @ offset=0x00000014
    __IO uint32_t BGMAR_reg;

    // BGOR @ offset=0x00000018
    __IO uint32_t BGOR_reg;

    // FGPFCCR @ offset=0x0000001C
    union {
        __IO uint32_t FGPFCCR_reg;

        // bit fields
        struct {
            __IO uint32_t CM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CS_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t AM_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSS_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t AI_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t ALPHA_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } FGPFCCR_bits;
    };

    // FGCOLR @ offset=0x00000020
    union {
        __IO uint32_t FGCOLR_reg;

        // bit fields
        struct {
            __IO uint32_t BLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } FGCOLR_bits;
    };

    // BGPFCCR @ offset=0x00000024
    union {
        __IO uint32_t BGPFCCR_reg;

        // bit fields
        struct {
            __IO uint32_t CM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CS_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t AM_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t AI_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t ALPHA_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } BGPFCCR_bits;
    };

    // BGCOLR @ offset=0x00000028
    union {
        __IO uint32_t BGCOLR_reg;

        // bit fields
        struct {
            __IO uint32_t BLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } BGCOLR_bits;
    };

    // FGCMAR @ offset=0x0000002C
    __IO uint32_t FGCMAR_reg;

    // BGCMAR @ offset=0x00000030
    __IO uint32_t BGCMAR_reg;

    // OPFCCR @ offset=0x00000034
    union {
        __IO uint32_t OPFCCR_reg;

        // bit fields
        struct {
            __IO uint32_t CM_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 17;
            __IO uint32_t AI_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 10;
        } OPFCCR_bits;
    };

    // OCOLR @ offset=0x00000038
    union {
        __IO uint32_t OCOLR_reg;

        // bit fields
        struct {
            __IO uint32_t BLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALPHA_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } OCOLR_bits;
    };

    // OMAR @ offset=0x0000003C
    __IO uint32_t OMAR_reg;

    // OOR @ offset=0x00000040
    __IO uint32_t OOR_reg;

    // NLR @ offset=0x00000044
    union {
        __IO uint32_t NLR_reg;

        // bit fields
        struct {
            __IO uint32_t NL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } NLR_bits;
    };

    // LWR @ offset=0x00000048
    __IO uint32_t LWR_reg;

    // AMTCR @ offset=0x0000004C
    union {
        __IO uint32_t AMTCR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t DT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } AMTCR_bits;
    };

} dma2d_t;

// Peripheral DMAMUX1 @ base_addess=0x40020800
typedef struct dmamux1_t {

    // DMAMUX_C0CR @ offset=0x00000000
    union {
        __IO uint32_t DMAMUX_C0CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C0CR_bits;
    };

    // DMAMUX_C1CR @ offset=0x00000004
    union {
        __IO uint32_t DMAMUX_C1CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C1CR_bits;
    };

    // DMAMUX_C2CR @ offset=0x00000008
    union {
        __IO uint32_t DMAMUX_C2CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C2CR_bits;
    };

    // DMAMUX_C3CR @ offset=0x0000000C
    union {
        __IO uint32_t DMAMUX_C3CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C3CR_bits;
    };

    // DMAMUX_C4CR @ offset=0x00000010
    union {
        __IO uint32_t DMAMUX_C4CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C4CR_bits;
    };

    // DMAMUX_C5CR @ offset=0x00000014
    union {
        __IO uint32_t DMAMUX_C5CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C5CR_bits;
    };

    // DMAMUX_C6CR @ offset=0x00000018
    union {
        __IO uint32_t DMAMUX_C6CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C6CR_bits;
    };

    // DMAMUX_C7CR @ offset=0x0000001C
    union {
        __IO uint32_t DMAMUX_C7CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C7CR_bits;
    };

    // DMAMUX_C8CR @ offset=0x00000020
    union {
        __IO uint32_t DMAMUX_C8CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C8CR_bits;
    };

    // DMAMUX_C9CR @ offset=0x00000024
    union {
        __IO uint32_t DMAMUX_C9CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C9CR_bits;
    };

    // DMAMUX_C10CR @ offset=0x00000028
    union {
        __IO uint32_t DMAMUX_C10CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C10CR_bits;
    };

    // DMAMUX_C11CR @ offset=0x0000002C
    union {
        __IO uint32_t DMAMUX_C11CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C11CR_bits;
    };

    // DMAMUX_C12CR @ offset=0x00000030
    union {
        __IO uint32_t DMAMUX_C12CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C12CR_bits;
    };

    // DMAMUX_C13CR @ offset=0x00000034
    union {
        __IO uint32_t DMAMUX_C13CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C13CR_bits;
    };

    // DMAMUX_C14CR @ offset=0x00000038
    union {
        __IO uint32_t DMAMUX_C14CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C14CR_bits;
    };

    // DMAMUX_C15CR @ offset=0x0000003C
    union {
        __IO uint32_t DMAMUX_C15CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 5;
        } DMAMUX_C15CR_bits;
    };

    __IO uint8_t RESERVED0[64];

    // DMAMUX_CSR @ offset=0x00000080
    union {
        __IO uint32_t DMAMUX_CSR_reg;

        // bit fields
        struct {
            __IO uint32_t SOF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } DMAMUX_CSR_bits;
    };

    // DMAMUX_CFR @ offset=0x00000084
    union {
        __IO uint32_t DMAMUX_CFR_reg;

        // bit fields
        struct {
            __IO uint32_t CSOF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 16;
        } DMAMUX_CFR_bits;
    };

    __IO uint8_t RESERVED1[120];

    // DMAMUX_RG0CR @ offset=0x00000100
    union {
        __IO uint32_t DMAMUX_RG0CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG0CR_bits;
    };

    // DMAMUX_RG1CR @ offset=0x00000104
    union {
        __IO uint32_t DMAMUX_RG1CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG1CR_bits;
    };

    // DMAMUX_RG2CR @ offset=0x00000108
    union {
        __IO uint32_t DMAMUX_RG2CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG2CR_bits;
    };

    // DMAMUX_RG3CR @ offset=0x0000010C
    union {
        __IO uint32_t DMAMUX_RG3CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG3CR_bits;
    };

    // DMAMUX_RG4CR @ offset=0x00000110
    union {
        __IO uint32_t DMAMUX_RG4CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG4CR_bits;
    };

    // DMAMUX_RG5CR @ offset=0x00000114
    union {
        __IO uint32_t DMAMUX_RG5CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG5CR_bits;
    };

    // DMAMUX_RG6CR @ offset=0x00000118
    union {
        __IO uint32_t DMAMUX_RG6CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG6CR_bits;
    };

    // DMAMUX_RG7CR @ offset=0x0000011C
    union {
        __IO uint32_t DMAMUX_RG7CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } DMAMUX_RG7CR_bits;
    };

    __IO uint8_t RESERVED2[32];

    // DMAMUX_RGSR @ offset=0x00000140
    union {
        __IO uint32_t DMAMUX_RGSR_reg;

        // bit fields
        struct {
            __IO uint32_t OF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } DMAMUX_RGSR_bits;
    };

    // DMAMUX_RGCFR @ offset=0x00000144
    union {
        __IO uint32_t DMAMUX_RGCFR_reg;

        // bit fields
        struct {
            __IO uint32_t COF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 24;
        } DMAMUX_RGCFR_bits;
    };

} dmamux1_t;

// Peripheral DMAMUX2 @ base_addess=0x58025800
typedef struct dmamux2_t {

    // C0CR @ offset=0x00000000
    union {
        __IO uint32_t C0CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C0CR_bits;
    };

    // C1CR @ offset=0x00000004
    union {
        __IO uint32_t C1CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C1CR_bits;
    };

    // C2CR @ offset=0x00000008
    union {
        __IO uint32_t C2CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C2CR_bits;
    };

    // C3CR @ offset=0x0000000C
    union {
        __IO uint32_t C3CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C3CR_bits;
    };

    // C4CR @ offset=0x00000010
    union {
        __IO uint32_t C4CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C4CR_bits;
    };

    // C5CR @ offset=0x00000014
    union {
        __IO uint32_t C5CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C5CR_bits;
    };

    // C6CR @ offset=0x00000018
    union {
        __IO uint32_t C6CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C6CR_bits;
    };

    // C7CR @ offset=0x0000001C
    union {
        __IO uint32_t C7CR_reg;

        // bit fields
        struct {
            __IO uint32_t DMAREQ_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SOIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_ID_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } C7CR_bits;
    };

    __IO uint8_t RESERVED0[96];

    // CSR @ offset=0x00000080
    union {
        __IO uint32_t CSR_reg;

        // bit fields
        struct {
            __IO uint32_t SOF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } CSR_bits;
    };

    // CFR @ offset=0x00000084
    union {
        __IO uint32_t CFR_reg;

        // bit fields
        struct {
            __IO uint32_t CSOF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSOF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 24;
        } CFR_bits;
    };

    __IO uint8_t RESERVED1[120];

    // RG0CR @ offset=0x00000100
    union {
        __IO uint32_t RG0CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG0CR_bits;
    };

    // RG1CR @ offset=0x00000104
    union {
        __IO uint32_t RG1CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG1CR_bits;
    };

    // RG2CR @ offset=0x00000108
    union {
        __IO uint32_t RG2CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG2CR_bits;
    };

    // RG3CR @ offset=0x0000010C
    union {
        __IO uint32_t RG3CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG3CR_bits;
    };

    // RG4CR @ offset=0x00000110
    union {
        __IO uint32_t RG4CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG4CR_bits;
    };

    // RG5CR @ offset=0x00000114
    union {
        __IO uint32_t RG5CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG5CR_bits;
    };

    // RG6CR @ offset=0x00000118
    union {
        __IO uint32_t RG6CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG6CR_bits;
    };

    // RG7CR @ offset=0x0000011C
    union {
        __IO uint32_t RG7CR_reg;

        // bit fields
        struct {
            __IO uint32_t SIG_ID_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t GE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPOL_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GNBREQ_bit : 5; // bit offset=19  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } RG7CR_bits;
    };

    __IO uint8_t RESERVED2[32];

    // RGSR @ offset=0x00000140
    union {
        __IO uint32_t RGSR_reg;

        // bit fields
        struct {
            __IO uint32_t OF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } RGSR_bits;
    };

    // RGCFR @ offset=0x00000144
    union {
        __IO uint32_t RGCFR_reg;

        // bit fields
        struct {
            __IO uint32_t COF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } RGCFR_bits;
    };

} dmamux2_t;

// Peripheral EXTI @ base_addess=0x58000000
typedef struct exti_t {

    // RTSR1 @ offset=0x00000000
    union {
        __IO uint32_t RTSR1_reg;

        // bit fields
        struct {
            __IO uint32_t TR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 10;
        } RTSR1_bits;
    };

    // FTSR1 @ offset=0x00000004
    union {
        __IO uint32_t FTSR1_reg;

        // bit fields
        struct {
            __IO uint32_t TR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 10;
        } FTSR1_bits;
    };

    // SWIER1 @ offset=0x00000008
    union {
        __IO uint32_t SWIER1_reg;

        // bit fields
        struct {
            __IO uint32_t SWIER0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 10;
        } SWIER1_bits;
    };

    // D3PMR1 @ offset=0x0000000C
    union {
        __IO uint32_t D3PMR1_reg;

        // bit fields
        struct {
            __IO uint32_t MR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t MR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t MR25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } D3PMR1_bits;
    };

    // D3PCR1L @ offset=0x00000010
    union {
        __IO uint32_t D3PCR1L_reg;

        // bit fields
        struct {
            __IO uint32_t PCS0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } D3PCR1L_bits;
    };

    // D3PCR1H @ offset=0x00000014
    union {
        __IO uint32_t D3PCR1H_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 6;
            __IO uint32_t PCS19_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS20_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS21_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t PCS25_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 12;
        } D3PCR1H_bits;
    };

    __IO uint8_t RESERVED0[8];

    // RTSR2 @ offset=0x00000020
    union {
        __IO uint32_t RTSR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 17;
            __IO uint32_t TR49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TR51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 12;
        } RTSR2_bits;
    };

    // FTSR2 @ offset=0x00000024
    union {
        __IO uint32_t FTSR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 17;
            __IO uint32_t TR49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TR51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 12;
        } FTSR2_bits;
    };

    // SWIER2 @ offset=0x00000028
    union {
        __IO uint32_t SWIER2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 17;
            __IO uint32_t SWIER49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWIER51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 12;
        } SWIER2_bits;
    };

    // D3PMR2 @ offset=0x0000002C
    union {
        __IO uint32_t D3PMR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MR34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t MR41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t MR48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 10;
        } D3PMR2_bits;
    };

    // D3PCR2L @ offset=0x00000030
    union {
        __IO uint32_t D3PCR2L_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PCS34_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS35_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 10;
            __IO uint32_t PCS41_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 12;
        } D3PCR2L_bits;
    };

    // D3PCR2H @ offset=0x00000034
    union {
        __IO uint32_t D3PCR2H_reg;

        // bit fields
        struct {
            __IO uint32_t PCS48_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS49_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS50_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS51_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS52_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCS53_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 20;
        } D3PCR2H_bits;
    };

    __IO uint8_t RESERVED1[8];

    // RTSR3 @ offset=0x00000040
    union {
        __IO uint32_t RTSR3_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 18;
            __IO uint32_t TR82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TR84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 9;
        } RTSR3_bits;
    };

    // FTSR3 @ offset=0x00000044
    union {
        __IO uint32_t FTSR3_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 18;
            __IO uint32_t TR82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TR84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TR86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 9;
        } FTSR3_bits;
    };

    // SWIER3 @ offset=0x00000048
    union {
        __IO uint32_t SWIER3_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 18;
            __IO uint32_t SWIER82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWIER84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWIER86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 9;
        } SWIER3_bits;
    };

    // D3PMR3 @ offset=0x0000004C
    __IO uint32_t D3PMR3_reg;

    __IO uint8_t RESERVED2[4];

    // D3PCR3H @ offset=0x00000054
    __IO uint32_t D3PCR3H_reg;

    __IO uint8_t RESERVED3[40];

    // CPUIMR1 @ offset=0x00000080
    union {
        __IO uint32_t CPUIMR1_reg;

        // bit fields
        struct {
            __IO uint32_t MR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPUIMR1_bits;
    };

    // CPUEMR1 @ offset=0x00000084
    union {
        __IO uint32_t CPUEMR1_reg;

        // bit fields
        struct {
            __IO uint32_t MR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPUEMR1_bits;
    };

    // CPUPR1 @ offset=0x00000088
    union {
        __IO uint32_t CPUPR1_reg;

        // bit fields
        struct {
            __IO uint32_t PR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 10;
        } CPUPR1_bits;
    };

    __IO uint8_t RESERVED4[4];

    // CPUIMR2 @ offset=0x00000090
    union {
        __IO uint32_t CPUIMR2_reg;

        // bit fields
        struct {
            __IO uint32_t MR0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MR14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPUIMR2_bits;
    };

    // CPUEMR2 @ offset=0x00000094
    union {
        __IO uint32_t CPUEMR2_reg;

        // bit fields
        struct {
            __IO uint32_t MR32_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR33_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR36_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR37_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR38_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR39_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR40_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR42_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR43_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR44_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MR46_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR47_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR54_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR55_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR56_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR57_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR58_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR59_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR60_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR61_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR62_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MR63_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPUEMR2_bits;
    };

    // CPUPR2 @ offset=0x00000098
    union {
        __IO uint32_t CPUPR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 17;
            __IO uint32_t PR49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PR51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 12;
        } CPUPR2_bits;
    };

    __IO uint8_t RESERVED5[4];

    // CPUIMR3 @ offset=0x000000A0
    union {
        __IO uint32_t CPUIMR3_reg;

        // bit fields
        struct {
            __IO uint32_t MR64_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR65_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR66_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR67_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR68_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR69_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR70_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR71_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR72_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR73_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR74_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR75_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR76_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR77_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR78_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR79_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR80_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MR82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t MR84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR87_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR88_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 7;
        } CPUIMR3_bits;
    };

    // CPUEMR3 @ offset=0x000000A4
    union {
        __IO uint32_t CPUEMR3_reg;

        // bit fields
        struct {
            __IO uint32_t MR64_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR65_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR66_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR67_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR68_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR69_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR70_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR71_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR72_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR73_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR74_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR75_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR76_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR77_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR78_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR79_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR80_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MR82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t MR84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR87_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MR88_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 7;
        } CPUEMR3_bits;
    };

    // CPUPR3 @ offset=0x000000A8
    union {
        __IO uint32_t CPUPR3_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 18;
            __IO uint32_t PR82_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PR84_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PR85_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PR86_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 9;
        } CPUPR3_bits;
    };

} exti_t;

// Peripheral Ethernet_DMA @ base_addess=0x40029000
typedef struct ethernet_dma_t {

    // DMAMR @ offset=0x00000000
    union {
        __IO uint32_t DMAMR_reg;

        // bit fields
        struct {
            __IO uint32_t SWR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DA_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t TXPR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PR_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INTM_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 15;
        } DMAMR_bits;
    };

    // DMASBMR @ offset=0x00000004
    union {
        __IO uint32_t DMASBMR_reg;

        // bit fields
        struct {
            __IO uint32_t FB_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t AAL_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t MB_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RB_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 16;
        } DMASBMR_bits;
    };

    // DMAISR @ offset=0x00000008
    union {
        __IO uint32_t DMAISR_reg;

        // bit fields
        struct {
            __IO uint32_t DC0IS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t MTLIS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MACIS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 14;
        } DMAISR_bits;
    };

    // DMADSR @ offset=0x0000000C
    union {
        __IO uint32_t DMADSR_reg;

        // bit fields
        struct {
            __IO uint32_t AXWHSTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t RPS0_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t TPS0_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 16;
        } DMADSR_bits;
    };

    __IO uint8_t RESERVED0[240];

    // DMACCR @ offset=0x00000100
    union {
        __IO uint32_t DMACCR_reg;

        // bit fields
        struct {
            __IO uint32_t MSS_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PBLX8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DSL_bit : 3; // bit offset=18  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 11;
        } DMACCR_bits;
    };

    // DMACTxCR @ offset=0x00000104
    union {
        __IO uint32_t DMACTXCR_reg;

        // bit fields
        struct {
            __IO uint32_t ST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t OSF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t TSE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t TXPBL_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 10;
        } DMACTXCR_bits;
    };

    // DMACRxCR @ offset=0x00000108
    union {
        __IO uint32_t DMACRXCR_reg;

        // bit fields
        struct {
            __IO uint32_t SR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBSZ_bit : 14; // bit offset=1  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXPBL_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t RPF_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DMACRXCR_bits;
    };

    __IO uint8_t RESERVED1[8];

    // DMACTxDLAR @ offset=0x00000114
    __IO uint32_t DMACTXDLAR_reg;

    __IO uint8_t RESERVED2[4];

    // DMACRxDLAR @ offset=0x0000011C
    __IO uint32_t DMACRXDLAR_reg;

    // DMACTxDTPR @ offset=0x00000120
    __IO uint32_t DMACTXDTPR_reg;

    __IO uint8_t RESERVED3[4];

    // DMACRxDTPR @ offset=0x00000128
    __IO uint32_t DMACRXDTPR_reg;

    // DMACTxRLR @ offset=0x0000012C
    __IO uint32_t DMACTXRLR_reg;

    // DMACRxRLR @ offset=0x00000130
    __IO uint32_t DMACRXRLR_reg;

    // DMACIER @ offset=0x00000134
    union {
        __IO uint32_t DMACIER_reg;

        // bit fields
        struct {
            __IO uint32_t TIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXSE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBUE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t RIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBUE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWTE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERIE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FBEE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CDEE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NIE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } DMACIER_bits;
    };

    // DMACRxIWTR @ offset=0x00000138
    __IO uint32_t DMACRXIWTR_reg;

    __IO uint8_t RESERVED4[8];

    // DMACCATxDR @ offset=0x00000144
    __IO uint32_t DMACCATXDR_reg;

    __IO uint8_t RESERVED5[4];

    // DMACCARxDR @ offset=0x0000014C
    __IO uint32_t DMACCARXDR_reg;

    __IO uint8_t RESERVED6[4];

    // DMACCATxBR @ offset=0x00000154
    __IO uint32_t DMACCATXBR_reg;

    __IO uint8_t RESERVED7[4];

    // DMACCARxBR @ offset=0x0000015C
    __IO uint32_t DMACCARXBR_reg;

    // DMACSR @ offset=0x00000160
    union {
        __IO uint32_t DMACSR_reg;

        // bit fields
        struct {
            __IO uint32_t TI_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TPS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBU_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t RI_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBU_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RPS_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ET_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ER_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FBE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CDE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AIS_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NIS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEB_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t REB_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 10;
        } DMACSR_bits;
    };

    __IO uint8_t RESERVED8[8];

    // DMACMFCR @ offset=0x0000016C
    union {
        __IO uint32_t DMACMFCR_reg;

        // bit fields
        struct {
            __IO uint32_t MFC_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t MFCO_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 16;
        } DMACMFCR_bits;
    };

} ethernet_dma_t;

// Peripheral Ethernet_MAC @ base_addess=0x40028000
typedef struct ethernet_mac_t {

    // MACCR @ offset=0x00000000
    union {
        __IO uint32_t MACCR_reg;

        // bit fields
        struct {
            __IO uint32_t RE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRELEN_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BL_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DO_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECRSFD_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LM_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DM_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FES_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t JE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JD_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t WD_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACS_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t S2KP_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPSLCE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IPG_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t IPC_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SARC_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACCR_bits;
    };

    // MACECR @ offset=0x00000004
    union {
        __IO uint32_t MACECR_reg;

        // bit fields
        struct {
            __IO uint32_t GPSL_bit : 14; // bit offset=0  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DCRCC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USP_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t EIPGEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EIPG_bit : 5; // bit offset=25  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 2;
        } MACECR_bits;
    };

    // MACPFR @ offset=0x00000008
    union {
        __IO uint32_t MACPFR_reg;

        // bit fields
        struct {
            __IO uint32_t PR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HMC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAIF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCF_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAIF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HPF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t VTFE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t IPFE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DNTU_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 9;
            __IO uint32_t RA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACPFR_bits;
    };

    // MACWTR @ offset=0x0000000C
    union {
        __IO uint32_t MACWTR_reg;

        // bit fields
        struct {
            __IO uint32_t WTO_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PWE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 23;
        } MACWTR_bits;
    };

    // MACHT0R @ offset=0x00000010
    __IO uint32_t MACHT0R_reg;

    // MACHT1R @ offset=0x00000014
    __IO uint32_t MACHT1R_reg;

    __IO uint8_t RESERVED0[56];

    // MACVTR @ offset=0x00000050
    union {
        __IO uint32_t MACVTR_reg;

        // bit fields
        struct {
            __IO uint32_t VL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VTIM_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ESVL_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERSVLM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DOVLTC_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EVLS_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EVLRXS_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VTHM_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EDVLP_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERIVLT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EIVLS_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EIVLRXS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACVTR_bits;
    };

    __IO uint8_t RESERVED1[4];

    // MACVHTR @ offset=0x00000058
    __IO uint32_t MACVHTR_reg;

    __IO uint8_t RESERVED2[4];

    // MACVIR @ offset=0x00000060
    union {
        __IO uint32_t MACVIR_reg;

        // bit fields
        struct {
            __IO uint32_t VLT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t VLC_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t VLP_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSVL_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VLTI_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 11;
        } MACVIR_bits;
    };

    // MACIVIR @ offset=0x00000064
    union {
        __IO uint32_t MACIVIR_reg;

        // bit fields
        struct {
            __IO uint32_t VLT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t VLC_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t VLP_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSVL_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VLTI_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 11;
        } MACIVIR_bits;
    };

    __IO uint8_t RESERVED3[8];

    // MACQTxFCR @ offset=0x00000070
    union {
        __IO uint32_t MACQTXFCR_reg;

        // bit fields
        struct {
            __IO uint32_t FCB_BPA_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TFE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PLT_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DZPQ_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 8;
            __IO uint32_t PT_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MACQTXFCR_bits;
    };

    __IO uint8_t RESERVED4[28];

    // MACRxFCR @ offset=0x00000090
    union {
        __IO uint32_t MACRXFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RFE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } MACRXFCR_bits;
    };

    __IO uint8_t RESERVED5[28];

    // MACISR @ offset=0x000000B0
    union {
        __IO uint32_t MACISR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t PHYIS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PMTIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LPIIS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t MMCIS_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MMCRXIS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MMCTXIS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TSIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXSTSIS_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXSTSIS_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 17;
        } MACISR_bits;
    };

    // MACIER @ offset=0x000000B4
    union {
        __IO uint32_t MACIER_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t PHYIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PMTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPIIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t TSIE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXSTSIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXSTSIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 17;
        } MACIER_bits;
    };

    // MACRxTxSR @ offset=0x000000B8
    union {
        __IO uint32_t MACRXTXSR_reg;

        // bit fields
        struct {
            __IO uint32_t TJT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NCARR_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LCARR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXDEF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LCOL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXCOL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t RWT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 23;
        } MACRXTXSR_bits;
    };

    __IO uint8_t RESERVED6[4];

    // MACPCSR @ offset=0x000000C0
    union {
        __IO uint32_t MACPCSR_reg;

        // bit fields
        struct {
            __IO uint32_t PWRDWN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MGKPKTEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWKPKTEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MGKPRCVD_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWKPRCVD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t GLBLUCAST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWKPFE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 13;
            __IO uint32_t RWKPTR_bit : 5; // bit offset=24  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t RWKFILTRST_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACPCSR_bits;
    };

    // MACRWKPFR @ offset=0x000000C4
    __IO uint32_t MACRWKPFR_reg;

    __IO uint8_t RESERVED7[8];

    // MACLCSR @ offset=0x000000D0
    union {
        __IO uint32_t MACLCSR_reg;

        // bit fields
        struct {
            __IO uint32_t TLPIEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TLPIEX_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RLPIEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RLPIEX_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TLPIST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RLPIST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t LPIEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLSEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPITXA_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPITE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 11;
        } MACLCSR_bits;
    };

    // MACLTCR @ offset=0x000000D4
    union {
        __IO uint32_t MACLTCR_reg;

        // bit fields
        struct {
            __IO uint32_t TWT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t LST_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 6;
        } MACLTCR_bits;
    };

    // MACLETR @ offset=0x000000D8
    __IO uint32_t MACLETR_reg;

    // MAC1USTCR @ offset=0x000000DC
    __IO uint32_t MAC1USTCR_reg;

    __IO uint8_t RESERVED8[48];

    // MACVR @ offset=0x00000110
    union {
        __IO uint32_t MACVR_reg;

        // bit fields
        struct {
            __IO uint32_t SNPSVER_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t USERVER_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } MACVR_bits;
    };

    // MACDR @ offset=0x00000114
    union {
        __IO uint32_t MACDR_reg;

        // bit fields
        struct {
            __IO uint32_t RPESTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RFCFCSTS_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t TPESTS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TFCSTS_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } MACDR_bits;
    };

    __IO uint8_t RESERVED9[8];

    // MACHWF1R @ offset=0x00000120
    union {
        __IO uint32_t MACHWF1R_reg;

        // bit fields
        struct {
            __IO uint32_t RXFIFOSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXFIFOSIZE_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t OSTEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PTOEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADVTHWORD_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDR64_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t DCBEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SPHEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSOEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DBGMEMA_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AVSEL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t HASHTBLSZ_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t L3L4FNUM_bit : 4; // bit offset=27  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 1;
        } MACHWF1R_bits;
    };

    // MACHWF2R @ offset=0x00000124
    union {
        __IO uint32_t MACHWF2R_reg;

        // bit fields
        struct {
            __IO uint32_t RXQCNT_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TXQCNT_bit : 4; // bit offset=6  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t RXCHCNT_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TXCHCNT_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t PPSOUTNUM_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t AUXSNAPNUM_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED5 : 1;
        } MACHWF2R_bits;
    };

    __IO uint8_t RESERVED10[216];

    // MACMDIOAR @ offset=0x00000200
    union {
        __IO uint32_t MACMDIOAR_reg;

        // bit fields
        struct {
            __IO uint32_t MB_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t C45E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GOC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SKAP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CR_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t NTC_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t RDA_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t PA_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTB_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 4;
        } MACMDIOAR_bits;
    };

    // MACMDIODR @ offset=0x00000204
    union {
        __IO uint32_t MACMDIODR_reg;

        // bit fields
        struct {
            __IO uint32_t MD_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RA_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MACMDIODR_bits;
    };

    __IO uint8_t RESERVED11[248];

    // MACA0HR @ offset=0x00000300
    union {
        __IO uint32_t MACA0HR_reg;

        // bit fields
        struct {
            __IO uint32_t ADDRHI_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t AE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } MACA0HR_bits;
    };

    // MACA0LR @ offset=0x00000304
    __IO uint32_t MACA0LR_reg;

    // MACA1HR @ offset=0x00000308
    union {
        __IO uint32_t MACA1HR_reg;

        // bit fields
        struct {
            __IO uint32_t ADDRHI_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t MBC_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t SA_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACA1HR_bits;
    };

    // MACA1LR @ offset=0x0000030C
    __IO uint32_t MACA1LR_reg;

    // MACA2HR @ offset=0x00000310
    union {
        __IO uint32_t MACA2HR_reg;

        // bit fields
        struct {
            __IO uint32_t ADDRHI_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t MBC_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t SA_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACA2HR_bits;
    };

    // MACA2LR @ offset=0x00000314
    __IO uint32_t MACA2LR_reg;

    // MACA3HR @ offset=0x00000318
    union {
        __IO uint32_t MACA3HR_reg;

        // bit fields
        struct {
            __IO uint32_t ADDRHI_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t MBC_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t SA_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACA3HR_bits;
    };

    // MACA3LR @ offset=0x0000031C
    __IO uint32_t MACA3LR_reg;

    __IO uint8_t RESERVED12[992];

    // MMC_CONTROL @ offset=0x00000700
    union {
        __IO uint32_t MMC_CONTROL_reg;

        // bit fields
        struct {
            __IO uint32_t CNTRST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTSTOPRO_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTONRD_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTFREEZ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTPRST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTPRSTLVL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t UCDBC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 23;
        } MMC_CONTROL_bits;
    };

    // MMC_RX_INTERRUPT @ offset=0x00000704
    union {
        __IO uint32_t MMC_RX_INTERRUPT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t RXCRCERPIS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXALGNERPIS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 10;
            __IO uint32_t RXUCGPIS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 8;
            __IO uint32_t RXLPIUSCIS_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXLPITRCIS_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 4;
        } MMC_RX_INTERRUPT_bits;
    };

    // MMC_TX_INTERRUPT @ offset=0x00000708
    union {
        __IO uint32_t MMC_TX_INTERRUPT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t TXSCOLGPIS_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXMCOLGPIS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t TXGPKTIS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TXLPIUSCIS_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXLPITRCIS_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 4;
        } MMC_TX_INTERRUPT_bits;
    };

    // MMC_RX_INTERRUPT_MASK @ offset=0x0000070C
    union {
        __IO uint32_t MMC_RX_INTERRUPT_MASK_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t RXCRCERPIM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXALGNERPIM_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 10;
            __IO uint32_t RXUCGPIM_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 8;
            __IO uint32_t RXLPIUSCIM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXLPITRCIM_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 4;
        } MMC_RX_INTERRUPT_MASK_bits;
    };

    // MMC_TX_INTERRUPT_MASK @ offset=0x00000710
    union {
        __IO uint32_t MMC_TX_INTERRUPT_MASK_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t TXSCOLGPIM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXMCOLGPIM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t TXGPKTIM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TXLPIUSCIM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXLPITRCIM_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 4;
        } MMC_TX_INTERRUPT_MASK_bits;
    };

    __IO uint8_t RESERVED13[56];

    // TX_SINGLE_COLLISION_GOOD_PACKETS @ offset=0x0000074C
    __IO uint32_t TX_SINGLE_COLLISION_GOOD_PACKETS_reg;

    // TX_MULTIPLE_COLLISION_GOOD_PACKETS @ offset=0x00000750
    __IO uint32_t TX_MULTIPLE_COLLISION_GOOD_PACKETS_reg;

    __IO uint8_t RESERVED14[20];

    // TX_PACKET_COUNT_GOOD @ offset=0x00000768
    __IO uint32_t TX_PACKET_COUNT_GOOD_reg;

    __IO uint8_t RESERVED15[40];

    // RX_CRC_ERROR_PACKETS @ offset=0x00000794
    __IO uint32_t RX_CRC_ERROR_PACKETS_reg;

    // RX_ALIGNMENT_ERROR_PACKETS @ offset=0x00000798
    __IO uint32_t RX_ALIGNMENT_ERROR_PACKETS_reg;

    __IO uint8_t RESERVED16[40];

    // RX_UNICAST_PACKETS_GOOD @ offset=0x000007C4
    __IO uint32_t RX_UNICAST_PACKETS_GOOD_reg;

    __IO uint8_t RESERVED17[36];

    // TX_LPI_USEC_CNTR @ offset=0x000007EC
    __IO uint32_t TX_LPI_USEC_CNTR_reg;

    // TX_LPI_TRAN_CNTR @ offset=0x000007F0
    __IO uint32_t TX_LPI_TRAN_CNTR_reg;

    // RX_LPI_USEC_CNTR @ offset=0x000007F4
    __IO uint32_t RX_LPI_USEC_CNTR_reg;

    // RX_LPI_TRAN_CNTR @ offset=0x000007F8
    __IO uint32_t RX_LPI_TRAN_CNTR_reg;

    __IO uint8_t RESERVED18[260];

    // MACL3L4C0R @ offset=0x00000900
    union {
        __IO uint32_t MACL3L4C0R_reg;

        // bit fields
        struct {
            __IO uint32_t L3PEN0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t L3SAM0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3SAIM0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3DAM0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3DAIM0_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3HSBM0_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3HDBM0_bit : 5; // bit offset=11  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4PEN0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t L4SPM0_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4SPIM0_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4DPM0_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4DPIM0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } MACL3L4C0R_bits;
    };

    // MACL4A0R @ offset=0x00000904
    union {
        __IO uint32_t MACL4A0R_reg;

        // bit fields
        struct {
            __IO uint32_t L4SP0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4DP0_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MACL4A0R_bits;
    };

    __IO uint8_t RESERVED19[8];

    // MACL3A00R @ offset=0x00000910
    __IO uint32_t MACL3A00R_reg;

    // MACL3A10R @ offset=0x00000914
    __IO uint32_t MACL3A10R_reg;

    // MACL3A20 @ offset=0x00000918
    __IO uint32_t MACL3A20_reg;

    // MACL3A30 @ offset=0x0000091C
    __IO uint32_t MACL3A30_reg;

    __IO uint8_t RESERVED20[16];

    // MACL3L4C1R @ offset=0x00000930
    union {
        __IO uint32_t MACL3L4C1R_reg;

        // bit fields
        struct {
            __IO uint32_t L3PEN1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t L3SAM1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3SAIM1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3DAM1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3DAIM1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3HSBM1_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t L3HDBM1_bit : 5; // bit offset=11  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4PEN1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t L4SPM1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4SPIM1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4DPM1_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4DPIM1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } MACL3L4C1R_bits;
    };

    // MACL4A1R @ offset=0x00000934
    union {
        __IO uint32_t MACL4A1R_reg;

        // bit fields
        struct {
            __IO uint32_t L4SP1_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t L4DP1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MACL4A1R_bits;
    };

    __IO uint8_t RESERVED21[8];

    // MACL3A01R @ offset=0x00000940
    __IO uint32_t MACL3A01R_reg;

    // MACL3A11R @ offset=0x00000944
    __IO uint32_t MACL3A11R_reg;

    // MACL3A21R @ offset=0x00000948
    __IO uint32_t MACL3A21R_reg;

    // MACL3A31R @ offset=0x0000094C
    __IO uint32_t MACL3A31R_reg;

    __IO uint8_t RESERVED22[400];

    // MACARPAR @ offset=0x00000AE0
    __IO uint32_t MACARPAR_reg;

    __IO uint8_t RESERVED23[28];

    // MACTSCR @ offset=0x00000B00
    union {
        __IO uint32_t MACTSCR_reg;

        // bit fields
        struct {
            __IO uint32_t TSENA_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSCFUPDT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSINIT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSUPDT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TSADDREG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t TSENALL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSCTRLSSR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSVER2ENA_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSIPENA_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSIPV6ENA_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSIPV4ENA_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSEVNTENA_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSMSTRENA_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNAPTYPSEL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSENMACADDR_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSC_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TXTSSTSM_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 7;
        } MACTSCR_bits;
    };

    // MACSSIR @ offset=0x00000B04
    union {
        __IO uint32_t MACSSIR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t SNSINC_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSINC_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } MACSSIR_bits;
    };

    // MACSTSR @ offset=0x00000B08
    __IO uint32_t MACSTSR_reg;

    // MACSTNR @ offset=0x00000B0C
    __IO uint32_t MACSTNR_reg;

    // MACSTSUR @ offset=0x00000B10
    __IO uint32_t MACSTSUR_reg;

    // MACSTNUR @ offset=0x00000B14
    union {
        __IO uint32_t MACSTNUR_reg;

        // bit fields
        struct {
            __IO uint32_t TSSS_bit : 31; // bit offset=0  bit width=31  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDSUB_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACSTNUR_bits;
    };

    // MACTSAR @ offset=0x00000B18
    __IO uint32_t MACTSAR_reg;

    __IO uint8_t RESERVED24[4];

    // MACTSSR @ offset=0x00000B20
    union {
        __IO uint32_t MACTSSR_reg;

        // bit fields
        struct {
            __IO uint32_t TSSOVF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSTARGT0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AUXTSTRIG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSTRGTERR0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t TXTSSIS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ATSSTN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t ATSSTM_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ATSNS_bit : 5; // bit offset=25  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 2;
        } MACTSSR_bits;
    };

    __IO uint8_t RESERVED25[12];

    // MACTxTSSNR @ offset=0x00000B30
    union {
        __IO uint32_t MACTXTSSNR_reg;

        // bit fields
        struct {
            __IO uint32_t TXTSSLO_bit : 31; // bit offset=0  bit width=31  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTSSMIS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } MACTXTSSNR_bits;
    };

    // MACTxTSSSR @ offset=0x00000B34
    __IO uint32_t MACTXTSSSR_reg;

    __IO uint8_t RESERVED26[8];

    // MACACR @ offset=0x00000B40
    union {
        __IO uint32_t MACACR_reg;

        // bit fields
        struct {
            __IO uint32_t ATSFC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ATSEN0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ATSEN1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ATSEN2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ATSEN3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } MACACR_bits;
    };

    __IO uint8_t RESERVED27[4];

    // MACATSNR @ offset=0x00000B48
    __IO uint32_t MACATSNR_reg;

    // MACATSSR @ offset=0x00000B4C
    __IO uint32_t MACATSSR_reg;

    // MACTSIACR @ offset=0x00000B50
    __IO uint32_t MACTSIACR_reg;

    // MACTSEACR @ offset=0x00000B54
    __IO uint32_t MACTSEACR_reg;

    // MACTSICNR @ offset=0x00000B58
    __IO uint32_t MACTSICNR_reg;

    // MACTSECNR @ offset=0x00000B5C
    __IO uint32_t MACTSECNR_reg;

    __IO uint8_t RESERVED28[16];

    // MACPPSCR @ offset=0x00000B70
    union {
        __IO uint32_t MACPPSCR_reg;

        // bit fields
        struct {
            __IO uint32_t PPSCTRL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t PPSEN0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGTMODSEL0_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } MACPPSCR_bits;
    };

    __IO uint8_t RESERVED29[12];

    // MACPPSTTSR @ offset=0x00000B80
    __IO uint32_t MACPPSTTSR_reg;

    // MACPPSTTNR @ offset=0x00000B84
    union {
        __IO uint32_t MACPPSTTNR_reg;

        // bit fields
        struct {
            __IO uint32_t TTSL0_bit : 31; // bit offset=0  bit width=31  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGTBUSY0_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MACPPSTTNR_bits;
    };

    // MACPPSIR @ offset=0x00000B88
    __IO uint32_t MACPPSIR_reg;

    // MACPPSWR @ offset=0x00000B8C
    __IO uint32_t MACPPSWR_reg;

    __IO uint8_t RESERVED30[48];

    // MACPOCR @ offset=0x00000BC0
    union {
        __IO uint32_t MACPOCR_reg;

        // bit fields
        struct {
            __IO uint32_t PTOEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASYNCEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t APDREQEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t ASYNCTRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t APDREQTRIG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DRRDIS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 16;
        } MACPOCR_bits;
    };

    // MACSPI0R @ offset=0x00000BC4
    __IO uint32_t MACSPI0R_reg;

    // MACSPI1R @ offset=0x00000BC8
    __IO uint32_t MACSPI1R_reg;

    // MACSPI2R @ offset=0x00000BCC
    __IO uint32_t MACSPI2R_reg;

    // MACLMIR @ offset=0x00000BD0
    union {
        __IO uint32_t MACLMIR_reg;

        // bit fields
        struct {
            __IO uint32_t LSI_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DRSYNCR_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t LMPDRI_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } MACLMIR_bits;
    };

} ethernet_mac_t;

// Peripheral Ethernet_MTL @ base_addess=0x40028C00
typedef struct ethernet_mtl_t {

    // MTLOMR @ offset=0x00000000
    union {
        __IO uint32_t MTLOMR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DTXSTS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t CNTPRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTCLR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 22;
        } MTLOMR_bits;
    };

    __IO uint8_t RESERVED0[28];

    // MTLISR @ offset=0x00000020
    __IO uint32_t MTLISR_reg;

    __IO uint8_t RESERVED1[220];

    // MTLTxQOMR @ offset=0x00000100
    union {
        __IO uint32_t MTLTXQOMR_reg;

        // bit fields
        struct {
            __IO uint32_t FTQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXQEN_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t TTC_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t TQS_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } MTLTXQOMR_bits;
    };

    // MTLTxQUR @ offset=0x00000104
    union {
        __IO uint32_t MTLTXQUR_reg;

        // bit fields
        struct {
            __IO uint32_t UFFRMCNT_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t UFCNTOVF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MTLTXQUR_bits;
    };

    // MTLTxQDR @ offset=0x00000108
    union {
        __IO uint32_t MTLTXQDR_reg;

        // bit fields
        struct {
            __IO uint32_t TXQPAUSED_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TRCSTS_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t TWCSTS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXQSTS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXSTSFSTS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t PTXQ_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STXSTSF_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 9;
        } MTLTXQDR_bits;
    };

    __IO uint8_t RESERVED2[32];

    // MTLQICSR @ offset=0x0000012C
    union {
        __IO uint32_t MTLQICSR_reg;

        // bit fields
        struct {
            __IO uint32_t TXUNFIS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t TXUIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t RXOVFIS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t RXOIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 7;
        } MTLQICSR_bits;
    };

    // MTLRxQOMR @ offset=0x00000130
    union {
        __IO uint32_t MTLRXQOMR_reg;

        // bit fields
        struct {
            __IO uint32_t RTC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FEP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIS_TCP_EF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EHFC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RFA_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t RFD_bit : 3; // bit offset=14  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t RQS_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 9;
        } MTLRXQOMR_bits;
    };

    // MTLRxQMPOCR @ offset=0x00000134
    union {
        __IO uint32_t MTLRXQMPOCR_reg;

        // bit fields
        struct {
            __IO uint32_t OVFPKTCNT_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVFCNTOVF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t MISPKTCNT_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_ONLY
            __IO uint32_t MISCNTOVF_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 4;
        } MTLRXQMPOCR_bits;
    };

    // MTLRxQDR @ offset=0x00000138
    union {
        __IO uint32_t MTLRXQDR_reg;

        // bit fields
        struct {
            __IO uint32_t RWCSTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RRCSTS_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXQSTS_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 10;
            __IO uint32_t PRXQ_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 2;
        } MTLRXQDR_bits;
    };

} ethernet_mtl_t;

// Peripheral FDCAN1 @ base_addess=0x4000A000
typedef struct fdcan1_t {

    // FDCAN_CREL @ offset=0x00000000
    union {
        __IO uint32_t FDCAN_CREL_reg;

        // bit fields
        struct {
            __IO uint32_t DAY_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MON_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t YEAR_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUBSTEP_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t STEP_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t REL_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_ONLY
        } FDCAN_CREL_bits;
    };

    // FDCAN_ENDN @ offset=0x00000004
    __IO uint32_t FDCAN_ENDN_reg;

    __IO uint8_t RESERVED0[4];

    // FDCAN_DBTP @ offset=0x0000000C
    union {
        __IO uint32_t FDCAN_DBTP_reg;

        // bit fields
        struct {
            __IO uint32_t DSJW_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t DTSEG2_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t DTSEG1_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBRP_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t TDC_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 8;
        } FDCAN_DBTP_bits;
    };

    // FDCAN_TEST @ offset=0x00000010
    union {
        __IO uint32_t FDCAN_TEST_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t LBCK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TX_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RX_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 24;
        } FDCAN_TEST_bits;
    };

    // FDCAN_RWD @ offset=0x00000014
    union {
        __IO uint32_t FDCAN_RWD_reg;

        // bit fields
        struct {
            __IO uint32_t WDC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDV_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } FDCAN_RWD_bits;
    };

    // FDCAN_CCCR @ offset=0x00000018
    union {
        __IO uint32_t FDCAN_CCCR_reg;

        // bit fields
        struct {
            __IO uint32_t INIT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASM_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSA_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MON_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FDOE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PXHD_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EFBI_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NISO_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } FDCAN_CCCR_bits;
    };

    // FDCAN_NBTP @ offset=0x0000001C
    union {
        __IO uint32_t FDCAN_NBTP_reg;

        // bit fields
        struct {
            __IO uint32_t TSEG2_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t NTSEG1_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBRP_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t NSJW_bit : 7; // bit offset=25  bit width=7  access=SVDAccessType.READ_WRITE
        } FDCAN_NBTP_bits;
    };

    // FDCAN_TSCC @ offset=0x00000020
    union {
        __IO uint32_t FDCAN_TSCC_reg;

        // bit fields
        struct {
            __IO uint32_t TSS_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t TCP_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 12;
        } FDCAN_TSCC_bits;
    };

    // FDCAN_TSCV @ offset=0x00000024
    __IO uint32_t FDCAN_TSCV_reg;

    // FDCAN_TOCC @ offset=0x00000028
    union {
        __IO uint32_t FDCAN_TOCC_reg;

        // bit fields
        struct {
            __IO uint32_t ETOC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TOS_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t TOP_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } FDCAN_TOCC_bits;
    };

    // FDCAN_TOCV @ offset=0x0000002C
    __IO uint32_t FDCAN_TOCV_reg;

    __IO uint8_t RESERVED1[16];

    // FDCAN_ECR @ offset=0x00000040
    union {
        __IO uint32_t FDCAN_ECR_reg;

        // bit fields
        struct {
            __IO uint32_t TEC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t TREC_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CEL_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } FDCAN_ECR_bits;
    };

    // FDCAN_PSR @ offset=0x00000044
    union {
        __IO uint32_t FDCAN_PSR_reg;

        // bit fields
        struct {
            __IO uint32_t LEC_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EW_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BO_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLEC_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESI_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBRS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REDL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PXE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TDCV_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 9;
        } FDCAN_PSR_bits;
    };

    // FDCAN_TDCR @ offset=0x00000048
    union {
        __IO uint32_t FDCAN_TDCR_reg;

        // bit fields
        struct {
            __IO uint32_t TDCF_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TDCO_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 17;
        } FDCAN_TDCR_bits;
    };

    __IO uint8_t RESERVED2[4];

    // FDCAN_IR @ offset=0x00000050
    union {
        __IO uint32_t FDCAN_IR_reg;

        // bit fields
        struct {
            __IO uint32_t RF0N_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0W_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0F_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0L_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1N_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1W_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1F_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1L_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFW_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFF_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFL_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSW_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MRAF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOO_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DRX_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ELO_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EP_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EW_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BO_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDI_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEA_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PED_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARA_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 2;
        } FDCAN_IR_bits;
    };

    // FDCAN_IE @ offset=0x00000054
    union {
        __IO uint32_t FDCAN_IE_reg;

        // bit fields
        struct {
            __IO uint32_t RF0NE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0WE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0LE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1NE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1WE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1FE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1LE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPME_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCFE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFNE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFWE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFFE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFLE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSWE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MRAFE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOOE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DRXE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BECE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BEUE_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ELOE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EWE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEAE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEDE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARAE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 2;
        } FDCAN_IE_bits;
    };

    // FDCAN_ILS @ offset=0x00000058
    union {
        __IO uint32_t FDCAN_ILS_reg;

        // bit fields
        struct {
            __IO uint32_t RF0NL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0WL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0FL_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0LL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1NL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1WL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1FL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1LL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPML_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCFL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFNL_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFWL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFFL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFLL_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSWL_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MRAFL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOOL_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DRXL_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BECL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BEUL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ELOL_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPL_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EWL_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDIL_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEAL_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEDL_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARAL_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 2;
        } FDCAN_ILS_bits;
    };

    // FDCAN_ILE @ offset=0x0000005C
    union {
        __IO uint32_t FDCAN_ILE_reg;

        // bit fields
        struct {
            __IO uint32_t EINT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EINT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } FDCAN_ILE_bits;
    };

    __IO uint8_t RESERVED3[32];

    // FDCAN_GFC @ offset=0x00000080
    union {
        __IO uint32_t FDCAN_GFC_reg;

        // bit fields
        struct {
            __IO uint32_t RRFE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RRFS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFE_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFS_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 26;
        } FDCAN_GFC_bits;
    };

    // FDCAN_SIDFC @ offset=0x00000084
    union {
        __IO uint32_t FDCAN_SIDFC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t FLSSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSS_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } FDCAN_SIDFC_bits;
    };

    // FDCAN_XIDFC @ offset=0x00000088
    union {
        __IO uint32_t FDCAN_XIDFC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t FLESA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSE_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } FDCAN_XIDFC_bits;
    };

    __IO uint8_t RESERVED4[4];

    // FDCAN_XIDAM @ offset=0x00000090
    __IO uint32_t FDCAN_XIDAM_reg;

    // FDCAN_HPMS @ offset=0x00000094
    union {
        __IO uint32_t FDCAN_HPMS_reg;

        // bit fields
        struct {
            __IO uint32_t BIDX_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t MSI_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t FIDX_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t FLST_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } FDCAN_HPMS_bits;
    };

    // FDCAN_NDAT1 @ offset=0x00000098
    union {
        __IO uint32_t FDCAN_NDAT1_reg;

        // bit fields
        struct {
            __IO uint32_t ND0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } FDCAN_NDAT1_bits;
    };

    // FDCAN_NDAT2 @ offset=0x0000009C
    union {
        __IO uint32_t FDCAN_NDAT2_reg;

        // bit fields
        struct {
            __IO uint32_t ND32_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND33_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND36_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND37_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND38_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND39_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND40_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND42_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND43_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND44_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND45_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND46_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND47_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND54_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND55_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND56_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND57_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND58_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND59_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND60_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND61_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND62_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND63_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } FDCAN_NDAT2_bits;
    };

    // FDCAN_RXF0C @ offset=0x000000A0
    union {
        __IO uint32_t FDCAN_RXF0C_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t F0SA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t F0S_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t F0WM_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } FDCAN_RXF0C_bits;
    };

    // FDCAN_RXF0S @ offset=0x000000A4
    union {
        __IO uint32_t FDCAN_RXF0S_reg;

        // bit fields
        struct {
            __IO uint32_t F0FL_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t F0G_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t F0P_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t F0F_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RF0L_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 6;
        } FDCAN_RXF0S_bits;
    };

    // FDCAN_RXF0A @ offset=0x000000A8
    __IO uint32_t FDCAN_RXF0A_reg;

    // FDCAN_RXBC @ offset=0x000000AC
    __IO uint32_t FDCAN_RXBC_reg;

    // FDCAN_RXF1C @ offset=0x000000B0
    union {
        __IO uint32_t FDCAN_RXF1C_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t F1SA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t F1S_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t F1WM_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 1;
        } FDCAN_RXF1C_bits;
    };

    // FDCAN_RXF1S @ offset=0x000000B4
    union {
        __IO uint32_t FDCAN_RXF1S_reg;

        // bit fields
        struct {
            __IO uint32_t F1FL_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t F1GI_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t F1PI_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t F1F_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RF1L_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 4;
            __IO uint32_t DMS_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } FDCAN_RXF1S_bits;
    };

    // FDCAN_RXF1A @ offset=0x000000B8
    __IO uint32_t FDCAN_RXF1A_reg;

    // FDCAN_RXESC @ offset=0x000000BC
    union {
        __IO uint32_t FDCAN_RXESC_reg;

        // bit fields
        struct {
            __IO uint32_t F0DS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t F1DS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t RBDS_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 21;
        } FDCAN_RXESC_bits;
    };

    // FDCAN_TXBC @ offset=0x000000C0
    union {
        __IO uint32_t FDCAN_TXBC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TBSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t NDTB_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t TFQS_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t TFQM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 1;
        } FDCAN_TXBC_bits;
    };

    // FDCAN_TXFQS @ offset=0x000000C4
    union {
        __IO uint32_t FDCAN_TXFQS_reg;

        // bit fields
        struct {
            __IO uint32_t TFFL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TFGI_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TFQPI_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t TFQF_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 10;
        } FDCAN_TXFQS_bits;
    };

    // FDCAN_TXESC @ offset=0x000000C8
    __IO uint32_t FDCAN_TXESC_reg;

    // FDCAN_TXBRP @ offset=0x000000CC
    __IO uint32_t FDCAN_TXBRP_reg;

    // FDCAN_TXBAR @ offset=0x000000D0
    __IO uint32_t FDCAN_TXBAR_reg;

    // FDCAN_TXBCR @ offset=0x000000D4
    __IO uint32_t FDCAN_TXBCR_reg;

    // FDCAN_TXBTO @ offset=0x000000D8
    __IO uint32_t FDCAN_TXBTO_reg;

    // FDCAN_TXBCF @ offset=0x000000DC
    __IO uint32_t FDCAN_TXBCF_reg;

    // FDCAN_TXBTIE @ offset=0x000000E0
    __IO uint32_t FDCAN_TXBTIE_reg;

    // FDCAN_TXBCIE @ offset=0x000000E4
    __IO uint32_t FDCAN_TXBCIE_reg;

    __IO uint8_t RESERVED5[8];

    // FDCAN_TXEFC @ offset=0x000000F0
    union {
        __IO uint32_t FDCAN_TXEFC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EFSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t EFS_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t EFWM_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 2;
        } FDCAN_TXEFC_bits;
    };

    // FDCAN_TXEFS @ offset=0x000000F4
    union {
        __IO uint32_t FDCAN_TXEFS_reg;

        // bit fields
        struct {
            __IO uint32_t EFFL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EFGI_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t EFPI_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t EFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEFL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 6;
        } FDCAN_TXEFS_bits;
    };

    // FDCAN_TXEFA @ offset=0x000000F8
    __IO uint32_t FDCAN_TXEFA_reg;

    __IO uint8_t RESERVED6[4];

    // FDCAN_TTTMC @ offset=0x00000100
    union {
        __IO uint32_t FDCAN_TTTMC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TMSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t TME_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 9;
        } FDCAN_TTTMC_bits;
    };

    // FDCAN_TTRMC @ offset=0x00000104
    union {
        __IO uint32_t FDCAN_TTRMC_reg;

        // bit fields
        struct {
            __IO uint32_t RID_bit : 29; // bit offset=0  bit width=29  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t XTD_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RMPS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TTRMC_bits;
    };

    // FDCAN_TTOCF @ offset=0x00000108
    union {
        __IO uint32_t FDCAN_TTOCF_reg;

        // bit fields
        struct {
            __IO uint32_t OM_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t GEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LDSDL_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRTO_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t EECS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWL_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGTF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECC_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EVTP_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } FDCAN_TTOCF_bits;
    };

    // FDCAN_TTMLM @ offset=0x0000010C
    union {
        __IO uint32_t FDCAN_TTMLM_reg;

        // bit fields
        struct {
            __IO uint32_t CCM_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSS_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEW_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t ENTT_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } FDCAN_TTMLM_bits;
    };

    // FDCAN_TURCF @ offset=0x00000110
    union {
        __IO uint32_t FDCAN_TURCF_reg;

        // bit fields
        struct {
            __IO uint32_t NCL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DC_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t ELT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TURCF_bits;
    };

    // FDCAN_TTOCN @ offset=0x00000114
    union {
        __IO uint32_t FDCAN_TTOCN_reg;

        // bit fields
        struct {
            __IO uint32_t SGT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWS_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TMC_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GCS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FGP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TMG_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NIG_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ESCN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LCKC_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } FDCAN_TTOCN_bits;
    };

    // CAN_TTGTP @ offset=0x00000118
    union {
        __IO uint32_t CAN_TTGTP_reg;

        // bit fields
        struct {
            __IO uint32_t NCL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTP_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CAN_TTGTP_bits;
    };

    // FDCAN_TTTMK @ offset=0x0000011C
    union {
        __IO uint32_t FDCAN_TTTMK_reg;

        // bit fields
        struct {
            __IO uint32_t TM_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TICC_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t LCKM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TTTMK_bits;
    };

    // FDCAN_TTIR @ offset=0x00000120
    union {
        __IO uint32_t FDCAN_TTIR_reg;

        // bit fields
        struct {
            __IO uint32_t SBC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSM_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOG_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTMI_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTMI_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTW_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXU_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXO_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ELC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWTG_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AW_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CER_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 13;
        } FDCAN_TTIR_bits;
    };

    // FDCAN_TTIE @ offset=0x00000124
    union {
        __IO uint32_t FDCAN_TTIE_reg;

        // bit fields
        struct {
            __IO uint32_t SBCE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMCE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSME_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOGE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTMIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWEE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTWE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTEE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXOE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE1E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE2E_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ELCE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWTGE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WTE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CERE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 13;
        } FDCAN_TTIE_bits;
    };

    // FDCAN_TTILS @ offset=0x00000128
    union {
        __IO uint32_t FDCAN_TTILS_reg;

        // bit fields
        struct {
            __IO uint32_t SBCL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMCL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSML_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOGL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTMIL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTMIL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWEL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTWL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTDL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTEL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE1L_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE2L_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ELCL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWTGL_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WTL_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CERL_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 13;
        } FDCAN_TTILS_bits;
    };

    // FDCAN_TTOST @ offset=0x0000012C
    union {
        __IO uint32_t FDCAN_TTOST_reg;

        // bit fields
        struct {
            __IO uint32_t EL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYS_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QCS_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTO_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 6;
            __IO uint32_t WGTD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GFI_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TMP_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t GSI_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WECS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TTOST_bits;
    };

    // FDCAN_TURNA @ offset=0x00000130
    __IO uint32_t FDCAN_TURNA_reg;

    // FDCAN_TTLGT @ offset=0x00000134
    union {
        __IO uint32_t FDCAN_TTLGT_reg;

        // bit fields
        struct {
            __IO uint32_t LT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t GT_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } FDCAN_TTLGT_bits;
    };

    // FDCAN_TTCTC @ offset=0x00000138
    union {
        __IO uint32_t FDCAN_TTCTC_reg;

        // bit fields
        struct {
            __IO uint32_t CT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t CC_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 10;
        } FDCAN_TTCTC_bits;
    };

    // FDCAN_TTCPT @ offset=0x0000013C
    union {
        __IO uint32_t FDCAN_TTCPT_reg;

        // bit fields
        struct {
            __IO uint32_t CT_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SWV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } FDCAN_TTCPT_bits;
    };

    // FDCAN_TTCSM @ offset=0x00000140
    __IO uint32_t FDCAN_TTCSM_reg;

    __IO uint8_t RESERVED7[444];

    // FDCAN_TTTS @ offset=0x00000300
    union {
        __IO uint32_t FDCAN_TTTS_reg;

        // bit fields
        struct {
            __IO uint32_t SWTDEL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EVTSEL_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } FDCAN_TTTS_bits;
    };

} fdcan1_t;

// Peripheral FDCAN2 @ base_addess=0x4000A400
typedef struct fdcan2_t {

    // FDCAN_CREL @ offset=0x00000000
    union {
        __IO uint32_t FDCAN_CREL_reg;

        // bit fields
        struct {
            __IO uint32_t DAY_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MON_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t YEAR_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUBSTEP_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t STEP_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t REL_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_ONLY
        } FDCAN_CREL_bits;
    };

    // FDCAN_ENDN @ offset=0x00000004
    __IO uint32_t FDCAN_ENDN_reg;

    __IO uint8_t RESERVED0[4];

    // FDCAN_DBTP @ offset=0x0000000C
    union {
        __IO uint32_t FDCAN_DBTP_reg;

        // bit fields
        struct {
            __IO uint32_t DSJW_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t DTSEG2_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t DTSEG1_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBRP_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t TDC_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 8;
        } FDCAN_DBTP_bits;
    };

    // FDCAN_TEST @ offset=0x00000010
    union {
        __IO uint32_t FDCAN_TEST_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t LBCK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TX_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RX_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 24;
        } FDCAN_TEST_bits;
    };

    // FDCAN_RWD @ offset=0x00000014
    union {
        __IO uint32_t FDCAN_RWD_reg;

        // bit fields
        struct {
            __IO uint32_t WDC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDV_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } FDCAN_RWD_bits;
    };

    // FDCAN_CCCR @ offset=0x00000018
    union {
        __IO uint32_t FDCAN_CCCR_reg;

        // bit fields
        struct {
            __IO uint32_t INIT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASM_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSA_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MON_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FDOE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PXHD_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EFBI_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NISO_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } FDCAN_CCCR_bits;
    };

    // FDCAN_NBTP @ offset=0x0000001C
    union {
        __IO uint32_t FDCAN_NBTP_reg;

        // bit fields
        struct {
            __IO uint32_t TSEG2_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t NTSEG1_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBRP_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t NSJW_bit : 7; // bit offset=25  bit width=7  access=SVDAccessType.READ_WRITE
        } FDCAN_NBTP_bits;
    };

    // FDCAN_TSCC @ offset=0x00000020
    union {
        __IO uint32_t FDCAN_TSCC_reg;

        // bit fields
        struct {
            __IO uint32_t TSS_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t TCP_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 12;
        } FDCAN_TSCC_bits;
    };

    // FDCAN_TSCV @ offset=0x00000024
    __IO uint32_t FDCAN_TSCV_reg;

    // FDCAN_TOCC @ offset=0x00000028
    union {
        __IO uint32_t FDCAN_TOCC_reg;

        // bit fields
        struct {
            __IO uint32_t ETOC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TOS_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t TOP_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } FDCAN_TOCC_bits;
    };

    // FDCAN_TOCV @ offset=0x0000002C
    __IO uint32_t FDCAN_TOCV_reg;

    __IO uint8_t RESERVED1[16];

    // FDCAN_ECR @ offset=0x00000040
    union {
        __IO uint32_t FDCAN_ECR_reg;

        // bit fields
        struct {
            __IO uint32_t TEC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t TREC_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CEL_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } FDCAN_ECR_bits;
    };

    // FDCAN_PSR @ offset=0x00000044
    union {
        __IO uint32_t FDCAN_PSR_reg;

        // bit fields
        struct {
            __IO uint32_t LEC_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EW_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BO_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLEC_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESI_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBRS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REDL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PXE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TDCV_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 9;
        } FDCAN_PSR_bits;
    };

    // FDCAN_TDCR @ offset=0x00000048
    union {
        __IO uint32_t FDCAN_TDCR_reg;

        // bit fields
        struct {
            __IO uint32_t TDCF_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TDCO_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 17;
        } FDCAN_TDCR_bits;
    };

    __IO uint8_t RESERVED2[4];

    // FDCAN_IR @ offset=0x00000050
    union {
        __IO uint32_t FDCAN_IR_reg;

        // bit fields
        struct {
            __IO uint32_t RF0N_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0W_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0F_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0L_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1N_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1W_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1F_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1L_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFW_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFF_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFL_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSW_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MRAF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOO_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DRX_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ELO_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EP_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EW_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BO_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDI_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEA_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PED_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARA_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 2;
        } FDCAN_IR_bits;
    };

    // FDCAN_IE @ offset=0x00000054
    union {
        __IO uint32_t FDCAN_IE_reg;

        // bit fields
        struct {
            __IO uint32_t RF0NE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0WE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0LE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1NE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1WE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1FE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1LE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPME_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCFE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFNE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFWE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFFE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFLE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSWE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MRAFE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOOE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DRXE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BECE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BEUE_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ELOE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EWE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEAE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEDE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARAE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 2;
        } FDCAN_IE_bits;
    };

    // FDCAN_ILS @ offset=0x00000058
    union {
        __IO uint32_t FDCAN_ILS_reg;

        // bit fields
        struct {
            __IO uint32_t RF0NL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0WL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0FL_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF0LL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1NL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1WL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1FL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RF1LL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPML_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCFL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFNL_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFWL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFFL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEFLL_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSWL_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MRAFL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOOL_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DRXL_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BECL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BEUL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ELOL_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPL_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EWL_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDIL_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEAL_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PEDL_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARAL_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 2;
        } FDCAN_ILS_bits;
    };

    // FDCAN_ILE @ offset=0x0000005C
    union {
        __IO uint32_t FDCAN_ILE_reg;

        // bit fields
        struct {
            __IO uint32_t EINT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EINT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } FDCAN_ILE_bits;
    };

    __IO uint8_t RESERVED3[32];

    // FDCAN_GFC @ offset=0x00000080
    union {
        __IO uint32_t FDCAN_GFC_reg;

        // bit fields
        struct {
            __IO uint32_t RRFE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RRFS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFE_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFS_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 26;
        } FDCAN_GFC_bits;
    };

    // FDCAN_SIDFC @ offset=0x00000084
    union {
        __IO uint32_t FDCAN_SIDFC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t FLSSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSS_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } FDCAN_SIDFC_bits;
    };

    // FDCAN_XIDFC @ offset=0x00000088
    union {
        __IO uint32_t FDCAN_XIDFC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t FLESA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSE_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } FDCAN_XIDFC_bits;
    };

    __IO uint8_t RESERVED4[4];

    // FDCAN_XIDAM @ offset=0x00000090
    __IO uint32_t FDCAN_XIDAM_reg;

    // FDCAN_HPMS @ offset=0x00000094
    union {
        __IO uint32_t FDCAN_HPMS_reg;

        // bit fields
        struct {
            __IO uint32_t BIDX_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t MSI_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t FIDX_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t FLST_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } FDCAN_HPMS_bits;
    };

    // FDCAN_NDAT1 @ offset=0x00000098
    union {
        __IO uint32_t FDCAN_NDAT1_reg;

        // bit fields
        struct {
            __IO uint32_t ND0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } FDCAN_NDAT1_bits;
    };

    // FDCAN_NDAT2 @ offset=0x0000009C
    union {
        __IO uint32_t FDCAN_NDAT2_reg;

        // bit fields
        struct {
            __IO uint32_t ND32_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND33_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND34_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND35_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND36_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND37_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND38_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND39_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND40_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND41_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND42_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND43_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND44_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND45_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND46_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND47_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND48_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND49_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND50_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND51_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND52_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND53_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND54_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND55_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND56_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND57_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND58_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND59_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND60_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND61_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND62_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ND63_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } FDCAN_NDAT2_bits;
    };

    // FDCAN_RXF0C @ offset=0x000000A0
    union {
        __IO uint32_t FDCAN_RXF0C_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t F0SA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t F0S_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t F0WM_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } FDCAN_RXF0C_bits;
    };

    // FDCAN_RXF0S @ offset=0x000000A4
    union {
        __IO uint32_t FDCAN_RXF0S_reg;

        // bit fields
        struct {
            __IO uint32_t F0FL_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t F0G_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t F0P_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t F0F_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RF0L_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 6;
        } FDCAN_RXF0S_bits;
    };

    // FDCAN_RXF0A @ offset=0x000000A8
    __IO uint32_t FDCAN_RXF0A_reg;

    // FDCAN_RXBC @ offset=0x000000AC
    __IO uint32_t FDCAN_RXBC_reg;

    // FDCAN_RXF1C @ offset=0x000000B0
    union {
        __IO uint32_t FDCAN_RXF1C_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t F1SA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t F1S_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t F1WM_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 1;
        } FDCAN_RXF1C_bits;
    };

    // FDCAN_RXF1S @ offset=0x000000B4
    union {
        __IO uint32_t FDCAN_RXF1S_reg;

        // bit fields
        struct {
            __IO uint32_t F1FL_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t F1GI_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t F1PI_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t F1F_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RF1L_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 4;
            __IO uint32_t DMS_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } FDCAN_RXF1S_bits;
    };

    // FDCAN_RXF1A @ offset=0x000000B8
    __IO uint32_t FDCAN_RXF1A_reg;

    // FDCAN_RXESC @ offset=0x000000BC
    union {
        __IO uint32_t FDCAN_RXESC_reg;

        // bit fields
        struct {
            __IO uint32_t F0DS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t F1DS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t RBDS_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 21;
        } FDCAN_RXESC_bits;
    };

    // FDCAN_TXBC @ offset=0x000000C0
    union {
        __IO uint32_t FDCAN_TXBC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TBSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t NDTB_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t TFQS_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t TFQM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 1;
        } FDCAN_TXBC_bits;
    };

    // FDCAN_TXFQS @ offset=0x000000C4
    union {
        __IO uint32_t FDCAN_TXFQS_reg;

        // bit fields
        struct {
            __IO uint32_t TFFL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TFGI_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TFQPI_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_ONLY
            __IO uint32_t TFQF_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 10;
        } FDCAN_TXFQS_bits;
    };

    // FDCAN_TXESC @ offset=0x000000C8
    __IO uint32_t FDCAN_TXESC_reg;

    // FDCAN_TXBRP @ offset=0x000000CC
    __IO uint32_t FDCAN_TXBRP_reg;

    // FDCAN_TXBAR @ offset=0x000000D0
    __IO uint32_t FDCAN_TXBAR_reg;

    // FDCAN_TXBCR @ offset=0x000000D4
    __IO uint32_t FDCAN_TXBCR_reg;

    // FDCAN_TXBTO @ offset=0x000000D8
    __IO uint32_t FDCAN_TXBTO_reg;

    // FDCAN_TXBCF @ offset=0x000000DC
    __IO uint32_t FDCAN_TXBCF_reg;

    // FDCAN_TXBTIE @ offset=0x000000E0
    __IO uint32_t FDCAN_TXBTIE_reg;

    // FDCAN_TXBCIE @ offset=0x000000E4
    __IO uint32_t FDCAN_TXBCIE_reg;

    __IO uint8_t RESERVED5[8];

    // FDCAN_TXEFC @ offset=0x000000F0
    union {
        __IO uint32_t FDCAN_TXEFC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EFSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t EFS_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t EFWM_bit : 6; // bit offset=24  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 2;
        } FDCAN_TXEFC_bits;
    };

    // FDCAN_TXEFS @ offset=0x000000F4
    union {
        __IO uint32_t FDCAN_TXEFS_reg;

        // bit fields
        struct {
            __IO uint32_t EFFL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EFGI_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t EFPI_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t EFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEFL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 6;
        } FDCAN_TXEFS_bits;
    };

    // FDCAN_TXEFA @ offset=0x000000F8
    __IO uint32_t FDCAN_TXEFA_reg;

    __IO uint8_t RESERVED6[4];

    // FDCAN_TTTMC @ offset=0x00000100
    union {
        __IO uint32_t FDCAN_TTTMC_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TMSA_bit : 14; // bit offset=2  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t TME_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 9;
        } FDCAN_TTTMC_bits;
    };

    // FDCAN_TTRMC @ offset=0x00000104
    union {
        __IO uint32_t FDCAN_TTRMC_reg;

        // bit fields
        struct {
            __IO uint32_t RID_bit : 29; // bit offset=0  bit width=29  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t XTD_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RMPS_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TTRMC_bits;
    };

    // FDCAN_TTOCF @ offset=0x00000108
    union {
        __IO uint32_t FDCAN_TTOCF_reg;

        // bit fields
        struct {
            __IO uint32_t OM_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t GEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LDSDL_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRTO_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t EECS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWL_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t EGTF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECC_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EVTP_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } FDCAN_TTOCF_bits;
    };

    // FDCAN_TTMLM @ offset=0x0000010C
    union {
        __IO uint32_t FDCAN_TTMLM_reg;

        // bit fields
        struct {
            __IO uint32_t CCM_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSS_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEW_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t ENTT_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } FDCAN_TTMLM_bits;
    };

    // FDCAN_TURCF @ offset=0x00000110
    union {
        __IO uint32_t FDCAN_TURCF_reg;

        // bit fields
        struct {
            __IO uint32_t NCL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DC_bit : 14; // bit offset=16  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t ELT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TURCF_bits;
    };

    // FDCAN_TTOCN @ offset=0x00000114
    union {
        __IO uint32_t FDCAN_TTOCN_reg;

        // bit fields
        struct {
            __IO uint32_t SGT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWS_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TMC_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GCS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FGP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TMG_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NIG_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ESCN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LCKC_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } FDCAN_TTOCN_bits;
    };

    // CAN_TTGTP @ offset=0x00000118
    union {
        __IO uint32_t CAN_TTGTP_reg;

        // bit fields
        struct {
            __IO uint32_t NCL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTP_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CAN_TTGTP_bits;
    };

    // FDCAN_TTTMK @ offset=0x0000011C
    union {
        __IO uint32_t FDCAN_TTTMK_reg;

        // bit fields
        struct {
            __IO uint32_t TM_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TICC_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t LCKM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TTTMK_bits;
    };

    // FDCAN_TTIR @ offset=0x00000120
    union {
        __IO uint32_t FDCAN_TTIR_reg;

        // bit fields
        struct {
            __IO uint32_t SBC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSM_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOG_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTMI_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTMI_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTW_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXU_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXO_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ELC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWTG_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AW_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CER_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 13;
        } FDCAN_TTIR_bits;
    };

    // FDCAN_TTIE @ offset=0x00000124
    union {
        __IO uint32_t FDCAN_TTIE_reg;

        // bit fields
        struct {
            __IO uint32_t SBCE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMCE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSME_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOGE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTMIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWEE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTWE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTEE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXOE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE1E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE2E_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ELCE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWTGE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WTE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CERE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 13;
        } FDCAN_TTIE_bits;
    };

    // FDCAN_TTILS @ offset=0x00000128
    union {
        __IO uint32_t FDCAN_TTILS_reg;

        // bit fields
        struct {
            __IO uint32_t SBCL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMCL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSML_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOGL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTMIL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TTMIL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWEL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTWL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTDL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTEL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE1L_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SE2L_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ELCL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWTGL_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WTL_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CERL_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 13;
        } FDCAN_TTILS_bits;
    };

    // FDCAN_TTOST @ offset=0x0000012C
    union {
        __IO uint32_t FDCAN_TTOST_reg;

        // bit fields
        struct {
            __IO uint32_t EL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYS_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t GTP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QCS_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTO_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 6;
            __IO uint32_t WGTD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GFI_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TMP_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t GSI_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AWE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WECS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FDCAN_TTOST_bits;
    };

    // FDCAN_TURNA @ offset=0x00000130
    __IO uint32_t FDCAN_TURNA_reg;

    // FDCAN_TTLGT @ offset=0x00000134
    union {
        __IO uint32_t FDCAN_TTLGT_reg;

        // bit fields
        struct {
            __IO uint32_t LT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t GT_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } FDCAN_TTLGT_bits;
    };

    // FDCAN_TTCTC @ offset=0x00000138
    union {
        __IO uint32_t FDCAN_TTCTC_reg;

        // bit fields
        struct {
            __IO uint32_t CT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t CC_bit : 6; // bit offset=16  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 10;
        } FDCAN_TTCTC_bits;
    };

    // FDCAN_TTCPT @ offset=0x0000013C
    union {
        __IO uint32_t FDCAN_TTCPT_reg;

        // bit fields
        struct {
            __IO uint32_t CT_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SWV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } FDCAN_TTCPT_bits;
    };

    // FDCAN_TTCSM @ offset=0x00000140
    __IO uint32_t FDCAN_TTCSM_reg;

    __IO uint8_t RESERVED7[444];

    // FDCAN_TTTS @ offset=0x00000300
    union {
        __IO uint32_t FDCAN_TTTS_reg;

        // bit fields
        struct {
            __IO uint32_t SWTDEL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EVTSEL_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } FDCAN_TTTS_bits;
    };

} fdcan2_t;

// Peripheral FMC @ base_addess=0x52004000
typedef struct fmc_t {

    // BCR1 @ offset=0x00000000
    union {
        __IO uint32_t BCR1_reg;

        // bit fields
        struct {
            __IO uint32_t MBKEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUXEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MTYP_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FACCEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BURSTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITPOL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WAITCFG_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WREN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITEN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTMOD_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASYNCWAIT_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPSIZE_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CBURSTRW_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCLKEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFDIS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t BMAP_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 5;
            __IO uint32_t FMCEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } BCR1_bits;
    };

    // BTR1 @ offset=0x00000004
    union {
        __IO uint32_t BTR1_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLAT_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } BTR1_bits;
    };

    // BCR2 @ offset=0x00000008
    union {
        __IO uint32_t BCR2_reg;

        // bit fields
        struct {
            __IO uint32_t MBKEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUXEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MTYP_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FACCEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BURSTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITPOL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WAITCFG_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WREN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITEN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTMOD_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASYNCWAIT_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPSIZE_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CBURSTRW_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCLKEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFDIS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t BMAP_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 5;
            __IO uint32_t FMCEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } BCR2_bits;
    };

    // BTR2 @ offset=0x0000000C
    union {
        __IO uint32_t BTR2_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLAT_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } BTR2_bits;
    };

    // BCR3 @ offset=0x00000010
    union {
        __IO uint32_t BCR3_reg;

        // bit fields
        struct {
            __IO uint32_t MBKEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUXEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MTYP_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FACCEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BURSTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITPOL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WAITCFG_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WREN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITEN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTMOD_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASYNCWAIT_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPSIZE_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CBURSTRW_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCLKEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFDIS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t BMAP_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 5;
            __IO uint32_t FMCEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } BCR3_bits;
    };

    // BTR3 @ offset=0x00000014
    union {
        __IO uint32_t BTR3_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLAT_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } BTR3_bits;
    };

    // BCR4 @ offset=0x00000018
    union {
        __IO uint32_t BCR4_reg;

        // bit fields
        struct {
            __IO uint32_t MBKEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUXEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MTYP_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FACCEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BURSTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITPOL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WAITCFG_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WREN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITEN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTMOD_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ASYNCWAIT_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPSIZE_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CBURSTRW_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCLKEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFDIS_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t BMAP_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 5;
            __IO uint32_t FMCEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } BCR4_bits;
    };

    // BTR4 @ offset=0x0000001C
    union {
        __IO uint32_t BTR4_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLAT_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } BTR4_bits;
    };

    __IO uint8_t RESERVED0[96];

    // PCR @ offset=0x00000080
    union {
        __IO uint32_t PCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PWAITEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PBKEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TCLR_bit : 4; // bit offset=9  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCPS_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 12;
        } PCR_bits;
    };

    // SR @ offset=0x00000084
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t IRS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ILS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IFS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ILEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IFEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FEMPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } SR_bits;
    };

    // PMEM @ offset=0x00000088
    union {
        __IO uint32_t PMEM_reg;

        // bit fields
        struct {
            __IO uint32_t MEMSET_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEMWAIT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEMHOLD_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MEMHIZ_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } PMEM_bits;
    };

    // PATT @ offset=0x0000008C
    union {
        __IO uint32_t PATT_reg;

        // bit fields
        struct {
            __IO uint32_t ATTSET_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ATTWAIT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ATTHOLD_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ATTHIZ_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } PATT_bits;
    };

    __IO uint8_t RESERVED1[4];

    // ECCR @ offset=0x00000094
    __IO uint32_t ECCR_reg;

    __IO uint8_t RESERVED2[108];

    // BWTR1 @ offset=0x00000104
    union {
        __IO uint32_t BWTR1_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } BWTR1_bits;
    };

    __IO uint8_t RESERVED3[4];

    // BWTR2 @ offset=0x0000010C
    union {
        __IO uint32_t BWTR2_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } BWTR2_bits;
    };

    __IO uint8_t RESERVED4[4];

    // BWTR3 @ offset=0x00000114
    union {
        __IO uint32_t BWTR3_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } BWTR3_bits;
    };

    __IO uint8_t RESERVED5[4];

    // BWTR4 @ offset=0x0000011C
    union {
        __IO uint32_t BWTR4_reg;

        // bit fields
        struct {
            __IO uint32_t ADDSET_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDHLD_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAST_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSTURN_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t ACCMOD_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 2;
        } BWTR4_bits;
    };

    __IO uint8_t RESERVED6[32];

    // SDCR1 @ offset=0x00000140
    union {
        __IO uint32_t SDCR1_reg;

        // bit fields
        struct {
            __IO uint32_t NC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NR_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NB_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CAS_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDCLK_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBURST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RPIPE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 17;
        } SDCR1_bits;
    };

    // SDCR2 @ offset=0x00000144
    union {
        __IO uint32_t SDCR2_reg;

        // bit fields
        struct {
            __IO uint32_t NC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NR_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MWID_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NB_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CAS_bit : 2; // bit offset=7  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDCLK_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RBURST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RPIPE_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 17;
        } SDCR2_bits;
    };

    // SDTR1 @ offset=0x00000148
    union {
        __IO uint32_t SDTR1_reg;

        // bit fields
        struct {
            __IO uint32_t TMRD_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXSR_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRAS_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRC_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TWR_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRP_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRCD_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 4;
        } SDTR1_bits;
    };

    // SDTR2 @ offset=0x0000014C
    union {
        __IO uint32_t SDTR2_reg;

        // bit fields
        struct {
            __IO uint32_t TMRD_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXSR_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRAS_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRC_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TWR_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRP_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRCD_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 4;
        } SDTR2_bits;
    };

    // SDCMR @ offset=0x00000150
    union {
        __IO uint32_t SDCMR_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTB2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTB1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NRFS_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MRD_bit : 14; // bit offset=9  bit width=14  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 9;
        } SDCMR_bits;
    };

    // SDRTR @ offset=0x00000154
    union {
        __IO uint32_t SDRTR_reg;

        // bit fields
        struct {
            __IO uint32_t CRE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COUNT_bit : 13; // bit offset=1  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t REIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 17;
        } SDRTR_bits;
    };

    // SDSR @ offset=0x00000158
    union {
        __IO uint32_t SDSR_reg;

        // bit fields
        struct {
            __IO uint32_t RE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODES1_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODES2_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 27;
        } SDSR_bits;
    };

} fmc_t;

// Peripheral Flash @ base_addess=0x52002000
typedef struct flash_t {

    // ACR @ offset=0x00000000
    union {
        __IO uint32_t ACR_reg;

        // bit fields
        struct {
            __IO uint32_t LATENCY_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRHIGHFREQ_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 26;
        } ACR_bits;
    };

    // KEYR1 @ offset=0x00000004
    __IO uint32_t KEYR1_reg;

    // OPTKEYR @ offset=0x00000008
    __IO uint32_t OPTKEYR_reg;

    // CR1 @ offset=0x0000000C
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t LOCK1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PG1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SER1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BER1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FW1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNB1_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t CRC_EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOPIE1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRPERRIE1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PGSERRIE1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRBERRIE1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INCERRIE1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPERRIE1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDPERRIE1_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDSERRIE1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNECCERR1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBECCERRIE1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCENDIE1_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCRDERRIE1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } CR1_bits;
    };

    // SR1 @ offset=0x00000010
    union {
        __IO uint32_t SR1_reg;

        // bit fields
        struct {
            __IO uint32_t BSY1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WBNE1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QW1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC_BUSY1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t EOP1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRPERR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PGSERR1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRBERR1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INCERR1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPERR1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDPERR1_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDSERR1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNECCERR_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBECCERR1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEND1_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCRDERR1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 3;
        } SR1_bits;
    };

    // CCR1 @ offset=0x00000014
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t CLR_EOP1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_WRPERR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_PGSERR1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_STRBERR1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CLR_INCERR1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_OPERR1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_RDPERR1_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_RDSERR1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_SNECCERR1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_DBECCERR1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_CRCEND1_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_CRCRDERR1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 3;
        } CCR1_bits;
    };

    // OPTCR @ offset=0x00000018
    union {
        __IO uint32_t OPTCR_reg;

        // bit fields
        struct {
            __IO uint32_t OPTLOCK_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPTSTART_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 25;
            __IO uint32_t OPTCHANGEERRIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_BANK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OPTCR_bits;
    };

    // OPTSR_CUR @ offset=0x0000001C
    union {
        __IO uint32_t OPTSR_CUR_reg;

        // bit fields
        struct {
            __IO uint32_t OPT_BUSY_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BOR_LEV_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG1_SW_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t NRST_STOP_D1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NRST_STBY_D1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDP_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t IWDG_FZ_STOP_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG_FZ_SDBY_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_RAM_SIZE_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SECURITY_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 7;
            __IO uint32_t IO_HSLV_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPTCHANGEERR_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_BANK_OPT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OPTSR_CUR_bits;
    };

    // OPTSR_PRG @ offset=0x00000020
    union {
        __IO uint32_t OPTSR_PRG_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t BOR_LEV_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG1_SW_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t NRST_STOP_D1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NRST_STBY_D1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDP_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t IWDG_FZ_STOP_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG_FZ_SDBY_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_RAM_SIZE_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SECURITY_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 7;
            __IO uint32_t IO_HSLV_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SWAP_BANK_OPT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OPTSR_PRG_bits;
    };

    // OPTCCR @ offset=0x00000024
    __IO uint32_t OPTCCR_reg;

    // PRAR_CUR1 @ offset=0x00000028
    union {
        __IO uint32_t PRAR_CUR1_reg;

        // bit fields
        struct {
            __IO uint32_t PROT_AREA_START1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PROT_AREA_END1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMEP1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } PRAR_CUR1_bits;
    };

    // PRAR_PRG1 @ offset=0x0000002C
    union {
        __IO uint32_t PRAR_PRG1_reg;

        // bit fields
        struct {
            __IO uint32_t PROT_AREA_START1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PROT_AREA_END1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMEP1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } PRAR_PRG1_bits;
    };

    // SCAR_CUR1 @ offset=0x00000030
    union {
        __IO uint32_t SCAR_CUR1_reg;

        // bit fields
        struct {
            __IO uint32_t SEC_AREA_START1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SEC_AREA_END1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMES1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SCAR_CUR1_bits;
    };

    // SCAR_PRG1 @ offset=0x00000034
    union {
        __IO uint32_t SCAR_PRG1_reg;

        // bit fields
        struct {
            __IO uint32_t SEC_AREA_START1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SEC_AREA_END1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMES1_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SCAR_PRG1_bits;
    };

    // WPSN_CUR1R @ offset=0x00000038
    __IO uint32_t WPSN_CUR1R_reg;

    // WPSN_PRG1R @ offset=0x0000003C
    __IO uint32_t WPSN_PRG1R_reg;

    // BOOT_CURR @ offset=0x00000040
    union {
        __IO uint32_t BOOT_CURR_reg;

        // bit fields
        struct {
            __IO uint32_t BOOT_ADD0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOOT_ADD1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } BOOT_CURR_bits;
    };

    // BOOT_PRGR @ offset=0x00000044
    union {
        __IO uint32_t BOOT_PRGR_reg;

        // bit fields
        struct {
            __IO uint32_t BOOT_ADD0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOOT_ADD1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } BOOT_PRGR_bits;
    };

    __IO uint8_t RESERVED0[8];

    // CRCCR1 @ offset=0x00000050
    union {
        __IO uint32_t CRCCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CRC_SECT_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t ALL_BANK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC_BY_SECT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD_SECT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLEAN_SECT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t START_CRC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLEAN_CRC_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t CRC_BURST_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 10;
        } CRCCR1_bits;
    };

    // CRCSADD1R @ offset=0x00000054
    __IO uint32_t CRCSADD1R_reg;

    // CRCEADD1R @ offset=0x00000058
    __IO uint32_t CRCEADD1R_reg;

    // CRCDATAR @ offset=0x0000005C
    __IO uint32_t CRCDATAR_reg;

    // ECC_FA1R @ offset=0x00000060
    __IO uint32_t ECC_FA1R_reg;

    __IO uint8_t RESERVED1[156];

    // ACR_ @ offset=0x00000100
    union {
        __IO uint32_t ACR__reg;

        // bit fields
        struct {
            __IO uint32_t LATENCY_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRHIGHFREQ_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 26;
        } ACR__bits;
    };

    // KEYR2 @ offset=0x00000104
    __IO uint32_t KEYR2_reg;

    // OPTKEYR_ @ offset=0x00000108
    __IO uint32_t OPTKEYR__reg;

    // CR2 @ offset=0x0000010C
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t LOCK2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PG2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SER2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BER2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSIZE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FW2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START2_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNB2_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SPSS2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC_EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOPIE2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRPERRIE2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PGSERRIE2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRBERRIE2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INCERRIE2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPERRIE2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDPERRIE2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDSERRIE2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNECCERRIE2_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBECCERRIE2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCENDIE2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCRDERRIE2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 3;
        } CR2_bits;
    };

    // SR2 @ offset=0x00000110
    union {
        __IO uint32_t SR2_reg;

        // bit fields
        struct {
            __IO uint32_t BSY2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WBNE2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QW2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC_BUSY2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t EOP2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRPERR2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PGSERR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRBERR2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INCERR2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPERR2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDPERR2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDSERR2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNECCERR2_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBECCERR2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEND2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 4;
        } SR2_bits;
    };

    // CCR2 @ offset=0x00000114
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t CLR_EOP2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_WRPERR2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_PGSERR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_STRBERR2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CLR_INCERR2_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_OPERR2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_RDPERR2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_RDSERR1_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_SNECCERR2_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_DBECCERR1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLR_CRCEND2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 4;
        } CCR2_bits;
    };

    // OPTCR_ @ offset=0x00000118
    union {
        __IO uint32_t OPTCR__reg;

        // bit fields
        struct {
            __IO uint32_t OPTLOCK_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPTSTART_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 25;
            __IO uint32_t OPTCHANGEERRIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_BANK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OPTCR__bits;
    };

    // OPTSR_CUR_ @ offset=0x0000011C
    union {
        __IO uint32_t OPTSR_CUR__reg;

        // bit fields
        struct {
            __IO uint32_t OPT_BUSY_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BOR_LEV_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG1_SW_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t NRST_STOP_D1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NRST_STBY_D1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDP_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t IWDG_FZ_STOP_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG_FZ_SDBY_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_RAM_SIZE_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SECURITY_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 7;
            __IO uint32_t IO_HSLV_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPTCHANGEERR_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_BANK_OPT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OPTSR_CUR__bits;
    };

    // OPTSR_PRG_ @ offset=0x00000120
    union {
        __IO uint32_t OPTSR_PRG__reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t BOR_LEV_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t IWDG1_SW_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t NRST_STOP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NRST_STDY_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDP_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t FZ_IWDG_STOP_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FZ_IWDG_SDBY_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_RAM_SIZE_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SECURITY_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 7;
            __IO uint32_t IO_HSLV_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SWAP_BANK_OPT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OPTSR_PRG__bits;
    };

    // OPTCCR_ @ offset=0x00000124
    __IO uint32_t OPTCCR__reg;

    // PRAR_CUR2 @ offset=0x00000128
    union {
        __IO uint32_t PRAR_CUR2_reg;

        // bit fields
        struct {
            __IO uint32_t PROT_AREA_START2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PROT_AREA_END2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMEP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } PRAR_CUR2_bits;
    };

    // PRAR_PRG2 @ offset=0x0000012C
    union {
        __IO uint32_t PRAR_PRG2_reg;

        // bit fields
        struct {
            __IO uint32_t PROT_AREA_START2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PROT_AREA_END2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMEP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } PRAR_PRG2_bits;
    };

    // SCAR_CUR2 @ offset=0x00000130
    union {
        __IO uint32_t SCAR_CUR2_reg;

        // bit fields
        struct {
            __IO uint32_t SEC_AREA_START2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SEC_AREA_END2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMES2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SCAR_CUR2_bits;
    };

    // SCAR_PRG2 @ offset=0x00000134
    union {
        __IO uint32_t SCAR_PRG2_reg;

        // bit fields
        struct {
            __IO uint32_t SEC_AREA_START2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SEC_AREA_END2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DMES2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SCAR_PRG2_bits;
    };

    // WPSN_CUR2R @ offset=0x00000138
    __IO uint32_t WPSN_CUR2R_reg;

    // WPSN_PRG2R @ offset=0x0000013C
    __IO uint32_t WPSN_PRG2R_reg;

    // BOOT_CURR_ @ offset=0x00000140
    union {
        __IO uint32_t BOOT_CURR__reg;

        // bit fields
        struct {
            __IO uint32_t BOOT_ADD0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOOT_ADD1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } BOOT_CURR__bits;
    };

    // BOOT_PRGR_ @ offset=0x00000144
    union {
        __IO uint32_t BOOT_PRGR__reg;

        // bit fields
        struct {
            __IO uint32_t BOOT_ADD0_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOOT_ADD1_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } BOOT_PRGR__bits;
    };

    __IO uint8_t RESERVED2[8];

    // CRCCR2 @ offset=0x00000150
    union {
        __IO uint32_t CRCCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CRC_SECT_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t ALL_BANK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC_BY_SECT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD_SECT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLEAN_SECT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t START_CRC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLEAN_CRC_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t CRC_BURST_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 10;
        } CRCCR2_bits;
    };

    // CRCSADD2R @ offset=0x00000154
    __IO uint32_t CRCSADD2R_reg;

    // CRCEADD2R @ offset=0x00000158
    __IO uint32_t CRCEADD2R_reg;

    // CRCDATAR_ @ offset=0x0000015C
    __IO uint32_t CRCDATAR__reg;

    // ECC_FA2R @ offset=0x00000160
    __IO uint32_t ECC_FA2R_reg;

} flash_t;

// Peripheral GPIOA @ base_addess=0x58020000
typedef struct gpioa_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpioa_t;

// Peripheral GPIOB @ base_addess=0x58020400
typedef struct gpiob_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpiob_t;

// Peripheral GPIOC @ base_addess=0x58020800
typedef struct gpioc_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpioc_t;

// Peripheral GPIOD @ base_addess=0x58020C00
typedef struct gpiod_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpiod_t;

// Peripheral GPIOE @ base_addess=0x58021000
typedef struct gpioe_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpioe_t;

// Peripheral GPIOF @ base_addess=0x58021400
typedef struct gpiof_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpiof_t;

// Peripheral GPIOG @ base_addess=0x58021800
typedef struct gpiog_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpiog_t;

// Peripheral GPIOH @ base_addess=0x58021C00
typedef struct gpioh_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpioh_t;

// Peripheral GPIOI @ base_addess=0x58022000
typedef struct gpioi_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpioi_t;

// Peripheral GPIOJ @ base_addess=0x58022400
typedef struct gpioj_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpioj_t;

// Peripheral GPIOK @ base_addess=0x58022800
typedef struct gpiok_t {

    // MODER @ offset=0x00000000
    union {
        __IO uint32_t MODER_reg;

        // bit fields
        struct {
            __IO uint32_t MODE0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODE15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MODER_bits;
    };

    // OTYPER @ offset=0x00000004
    union {
        __IO uint32_t OTYPER_reg;

        // bit fields
        struct {
            __IO uint32_t OT0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OT15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } OTYPER_bits;
    };

    // OSPEEDR @ offset=0x00000008
    union {
        __IO uint32_t OSPEEDR_reg;

        // bit fields
        struct {
            __IO uint32_t OSPEED0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSPEED15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } OSPEEDR_bits;
    };

    // PUPDR @ offset=0x0000000C
    union {
        __IO uint32_t PUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t PUPD0_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD1_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD2_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD3_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD4_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD5_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD6_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD7_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD8_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD9_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD10_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD11_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD12_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD13_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD14_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PUPD15_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } PUPDR_bits;
    };

    // IDR @ offset=0x00000010
    union {
        __IO uint32_t IDR_reg;

        // bit fields
        struct {
            __IO uint32_t ID0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ID15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } IDR_bits;
    };

    // ODR @ offset=0x00000014
    union {
        __IO uint32_t ODR_reg;

        // bit fields
        struct {
            __IO uint32_t OD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OD15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } ODR_bits;
    };

    // BSRR @ offset=0x00000018
    union {
        __IO uint32_t BSRR_reg;

        // bit fields
        struct {
            __IO uint32_t BS0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BS15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR5_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR6_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR7_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR8_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR9_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR10_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR11_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR12_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR13_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR14_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BR15_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } BSRR_bits;
    };

    // LCKR @ offset=0x0000001C
    union {
        __IO uint32_t LCKR_reg;

        // bit fields
        struct {
            __IO uint32_t LCK0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCK15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LCKK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } LCKR_bits;
    };

    // AFRL @ offset=0x00000020
    union {
        __IO uint32_t AFRL_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL4_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL5_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL6_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRL_bits;
    };

    // AFRH @ offset=0x00000024
    union {
        __IO uint32_t AFRH_reg;

        // bit fields
        struct {
            __IO uint32_t AFSEL8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL12_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL13_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL14_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSEL15_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } AFRH_bits;
    };

} gpiok_t;

// Peripheral HRTIM_Common @ base_addess=0x40017780
typedef struct hrtim_common_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t MUDIS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAUDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBUDIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCUDIS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDUDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEUDIS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t AD1USRC_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2USRC_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD3USRC_bit : 3; // bit offset=22  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD4USRC_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t MSWU_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TASWU_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBSWU_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCSWU_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDSWU_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TESWU_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TARST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBRST_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRST_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDRST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TERST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 18;
        } CR2_bits;
    };

    // ISR @ offset=0x00000008
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FLT2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FLT3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FLT4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FLT5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SYSFLT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t DLLRDY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BMPER_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 14;
        } ISR_bits;
    };

    // ICR @ offset=0x0000000C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FLT2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FLT3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FLT4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FLT5C_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SYSFLTC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t DLLRDYC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BMPERC_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 14;
        } ICR_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYSFLTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t DLLRDYIE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BMPERIE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } IER_bits;
    };

    // OENR @ offset=0x00000014
    union {
        __IO uint32_t OENR_reg;

        // bit fields
        struct {
            __IO uint32_t TA1OEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TA2OEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TB1OEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TB2OEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TC1OEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TC2OEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TD1OEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TD2OEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TE1OEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TE2OEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 22;
        } OENR_bits;
    };

    // DISR @ offset=0x00000018
    union {
        __IO uint32_t DISR_reg;

        // bit fields
        struct {
            __IO uint32_t TA1ODIS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA2ODIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1ODIS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB2ODIS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1ODIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC2ODIS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1ODIS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD2ODIS_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1ODIS_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE2ODIS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 22;
        } DISR_bits;
    };

    // ODSR @ offset=0x0000001C
    union {
        __IO uint32_t ODSR_reg;

        // bit fields
        struct {
            __IO uint32_t TA1ODS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TA2ODS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TB1ODS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TB2ODS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC1ODS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC2ODS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TD1ODS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TD2ODS_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TE1ODS_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TE2ODS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 22;
        } ODSR_bits;
    };

    // BMCR @ offset=0x00000020
    union {
        __IO uint32_t BMCR_reg;

        // bit fields
        struct {
            __IO uint32_t BME_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BMOM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BMCLK_bit : 4; // bit offset=2  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BMPRSC_bit : 4; // bit offset=6  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BMPREN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t MTBM_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TABM_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBBM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDBM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEBM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t BMSTAT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } BMCR_bits;
    };

    // BMTRG @ offset=0x00000024
    union {
        __IO uint32_t BMTRG_reg;

        // bit fields
        struct {
            __IO uint32_t SW_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTRST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTREP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TARST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAREP_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBRST_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBREP_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRST_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCREP_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDREP_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TERST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEREP_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t OCHPEV_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } BMTRG_bits;
    };

    // BMCMPR6 @ offset=0x00000028
    __IO uint32_t BMCMPR6_reg;

    // BMPER @ offset=0x0000002C
    __IO uint32_t BMPER_reg;

    // EECR1 @ offset=0x00000030
    union {
        __IO uint32_t EECR1_reg;

        // bit fields
        struct {
            __IO uint32_t EE1SRC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1POL_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1SNS_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1FAST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2SRC_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2POL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2SNS_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2FAST_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3SRC_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3POL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3SNS_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3FAST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4SRC_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4POL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4SNS_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4FAST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5SRC_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5POL_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5SNS_bit : 2; // bit offset=27  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5FAST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 2;
        } EECR1_bits;
    };

    // EECR2 @ offset=0x00000034
    union {
        __IO uint32_t EECR2_reg;

        // bit fields
        struct {
            __IO uint32_t EE6SRC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6POL_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6SNS_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7SRC_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7POL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7SNS_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8SRC_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8POL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8SNS_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9SRC_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9POL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9SNS_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10SRC_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10POL_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10SNS_bit : 2; // bit offset=27  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EECR2_bits;
    };

    // EECR3 @ offset=0x00000038
    union {
        __IO uint32_t EECR3_reg;

        // bit fields
        struct {
            __IO uint32_t EE6SRC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6POL_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6SNS_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7SRC_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7POL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7SNS_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8SRC_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8POL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8SNS_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9SRC_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9POL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9SNS_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10SRC_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10POL_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10SNS_bit : 2; // bit offset=27  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EECR3_bits;
    };

    // ADC1R @ offset=0x0000003C
    union {
        __IO uint32_t ADC1R_reg;

        // bit fields
        struct {
            __IO uint32_t AD1MC1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MC2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MC3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MC4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAC2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAC3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAC4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAPER_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TARST_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBC2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBC3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBC4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBPER_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCC2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCC3_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCC4_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCPER_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDC2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDC3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDC4_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDPER_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEC2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEC3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEC4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEPER_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ADC1R_bits;
    };

    // ADC2R @ offset=0x00000040
    union {
        __IO uint32_t ADC2R_reg;

        // bit fields
        struct {
            __IO uint32_t AD2MC1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MC2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MC3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MC4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV7_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV8_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV9_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV10_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAC2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAC3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAC4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAPER_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBC2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBC3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBC4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBPER_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCC2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCC3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCC4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCPER_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCRST_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDC2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDC3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDC4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDPER_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDRST_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TEC2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TEC3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TEC4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TERST_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ADC2R_bits;
    };

    // ADC3R @ offset=0x00000044
    union {
        __IO uint32_t ADC3R_reg;

        // bit fields
        struct {
            __IO uint32_t AD1MC1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MC2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MC3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MC4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1MPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1EEV5_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAC2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAC3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAC4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TAPER_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TARST_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBC2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBC3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBC4_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBPER_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TBRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCC2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCC3_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCC4_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TCPER_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDC2_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDC3_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDC4_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TDPER_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEC2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEC3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEC4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD1TEPER_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ADC3R_bits;
    };

    // ADC4R @ offset=0x00000048
    union {
        __IO uint32_t ADC4R_reg;

        // bit fields
        struct {
            __IO uint32_t AD2MC1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MC2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MC3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MC4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2MPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV7_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV8_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV9_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2EEV10_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAC2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAC3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAC4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TAPER_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBC2_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBC3_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBC4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TBPER_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCC2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCC3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCC4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCPER_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TCRST_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDC2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDC3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDC4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDPER_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TDRST_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TEC2_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TEC3_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TEC4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AD2TERST_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } ADC4R_bits;
    };

    // DLLCR @ offset=0x0000004C
    union {
        __IO uint32_t DLLCR_reg;

        // bit fields
        struct {
            __IO uint32_t CAL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALRTE_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } DLLCR_bits;
    };

    // FLTINR1 @ offset=0x00000050
    union {
        __IO uint32_t FLTINR1_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT1SRC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT1F_bit : 4; // bit offset=3  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT1LCK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2SRC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2F_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2LCK_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3E_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3P_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3SRC_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3F_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3LCK_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4E_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4P_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4SRC_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4F_bit : 4; // bit offset=27  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4LCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FLTINR1_bits;
    };

    // FLTINR2 @ offset=0x00000054
    union {
        __IO uint32_t FLTINR2_reg;

        // bit fields
        struct {
            __IO uint32_t FLT5E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5SRC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5F_bit : 4; // bit offset=3  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5LCK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t FLTSD_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 6;
        } FLTINR2_bits;
    };

    // BDMUPDR @ offset=0x00000058
    union {
        __IO uint32_t BDMUPDR_reg;

        // bit fields
        struct {
            __IO uint32_t MCR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MICR_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MDIER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MREP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP2_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP3_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP4_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 22;
        } BDMUPDR_bits;
    };

    // BDTxUPR @ offset=0x0000005C
    union {
        __IO uint32_t BDTXUPR_reg;

        // bit fields
        struct {
            __IO uint32_t TIMXCR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXICR_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXDIER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXCNT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXREP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXCMP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXCMP2_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXCMP3_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXCMP4_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMX_DTXR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXSET1R_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXRST1R_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXSET2R_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXRST2R_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXEEFR1_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXEEFR2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXRSTR_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXCHPR_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXOUTR_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMXFLTR_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 11;
        } BDTXUPR_bits;
    };

    // BDMADR @ offset=0x00000060
    __IO uint32_t BDMADR_reg;

} hrtim_common_t;

// Peripheral HRTIM_Master @ base_addess=0x40017400
typedef struct hrtim_master_t {

    // MCR @ offset=0x00000000
    union {
        __IO uint32_t MCR_reg;

        // bit fields
        struct {
            __IO uint32_t CK_PSC_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RETRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HALF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SYNC_IN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCRSTM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCSTRTM_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_OUT_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNC_SRC_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t DACSYNC_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PREEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t MREPU_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRSTDMA_bit : 2; // bit offset=30  bit width=2  access=SVDAccessType.READ_WRITE
        } MCR_bits;
    };

    // MISR @ offset=0x00000004
    union {
        __IO uint32_t MISR_reg;

        // bit fields
        struct {
            __IO uint32_t MCMP1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MCMP2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MCMP3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MCMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MREP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SYNC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUPD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } MISR_bits;
    };

    // MICR @ offset=0x00000008
    union {
        __IO uint32_t MICR_reg;

        // bit fields
        struct {
            __IO uint32_t MCMP1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MCMP2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MCMP3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MCMP4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MREPC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SYNCC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MUPDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 25;
        } MICR_bits;
    };

    // MDIER4 @ offset=0x0000000C
    union {
        __IO uint32_t MDIER4_reg;

        // bit fields
        struct {
            __IO uint32_t MCMP1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MREPIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t MCMP1DE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP2DE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP3DE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCMP4DE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MREPDE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCDE_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUPDDE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 9;
        } MDIER4_bits;
    };

    // MCNTR @ offset=0x00000010
    __IO uint32_t MCNTR_reg;

    // MPER @ offset=0x00000014
    __IO uint32_t MPER_reg;

    // MREP @ offset=0x00000018
    __IO uint32_t MREP_reg;

    // MCMP1R @ offset=0x0000001C
    __IO uint32_t MCMP1R_reg;

    __IO uint8_t RESERVED0[4];

    // MCMP2R @ offset=0x00000024
    __IO uint32_t MCMP2R_reg;

    // MCMP3R @ offset=0x00000028
    __IO uint32_t MCMP3R_reg;

    // MCMP4R @ offset=0x0000002C
    __IO uint32_t MCMP4R_reg;

} hrtim_master_t;

// Peripheral HRTIM_TIMA @ base_addess=0x40017480
typedef struct hrtim_tima_t {

    // TIMACR @ offset=0x00000000
    union {
        __IO uint32_t TIMACR_reg;

        // bit fields
        struct {
            __IO uint32_t CK_PSCX_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RETRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HALF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSHPLL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SYNCRSTX_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCSTRTX_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXREPU_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXRSTU_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TBU_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCU_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDU_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEU_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTU_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DACSYNC_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PREEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDGAT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMACR_bits;
    };

    // TIMAISR @ offset=0x00000004
    union {
        __IO uint32_t TIMAISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DLYPRT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CPPSTAT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IPPSTAT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O1STAT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O2STAT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 12;
        } TIMAISR_bits;
    };

    // TIMAICR @ offset=0x00000008
    union {
        __IO uint32_t TIMAICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t REPC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT1C_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT2C_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET1XC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX1C_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET2XC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX2C_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTC_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DLYPRTC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 17;
        } TIMAICR_bits;
    };

    // TIMADIER5 @ offset=0x0000000C
    union {
        __IO uint32_t TIMADIER5_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1IE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2IE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2IE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CMP1DE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2DE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3DE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4DE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPDE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t UPDDE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1DE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2DE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XDE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1DE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2DE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2DE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTDE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } TIMADIER5_bits;
    };

    // CNTAR @ offset=0x00000010
    __IO uint32_t CNTAR_reg;

    // PERAR @ offset=0x00000014
    __IO uint32_t PERAR_reg;

    // REPAR @ offset=0x00000018
    __IO uint32_t REPAR_reg;

    // CMP1AR @ offset=0x0000001C
    __IO uint32_t CMP1AR_reg;

    // CMP1CAR @ offset=0x00000020
    union {
        __IO uint32_t CMP1CAR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1X_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPX_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } CMP1CAR_bits;
    };

    // CMP2AR @ offset=0x00000024
    __IO uint32_t CMP2AR_reg;

    // CMP3AR @ offset=0x00000028
    __IO uint32_t CMP3AR_reg;

    // CMP4AR @ offset=0x0000002C
    __IO uint32_t CMP4AR_reg;

    // CPT1AR @ offset=0x00000030
    __IO uint32_t CPT1AR_reg;

    // CPT2AR @ offset=0x00000034
    __IO uint32_t CPT2AR_reg;

    // DTAR @ offset=0x00000038
    union {
        __IO uint32_t DTAR_reg;

        // bit fields
        struct {
            __IO uint32_t DTRX_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTRX_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTPRSC_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DTRSLKX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTRLKX_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFX_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTFX_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t DTFSLKX_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFLKX_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DTAR_bits;
    };

    // SETA1R @ offset=0x0000003C
    union {
        __IO uint32_t SETA1R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETA1R_bits;
    };

    // RSTA1R @ offset=0x00000040
    union {
        __IO uint32_t RSTA1R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTA1R_bits;
    };

    // SETA2R @ offset=0x00000044
    union {
        __IO uint32_t SETA2R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETA2R_bits;
    };

    // RSTA2R @ offset=0x00000048
    union {
        __IO uint32_t RSTA2R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTA2R_bits;
    };

    // EEFAR1 @ offset=0x0000004C
    union {
        __IO uint32_t EEFAR1_reg;

        // bit fields
        struct {
            __IO uint32_t EE1LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE2LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE3LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE4LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE5LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFAR1_bits;
    };

    // EEFAR2 @ offset=0x00000050
    union {
        __IO uint32_t EEFAR2_reg;

        // bit fields
        struct {
            __IO uint32_t EE6LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFAR2_bits;
    };

    // RSTAR @ offset=0x00000054
    union {
        __IO uint32_t RSTAR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } RSTAR_bits;
    };

    // CHPAR @ offset=0x00000058
    union {
        __IO uint32_t CHPAR_reg;

        // bit fields
        struct {
            __IO uint32_t CHPFRQ_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHPDTY_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRTPW_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CHPAR_bits;
    };

    // CPT1ACR @ offset=0x0000005C
    union {
        __IO uint32_t CPT1ACR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT1ACR_bits;
    };

    // CPT2ACR @ offset=0x00000060
    union {
        __IO uint32_t CPT2ACR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT2ACR_bits;
    };

    // OUTAR @ offset=0x00000064
    union {
        __IO uint32_t OUTAR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t POL1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRT_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t POL2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } OUTAR_bits;
    };

    // FLTAR @ offset=0x00000068
    union {
        __IO uint32_t FLTAR_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 26;
            __IO uint32_t FLTLCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FLTAR_bits;
    };

} hrtim_tima_t;

// Peripheral HRTIM_TIMB @ base_addess=0x40017500
typedef struct hrtim_timb_t {

    // TIMBCR @ offset=0x00000000
    union {
        __IO uint32_t TIMBCR_reg;

        // bit fields
        struct {
            __IO uint32_t CK_PSCX_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RETRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HALF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSHPLL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SYNCRSTX_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCSTRTX_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXREPU_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXRSTU_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TBU_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCU_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDU_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEU_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTU_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DACSYNC_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PREEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDGAT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMBCR_bits;
    };

    // TIMBISR @ offset=0x00000004
    union {
        __IO uint32_t TIMBISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DLYPRT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CPPSTAT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IPPSTAT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O1STAT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O2STAT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 12;
        } TIMBISR_bits;
    };

    // TIMBICR @ offset=0x00000008
    union {
        __IO uint32_t TIMBICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t REPC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT1C_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT2C_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET1XC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX1C_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET2XC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX2C_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTC_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DLYPRTC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 17;
        } TIMBICR_bits;
    };

    // TIMBDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t TIMBDIER5_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1IE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2IE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2IE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CMP1DE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2DE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3DE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4DE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPDE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t UPDDE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1DE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2DE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XDE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1DE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2DE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2DE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTDE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } TIMBDIER5_bits;
    };

    // CNTR @ offset=0x00000010
    __IO uint32_t CNTR_reg;

    // PERBR @ offset=0x00000014
    __IO uint32_t PERBR_reg;

    // REPBR @ offset=0x00000018
    __IO uint32_t REPBR_reg;

    // CMP1BR @ offset=0x0000001C
    __IO uint32_t CMP1BR_reg;

    // CMP1CBR @ offset=0x00000020
    union {
        __IO uint32_t CMP1CBR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1X_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPX_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } CMP1CBR_bits;
    };

    // CMP2BR @ offset=0x00000024
    __IO uint32_t CMP2BR_reg;

    // CMP3BR @ offset=0x00000028
    __IO uint32_t CMP3BR_reg;

    // CMP4BR @ offset=0x0000002C
    __IO uint32_t CMP4BR_reg;

    // CPT1BR @ offset=0x00000030
    __IO uint32_t CPT1BR_reg;

    // CPT2BR @ offset=0x00000034
    __IO uint32_t CPT2BR_reg;

    // DTBR @ offset=0x00000038
    union {
        __IO uint32_t DTBR_reg;

        // bit fields
        struct {
            __IO uint32_t DTRX_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTRX_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTPRSC_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DTRSLKX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTRLKX_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFX_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTFX_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t DTFSLKX_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFLKX_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DTBR_bits;
    };

    // SETB1R @ offset=0x0000003C
    union {
        __IO uint32_t SETB1R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETB1R_bits;
    };

    // RSTB1R @ offset=0x00000040
    union {
        __IO uint32_t RSTB1R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTB1R_bits;
    };

    // SETB2R @ offset=0x00000044
    union {
        __IO uint32_t SETB2R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETB2R_bits;
    };

    // RSTB2R @ offset=0x00000048
    union {
        __IO uint32_t RSTB2R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTB2R_bits;
    };

    // EEFBR1 @ offset=0x0000004C
    union {
        __IO uint32_t EEFBR1_reg;

        // bit fields
        struct {
            __IO uint32_t EE1LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE2LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE3LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE4LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE5LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFBR1_bits;
    };

    // EEFBR2 @ offset=0x00000050
    union {
        __IO uint32_t EEFBR2_reg;

        // bit fields
        struct {
            __IO uint32_t EE6LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFBR2_bits;
    };

    // RSTBR @ offset=0x00000054
    union {
        __IO uint32_t RSTBR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } RSTBR_bits;
    };

    // CHPBR @ offset=0x00000058
    union {
        __IO uint32_t CHPBR_reg;

        // bit fields
        struct {
            __IO uint32_t CHPFRQ_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHPDTY_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRTPW_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CHPBR_bits;
    };

    // CPT1BCR @ offset=0x0000005C
    union {
        __IO uint32_t CPT1BCR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT1BCR_bits;
    };

    // CPT2BCR @ offset=0x00000060
    union {
        __IO uint32_t CPT2BCR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT2BCR_bits;
    };

    // OUTBR @ offset=0x00000064
    union {
        __IO uint32_t OUTBR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t POL1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRT_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t POL2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } OUTBR_bits;
    };

    // FLTBR @ offset=0x00000068
    union {
        __IO uint32_t FLTBR_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 26;
            __IO uint32_t FLTLCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FLTBR_bits;
    };

} hrtim_timb_t;

// Peripheral HRTIM_TIMC @ base_addess=0x40017580
typedef struct hrtim_timc_t {

    // TIMCCR @ offset=0x00000000
    union {
        __IO uint32_t TIMCCR_reg;

        // bit fields
        struct {
            __IO uint32_t CK_PSCX_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RETRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HALF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSHPLL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SYNCRSTX_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCSTRTX_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXREPU_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXRSTU_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TBU_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCU_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDU_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEU_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTU_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DACSYNC_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PREEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDGAT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMCCR_bits;
    };

    // TIMCISR @ offset=0x00000004
    union {
        __IO uint32_t TIMCISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DLYPRT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CPPSTAT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IPPSTAT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O1STAT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O2STAT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 12;
        } TIMCISR_bits;
    };

    // TIMCICR @ offset=0x00000008
    union {
        __IO uint32_t TIMCICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t REPC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT1C_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT2C_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET1XC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX1C_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET2XC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX2C_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTC_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DLYPRTC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 17;
        } TIMCICR_bits;
    };

    // TIMCDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t TIMCDIER5_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1IE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2IE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2IE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CMP1DE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2DE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3DE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4DE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPDE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t UPDDE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1DE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2DE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XDE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1DE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2DE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2DE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTDE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } TIMCDIER5_bits;
    };

    // CNTCR @ offset=0x00000010
    __IO uint32_t CNTCR_reg;

    // PERCR @ offset=0x00000014
    __IO uint32_t PERCR_reg;

    // REPCR @ offset=0x00000018
    __IO uint32_t REPCR_reg;

    // CMP1CR @ offset=0x0000001C
    __IO uint32_t CMP1CR_reg;

    // CMP1CCR @ offset=0x00000020
    union {
        __IO uint32_t CMP1CCR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1X_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPX_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } CMP1CCR_bits;
    };

    // CMP2CR @ offset=0x00000024
    __IO uint32_t CMP2CR_reg;

    // CMP3CR @ offset=0x00000028
    __IO uint32_t CMP3CR_reg;

    // CMP4CR @ offset=0x0000002C
    __IO uint32_t CMP4CR_reg;

    // CPT1CR @ offset=0x00000030
    __IO uint32_t CPT1CR_reg;

    // CPT2CR @ offset=0x00000034
    __IO uint32_t CPT2CR_reg;

    // DTCR @ offset=0x00000038
    union {
        __IO uint32_t DTCR_reg;

        // bit fields
        struct {
            __IO uint32_t DTRX_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTRX_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTPRSC_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DTRSLKX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTRLKX_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFX_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTFX_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t DTFSLKX_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFLKX_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DTCR_bits;
    };

    // SETC1R @ offset=0x0000003C
    union {
        __IO uint32_t SETC1R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETC1R_bits;
    };

    // RSTC1R @ offset=0x00000040
    union {
        __IO uint32_t RSTC1R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTC1R_bits;
    };

    // SETC2R @ offset=0x00000044
    union {
        __IO uint32_t SETC2R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETC2R_bits;
    };

    // RSTC2R @ offset=0x00000048
    union {
        __IO uint32_t RSTC2R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTC2R_bits;
    };

    // EEFCR1 @ offset=0x0000004C
    union {
        __IO uint32_t EEFCR1_reg;

        // bit fields
        struct {
            __IO uint32_t EE1LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE2LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE3LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE4LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE5LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFCR1_bits;
    };

    // EEFCR2 @ offset=0x00000050
    union {
        __IO uint32_t EEFCR2_reg;

        // bit fields
        struct {
            __IO uint32_t EE6LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFCR2_bits;
    };

    // RSTCR @ offset=0x00000054
    union {
        __IO uint32_t RSTCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } RSTCR_bits;
    };

    // CHPCR @ offset=0x00000058
    union {
        __IO uint32_t CHPCR_reg;

        // bit fields
        struct {
            __IO uint32_t CHPFRQ_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHPDTY_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRTPW_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CHPCR_bits;
    };

    // CPT1CCR @ offset=0x0000005C
    union {
        __IO uint32_t CPT1CCR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT1CCR_bits;
    };

    // CPT2CCR @ offset=0x00000060
    union {
        __IO uint32_t CPT2CCR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT2CCR_bits;
    };

    // OUTCR @ offset=0x00000064
    union {
        __IO uint32_t OUTCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t POL1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRT_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t POL2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } OUTCR_bits;
    };

    // FLTCR @ offset=0x00000068
    union {
        __IO uint32_t FLTCR_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 26;
            __IO uint32_t FLTLCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FLTCR_bits;
    };

} hrtim_timc_t;

// Peripheral HRTIM_TIMD @ base_addess=0x40017600
typedef struct hrtim_timd_t {

    // TIMDCR @ offset=0x00000000
    union {
        __IO uint32_t TIMDCR_reg;

        // bit fields
        struct {
            __IO uint32_t CK_PSCX_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RETRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HALF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSHPLL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SYNCRSTX_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCSTRTX_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXREPU_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXRSTU_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TBU_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCU_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDU_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEU_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTU_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DACSYNC_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PREEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDGAT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMDCR_bits;
    };

    // TIMDISR @ offset=0x00000004
    union {
        __IO uint32_t TIMDISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DLYPRT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CPPSTAT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IPPSTAT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O1STAT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O2STAT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 12;
        } TIMDISR_bits;
    };

    // TIMDICR @ offset=0x00000008
    union {
        __IO uint32_t TIMDICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t REPC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT1C_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT2C_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET1XC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX1C_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET2XC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX2C_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTC_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DLYPRTC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 17;
        } TIMDICR_bits;
    };

    // TIMDDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t TIMDDIER5_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1IE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2IE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2IE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CMP1DE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2DE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3DE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4DE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPDE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t UPDDE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1DE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2DE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XDE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1DE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2DE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2DE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTDE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } TIMDDIER5_bits;
    };

    // CNTDR @ offset=0x00000010
    __IO uint32_t CNTDR_reg;

    // PERDR @ offset=0x00000014
    __IO uint32_t PERDR_reg;

    // REPDR @ offset=0x00000018
    __IO uint32_t REPDR_reg;

    // CMP1DR @ offset=0x0000001C
    __IO uint32_t CMP1DR_reg;

    // CMP1CDR @ offset=0x00000020
    union {
        __IO uint32_t CMP1CDR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1X_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPX_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } CMP1CDR_bits;
    };

    // CMP2DR @ offset=0x00000024
    __IO uint32_t CMP2DR_reg;

    // CMP3DR @ offset=0x00000028
    __IO uint32_t CMP3DR_reg;

    // CMP4DR @ offset=0x0000002C
    __IO uint32_t CMP4DR_reg;

    // CPT1DR @ offset=0x00000030
    __IO uint32_t CPT1DR_reg;

    // CPT2DR @ offset=0x00000034
    __IO uint32_t CPT2DR_reg;

    // DTDR @ offset=0x00000038
    union {
        __IO uint32_t DTDR_reg;

        // bit fields
        struct {
            __IO uint32_t DTRX_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTRX_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTPRSC_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DTRSLKX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTRLKX_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFX_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTFX_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t DTFSLKX_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFLKX_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DTDR_bits;
    };

    // SETD1R @ offset=0x0000003C
    union {
        __IO uint32_t SETD1R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETD1R_bits;
    };

    // RSTD1R @ offset=0x00000040
    union {
        __IO uint32_t RSTD1R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTD1R_bits;
    };

    // SETD2R @ offset=0x00000044
    union {
        __IO uint32_t SETD2R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETD2R_bits;
    };

    // RSTD2R @ offset=0x00000048
    union {
        __IO uint32_t RSTD2R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTD2R_bits;
    };

    // EEFDR1 @ offset=0x0000004C
    union {
        __IO uint32_t EEFDR1_reg;

        // bit fields
        struct {
            __IO uint32_t EE1LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE2LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE3LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE4LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE5LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFDR1_bits;
    };

    // EEFDR2 @ offset=0x00000050
    union {
        __IO uint32_t EEFDR2_reg;

        // bit fields
        struct {
            __IO uint32_t EE6LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFDR2_bits;
    };

    // RSTDR @ offset=0x00000054
    union {
        __IO uint32_t RSTDR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMECMP4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } RSTDR_bits;
    };

    // CHPDR @ offset=0x00000058
    union {
        __IO uint32_t CHPDR_reg;

        // bit fields
        struct {
            __IO uint32_t CHPFRQ_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHPDTY_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRTPW_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CHPDR_bits;
    };

    // CPT1DCR @ offset=0x0000005C
    union {
        __IO uint32_t CPT1DCR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT1DCR_bits;
    };

    // CPT2DCR @ offset=0x00000060
    union {
        __IO uint32_t CPT2DCR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TE1SET_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE1RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP1_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TECMP2_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CPT2DCR_bits;
    };

    // OUTDR @ offset=0x00000064
    union {
        __IO uint32_t OUTDR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t POL1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRT_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t POL2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } OUTDR_bits;
    };

    // FLTDR @ offset=0x00000068
    union {
        __IO uint32_t FLTDR_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 26;
            __IO uint32_t FLTLCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FLTDR_bits;
    };

} hrtim_timd_t;

// Peripheral HRTIM_TIME @ base_addess=0x40017680
typedef struct hrtim_time_t {

    // TIMECR @ offset=0x00000000
    union {
        __IO uint32_t TIMECR_reg;

        // bit fields
        struct {
            __IO uint32_t CK_PSCX_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t CONT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RETRIG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HALF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSHPLL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SYNCRSTX_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCSTRTX_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP2_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DELCMP4_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXREPU_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXRSTU_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TBU_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCU_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDU_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEU_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTU_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DACSYNC_bit : 2; // bit offset=25  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PREEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDGAT_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMECR_bits;
    };

    // TIMEISR @ offset=0x00000004
    union {
        __IO uint32_t TIMEISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPT2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX1_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SETX2_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSTX2_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DLYPRT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CPPSTAT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IPPSTAT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O1STAT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t O2STAT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 12;
        } TIMEISR_bits;
    };

    // TIMEICR @ offset=0x00000008
    union {
        __IO uint32_t TIMEICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1C_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP2C_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP3C_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMP4C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t REPC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT1C_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CPT2C_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET1XC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX1C_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SET2XC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTX2C_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RSTC_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DLYPRTC_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 17;
        } TIMEICR_bits;
    };

    // TIMEDIER5 @ offset=0x0000000C
    union {
        __IO uint32_t TIMEDIER5_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1IE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1IE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2IE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1IE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2IE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2IE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CMP1DE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2DE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3DE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4DE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPDE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t UPDDE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT1DE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPT2DE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SET1XDE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX1DE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SETX2DE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTX2DE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTDE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } TIMEDIER5_bits;
    };

    // CNTER @ offset=0x00000010
    __IO uint32_t CNTER_reg;

    // PERER @ offset=0x00000014
    __IO uint32_t PERER_reg;

    // REPER @ offset=0x00000018
    __IO uint32_t REPER_reg;

    // CMP1ER @ offset=0x0000001C
    __IO uint32_t CMP1ER_reg;

    // CMP1CER @ offset=0x00000020
    union {
        __IO uint32_t CMP1CER_reg;

        // bit fields
        struct {
            __IO uint32_t CMP1X_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t REPX_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } CMP1CER_bits;
    };

    // CMP2ER @ offset=0x00000024
    __IO uint32_t CMP2ER_reg;

    // CMP3ER @ offset=0x00000028
    __IO uint32_t CMP3ER_reg;

    // CMP4ER @ offset=0x0000002C
    __IO uint32_t CMP4ER_reg;

    // CPT1ER @ offset=0x00000030
    __IO uint32_t CPT1ER_reg;

    // CPT2ER @ offset=0x00000034
    __IO uint32_t CPT2ER_reg;

    // DTER @ offset=0x00000038
    union {
        __IO uint32_t DTER_reg;

        // bit fields
        struct {
            __IO uint32_t DTRX_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTRX_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTPRSC_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DTRSLKX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTRLKX_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFX_bit : 9; // bit offset=16  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDTFX_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t DTFSLKX_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTFLKX_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } DTER_bits;
    };

    // SETE1R @ offset=0x0000003C
    union {
        __IO uint32_t SETE1R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETE1R_bits;
    };

    // RSTE1R @ offset=0x00000040
    union {
        __IO uint32_t RSTE1R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTE1R_bits;
    };

    // SETE2R @ offset=0x00000044
    union {
        __IO uint32_t SETE2R_reg;

        // bit fields
        struct {
            __IO uint32_t SST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } SETE2R_bits;
    };

    // RSTE2R @ offset=0x00000048
    union {
        __IO uint32_t RSTE2R_reg;

        // bit fields
        struct {
            __IO uint32_t SRT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESYNC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PER_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP3_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT1_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT2_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT3_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT4_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT6_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT7_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT8_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEVNT9_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPDATE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RSTE2R_bits;
    };

    // EEFER1 @ offset=0x0000004C
    union {
        __IO uint32_t EEFER1_reg;

        // bit fields
        struct {
            __IO uint32_t EE1LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE1FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE2LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE2FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE3LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE3FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE4LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE4FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE5LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE5FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFER1_bits;
    };

    // EEFER2 @ offset=0x00000050
    union {
        __IO uint32_t EEFER2_reg;

        // bit fields
        struct {
            __IO uint32_t EE6LTCH_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE6FLTR_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t EE7LTCH_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE7FLTR_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t EE8LTCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE8FLTR_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t EE9LTCH_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE9FLTR_bit : 4; // bit offset=19  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t EE10LTCH_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EE10FLTR_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } EEFER2_bits;
    };

    // RSTER @ offset=0x00000054
    union {
        __IO uint32_t RSTER_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UPDT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMP4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTPER_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP1_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP2_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP3_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSTCMP4_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT1_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT4_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT5_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT6_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT7_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT9_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTEVNT10_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP1_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP2_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMACMP4_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMBCMP4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP1_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP2_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMCCMP4_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP2_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMDCMP4_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } RSTER_bits;
    };

    // CHPER @ offset=0x00000058
    union {
        __IO uint32_t CHPER_reg;

        // bit fields
        struct {
            __IO uint32_t CHPFRQ_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHPDTY_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t STRTPW_bit : 4; // bit offset=7  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CHPER_bits;
    };

    // CPT1ECR @ offset=0x0000005C
    union {
        __IO uint32_t CPT1ECR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 4;
        } CPT1ECR_bits;
    };

    // CPT2ECR @ offset=0x00000060
    union {
        __IO uint32_t CPT2ECR_reg;

        // bit fields
        struct {
            __IO uint32_t SWCPT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDPCPT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV1CPT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV2CPT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV3CPT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV4CPT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV5CPT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV6CPT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV7CPT_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV8CPT_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV9CPT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXEV10CPT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1SET_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TA1RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP1_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TACMP2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1SET_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TB1RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP1_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TBCMP2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1SET_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TC1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCCMP2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1SET_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TD1RST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP1_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDCMP2_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 4;
        } CPT2ECR_bits;
    };

    // OUTER @ offset=0x00000064
    union {
        __IO uint32_t OUTER_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t POL1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT1_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP1_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRTEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DLYPRT_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t POL2_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEM2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLES2_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FAULT2_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHP2_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIDL2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 8;
        } OUTER_bits;
    };

    // FLTER @ offset=0x00000068
    union {
        __IO uint32_t FLTER_reg;

        // bit fields
        struct {
            __IO uint32_t FLT1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT3EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT4EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLT5EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 26;
            __IO uint32_t FLTLCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } FLTER_bits;
    };

} hrtim_time_t;

// Peripheral HSEM @ base_addess=0x58026400
typedef struct hsem_t {

    // HSEM_R0 @ offset=0x00000000
    union {
        __IO uint32_t HSEM_R0_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R0_bits;
    };

    // HSEM_R1 @ offset=0x00000004
    union {
        __IO uint32_t HSEM_R1_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R1_bits;
    };

    // HSEM_R2 @ offset=0x00000008
    union {
        __IO uint32_t HSEM_R2_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R2_bits;
    };

    // HSEM_R3 @ offset=0x0000000C
    union {
        __IO uint32_t HSEM_R3_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R3_bits;
    };

    // HSEM_R4 @ offset=0x00000010
    union {
        __IO uint32_t HSEM_R4_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R4_bits;
    };

    // HSEM_R5 @ offset=0x00000014
    union {
        __IO uint32_t HSEM_R5_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R5_bits;
    };

    // HSEM_R6 @ offset=0x00000018
    union {
        __IO uint32_t HSEM_R6_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R6_bits;
    };

    // HSEM_R7 @ offset=0x0000001C
    union {
        __IO uint32_t HSEM_R7_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R7_bits;
    };

    // HSEM_R8 @ offset=0x00000020
    union {
        __IO uint32_t HSEM_R8_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R8_bits;
    };

    // HSEM_R9 @ offset=0x00000024
    union {
        __IO uint32_t HSEM_R9_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R9_bits;
    };

    // HSEM_R10 @ offset=0x00000028
    union {
        __IO uint32_t HSEM_R10_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R10_bits;
    };

    // HSEM_R11 @ offset=0x0000002C
    union {
        __IO uint32_t HSEM_R11_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R11_bits;
    };

    // HSEM_R12 @ offset=0x00000030
    union {
        __IO uint32_t HSEM_R12_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R12_bits;
    };

    // HSEM_R13 @ offset=0x00000034
    union {
        __IO uint32_t HSEM_R13_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R13_bits;
    };

    // HSEM_R14 @ offset=0x00000038
    union {
        __IO uint32_t HSEM_R14_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R14_bits;
    };

    // HSEM_R15 @ offset=0x0000003C
    union {
        __IO uint32_t HSEM_R15_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R15_bits;
    };

    // HSEM_R16 @ offset=0x00000040
    union {
        __IO uint32_t HSEM_R16_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R16_bits;
    };

    // HSEM_R17 @ offset=0x00000044
    union {
        __IO uint32_t HSEM_R17_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R17_bits;
    };

    // HSEM_R18 @ offset=0x00000048
    union {
        __IO uint32_t HSEM_R18_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R18_bits;
    };

    // HSEM_R19 @ offset=0x0000004C
    union {
        __IO uint32_t HSEM_R19_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R19_bits;
    };

    // HSEM_R20 @ offset=0x00000050
    union {
        __IO uint32_t HSEM_R20_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R20_bits;
    };

    // HSEM_R21 @ offset=0x00000054
    union {
        __IO uint32_t HSEM_R21_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R21_bits;
    };

    // HSEM_R22 @ offset=0x00000058
    union {
        __IO uint32_t HSEM_R22_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R22_bits;
    };

    // HSEM_R23 @ offset=0x0000005C
    union {
        __IO uint32_t HSEM_R23_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R23_bits;
    };

    // HSEM_R24 @ offset=0x00000060
    union {
        __IO uint32_t HSEM_R24_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R24_bits;
    };

    // HSEM_R25 @ offset=0x00000064
    union {
        __IO uint32_t HSEM_R25_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R25_bits;
    };

    // HSEM_R26 @ offset=0x00000068
    union {
        __IO uint32_t HSEM_R26_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R26_bits;
    };

    // HSEM_R27 @ offset=0x0000006C
    union {
        __IO uint32_t HSEM_R27_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R27_bits;
    };

    // HSEM_R28 @ offset=0x00000070
    union {
        __IO uint32_t HSEM_R28_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R28_bits;
    };

    // HSEM_R29 @ offset=0x00000074
    union {
        __IO uint32_t HSEM_R29_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R29_bits;
    };

    // HSEM_R30 @ offset=0x00000078
    union {
        __IO uint32_t HSEM_R30_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R30_bits;
    };

    // HSEM_R31 @ offset=0x0000007C
    union {
        __IO uint32_t HSEM_R31_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_R31_bits;
    };

    // HSEM_RLR0 @ offset=0x00000080
    union {
        __IO uint32_t HSEM_RLR0_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR0_bits;
    };

    // HSEM_RLR1 @ offset=0x00000084
    union {
        __IO uint32_t HSEM_RLR1_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR1_bits;
    };

    // HSEM_RLR2 @ offset=0x00000088
    union {
        __IO uint32_t HSEM_RLR2_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR2_bits;
    };

    // HSEM_RLR3 @ offset=0x0000008C
    union {
        __IO uint32_t HSEM_RLR3_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR3_bits;
    };

    // HSEM_RLR4 @ offset=0x00000090
    union {
        __IO uint32_t HSEM_RLR4_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR4_bits;
    };

    // HSEM_RLR5 @ offset=0x00000094
    union {
        __IO uint32_t HSEM_RLR5_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR5_bits;
    };

    // HSEM_RLR6 @ offset=0x00000098
    union {
        __IO uint32_t HSEM_RLR6_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR6_bits;
    };

    // HSEM_RLR7 @ offset=0x0000009C
    union {
        __IO uint32_t HSEM_RLR7_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR7_bits;
    };

    // HSEM_RLR8 @ offset=0x000000A0
    union {
        __IO uint32_t HSEM_RLR8_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR8_bits;
    };

    // HSEM_RLR9 @ offset=0x000000A4
    union {
        __IO uint32_t HSEM_RLR9_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR9_bits;
    };

    // HSEM_RLR10 @ offset=0x000000A8
    union {
        __IO uint32_t HSEM_RLR10_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR10_bits;
    };

    // HSEM_RLR11 @ offset=0x000000AC
    union {
        __IO uint32_t HSEM_RLR11_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR11_bits;
    };

    // HSEM_RLR12 @ offset=0x000000B0
    union {
        __IO uint32_t HSEM_RLR12_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR12_bits;
    };

    // HSEM_RLR13 @ offset=0x000000B4
    union {
        __IO uint32_t HSEM_RLR13_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR13_bits;
    };

    // HSEM_RLR14 @ offset=0x000000B8
    union {
        __IO uint32_t HSEM_RLR14_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR14_bits;
    };

    // HSEM_RLR15 @ offset=0x000000BC
    union {
        __IO uint32_t HSEM_RLR15_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR15_bits;
    };

    // HSEM_RLR16 @ offset=0x000000C0
    union {
        __IO uint32_t HSEM_RLR16_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR16_bits;
    };

    // HSEM_RLR17 @ offset=0x000000C4
    union {
        __IO uint32_t HSEM_RLR17_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR17_bits;
    };

    // HSEM_RLR18 @ offset=0x000000C8
    union {
        __IO uint32_t HSEM_RLR18_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR18_bits;
    };

    // HSEM_RLR19 @ offset=0x000000CC
    union {
        __IO uint32_t HSEM_RLR19_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR19_bits;
    };

    // HSEM_RLR20 @ offset=0x000000D0
    union {
        __IO uint32_t HSEM_RLR20_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR20_bits;
    };

    // HSEM_RLR21 @ offset=0x000000D4
    union {
        __IO uint32_t HSEM_RLR21_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR21_bits;
    };

    // HSEM_RLR22 @ offset=0x000000D8
    union {
        __IO uint32_t HSEM_RLR22_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR22_bits;
    };

    // HSEM_RLR23 @ offset=0x000000DC
    union {
        __IO uint32_t HSEM_RLR23_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR23_bits;
    };

    // HSEM_RLR24 @ offset=0x000000E0
    union {
        __IO uint32_t HSEM_RLR24_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR24_bits;
    };

    // HSEM_RLR25 @ offset=0x000000E4
    union {
        __IO uint32_t HSEM_RLR25_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR25_bits;
    };

    // HSEM_RLR26 @ offset=0x000000E8
    union {
        __IO uint32_t HSEM_RLR26_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR26_bits;
    };

    // HSEM_RLR27 @ offset=0x000000EC
    union {
        __IO uint32_t HSEM_RLR27_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR27_bits;
    };

    // HSEM_RLR28 @ offset=0x000000F0
    union {
        __IO uint32_t HSEM_RLR28_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR28_bits;
    };

    // HSEM_RLR29 @ offset=0x000000F4
    union {
        __IO uint32_t HSEM_RLR29_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR29_bits;
    };

    // HSEM_RLR30 @ offset=0x000000F8
    union {
        __IO uint32_t HSEM_RLR30_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR30_bits;
    };

    // HSEM_RLR31 @ offset=0x000000FC
    union {
        __IO uint32_t HSEM_RLR31_reg;

        // bit fields
        struct {
            __IO uint32_t PROCID_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t LOCK_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_RLR31_bits;
    };

    // HSEM_IER @ offset=0x00000100
    union {
        __IO uint32_t HSEM_IER_reg;

        // bit fields
        struct {
            __IO uint32_t ISEM0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISEM31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } HSEM_IER_bits;
    };

    // HSEM_ICR @ offset=0x00000104
    union {
        __IO uint32_t HSEM_ICR_reg;

        // bit fields
        struct {
            __IO uint32_t ISEM0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_ICR_bits;
    };

    // HSEM_ISR @ offset=0x00000108
    union {
        __IO uint32_t HSEM_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t ISEM0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_ISR_bits;
    };

    // HSEM_MISR @ offset=0x0000010C
    union {
        __IO uint32_t HSEM_MISR_reg;

        // bit fields
        struct {
            __IO uint32_t ISEM0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM16_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM17_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM18_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM19_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM20_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM21_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM22_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM23_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM24_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM25_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM26_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM27_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM28_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM29_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM30_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ISEM31_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } HSEM_MISR_bits;
    };

    __IO uint8_t RESERVED0[48];

    // HSEM_CR @ offset=0x00000140
    union {
        __IO uint32_t HSEM_CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t MASTERID_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t KEY_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } HSEM_CR_bits;
    };

    // HSEM_KEYR @ offset=0x00000144
    __IO uint32_t HSEM_KEYR_reg;

} hsem_t;

// Peripheral I2C1 @ base_addess=0x40005400
typedef struct i2c1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERRIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DNF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFOFF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NOSTRETCH_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBHEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBDEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALERTEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SADD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RD_WRN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEAD10R_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBYTES_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RELOAD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTOEND_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECBYTE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 5;
        } CR2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t OAR1_reg;

        // bit fields
        struct {
            __IO uint32_t OA1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA1MODE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t OA1EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } OAR1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t OAR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t OA2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA2MSK_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t OA2EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 16;
        } OAR2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t TIMINGR_reg;

        // bit fields
        struct {
            __IO uint32_t SCLL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDADEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLDEL_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PRESC_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMINGR_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t TIMEOUTR_reg;

        // bit fields
        struct {
            __IO uint32_t TIMEOUTA_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIDLE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TIMOUTEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEOUTB_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TEXTEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } TIMEOUTR_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TXE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NACKF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t STOPF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARLO_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PECERR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIMEOUT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ALERT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BUSY_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DIR_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDCODE_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 8;
        } ISR_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADDRCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NACKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t STOPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t BERRCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARLOCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRCF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t PECCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIMOUTCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ALERTCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 18;
        } ICR_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t PECR_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t RXDR_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t TXDR_reg;

} i2c1_t;

// Peripheral I2C2 @ base_addess=0x40005800
typedef struct i2c2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERRIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DNF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFOFF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NOSTRETCH_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBHEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBDEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALERTEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SADD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RD_WRN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEAD10R_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBYTES_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RELOAD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTOEND_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECBYTE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 5;
        } CR2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t OAR1_reg;

        // bit fields
        struct {
            __IO uint32_t OA1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA1MODE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t OA1EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } OAR1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t OAR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t OA2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA2MSK_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t OA2EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 16;
        } OAR2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t TIMINGR_reg;

        // bit fields
        struct {
            __IO uint32_t SCLL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDADEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLDEL_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PRESC_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMINGR_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t TIMEOUTR_reg;

        // bit fields
        struct {
            __IO uint32_t TIMEOUTA_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIDLE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TIMOUTEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEOUTB_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TEXTEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } TIMEOUTR_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TXE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NACKF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t STOPF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARLO_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PECERR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIMEOUT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ALERT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BUSY_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DIR_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDCODE_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 8;
        } ISR_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADDRCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NACKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t STOPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t BERRCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARLOCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRCF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t PECCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIMOUTCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ALERTCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 18;
        } ICR_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t PECR_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t RXDR_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t TXDR_reg;

} i2c2_t;

// Peripheral I2C3 @ base_addess=0x40005C00
typedef struct i2c3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERRIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DNF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFOFF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NOSTRETCH_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBHEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBDEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALERTEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SADD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RD_WRN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEAD10R_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBYTES_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RELOAD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTOEND_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECBYTE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 5;
        } CR2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t OAR1_reg;

        // bit fields
        struct {
            __IO uint32_t OA1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA1MODE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t OA1EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } OAR1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t OAR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t OA2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA2MSK_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t OA2EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 16;
        } OAR2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t TIMINGR_reg;

        // bit fields
        struct {
            __IO uint32_t SCLL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDADEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLDEL_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PRESC_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMINGR_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t TIMEOUTR_reg;

        // bit fields
        struct {
            __IO uint32_t TIMEOUTA_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIDLE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TIMOUTEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEOUTB_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TEXTEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } TIMEOUTR_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TXE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NACKF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t STOPF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARLO_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PECERR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIMEOUT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ALERT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BUSY_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DIR_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDCODE_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 8;
        } ISR_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADDRCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NACKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t STOPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t BERRCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARLOCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRCF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t PECCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIMOUTCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ALERTCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 18;
        } ICR_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t PECR_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t RXDR_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t TXDR_reg;

} i2c3_t;

// Peripheral I2C4 @ base_addess=0x58001C00
typedef struct i2c4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ERRIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DNF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ANFOFF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBC_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NOSTRETCH_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBHEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMBDEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALERTEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SADD0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SADD9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RD_WRN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD10_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEAD10R_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t START_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBYTES_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RELOAD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AUTOEND_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PECBYTE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 5;
        } CR2_bits;
    };

    // OAR1 @ offset=0x00000008
    union {
        __IO uint32_t OAR1_reg;

        // bit fields
        struct {
            __IO uint32_t OA1_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA1MODE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t OA1EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } OAR1_bits;
    };

    // OAR2 @ offset=0x0000000C
    union {
        __IO uint32_t OAR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t OA2_bit : 7; // bit offset=1  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t OA2MSK_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t OA2EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 16;
        } OAR2_bits;
    };

    // TIMINGR @ offset=0x00000010
    union {
        __IO uint32_t TIMINGR_reg;

        // bit fields
        struct {
            __IO uint32_t SCLL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLH_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDADEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCLDEL_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PRESC_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } TIMINGR_bits;
    };

    // TIMEOUTR @ offset=0x00000014
    union {
        __IO uint32_t TIMEOUTR_reg;

        // bit fields
        struct {
            __IO uint32_t TIMEOUTA_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIDLE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TIMOUTEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMEOUTB_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TEXTEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } TIMEOUTR_bits;
    };

    // ISR @ offset=0x00000018
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TXE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NACKF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t STOPF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARLO_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PECERR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIMEOUT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ALERT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BUSY_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DIR_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ADDCODE_bit : 7; // bit offset=17  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 8;
        } ISR_bits;
    };

    // ICR @ offset=0x0000001C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADDRCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NACKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t STOPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t BERRCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARLOCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRCF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t PECCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIMOUTCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ALERTCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 18;
        } ICR_bits;
    };

    // PECR @ offset=0x00000020
    __IO uint32_t PECR_reg;

    // RXDR @ offset=0x00000024
    __IO uint32_t RXDR_reg;

    // TXDR @ offset=0x00000028
    __IO uint32_t TXDR_reg;

} i2c4_t;

// Peripheral IWDG @ base_addess=0x58004800
typedef struct iwdg_t {

    // KR @ offset=0x00000000
    __IO uint32_t KR_reg;

    // PR @ offset=0x00000004
    __IO uint32_t PR_reg;

    // RLR @ offset=0x00000008
    __IO uint32_t RLR_reg;

    // SR @ offset=0x0000000C
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t PVU_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RVU_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WVU_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 29;
        } SR_bits;
    };

    // WINR @ offset=0x00000010
    __IO uint32_t WINR_reg;

} iwdg_t;

// Peripheral JPEG @ base_addess=0x52003000
typedef struct jpeg_t {

    // CONFR0 @ offset=0x00000000
    __IO uint32_t CONFR0_reg;

    // CONFR1 @ offset=0x00000004
    union {
        __IO uint32_t CONFR1_reg;

        // bit fields
        struct {
            __IO uint32_t NF_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COLORSPACE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NS_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t YSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CONFR1_bits;
    };

    // CONFR2 @ offset=0x00000008
    __IO uint32_t CONFR2_reg;

    // CONFR3 @ offset=0x0000000C
    __IO uint32_t CONFR3_reg;

    // CONFRN1 @ offset=0x00000010
    union {
        __IO uint32_t CONFRN1_reg;

        // bit fields
        struct {
            __IO uint32_t HD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HA_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QT_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NB_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSF_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } CONFRN1_bits;
    };

    // CONFRN2 @ offset=0x00000014
    union {
        __IO uint32_t CONFRN2_reg;

        // bit fields
        struct {
            __IO uint32_t HD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HA_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QT_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NB_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSF_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } CONFRN2_bits;
    };

    // CONFRN3 @ offset=0x00000018
    union {
        __IO uint32_t CONFRN3_reg;

        // bit fields
        struct {
            __IO uint32_t HD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HA_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QT_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NB_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSF_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } CONFRN3_bits;
    };

    // CONFRN4 @ offset=0x0000001C
    union {
        __IO uint32_t CONFRN4_reg;

        // bit fields
        struct {
            __IO uint32_t HD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HA_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t QT_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NB_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSF_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } CONFRN4_bits;
    };

    __IO uint8_t RESERVED0[16];

    // CR @ offset=0x00000030
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t JCEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IFTIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IFNFIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFNEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HPDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t IDMAEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODMAEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IFF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OFF_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 17;
        } CR_bits;
    };

    // SR @ offset=0x00000034
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t IFTF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IFNFF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OFTF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OFNEF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HPDF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t COF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 24;
        } SR_bits;
    };

    // CFR @ offset=0x00000038
    union {
        __IO uint32_t CFR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t CEOCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHPDF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 25;
        } CFR_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DIR @ offset=0x00000040
    __IO uint32_t DIR_reg;

    // DOR @ offset=0x00000044
    __IO uint32_t DOR_reg;

} jpeg_t;

// Peripheral LPTIM1 @ base_addess=0x40002400
typedef struct lptim1_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARRM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXTTRIG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMPOK_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARROK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DOWN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ISR_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARRMCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EXTTRIGCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMPOKCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARROKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DOWNCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ICR_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARRMIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTTRIGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMPOKIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARROKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DOWNIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } IER_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t CKSEL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKFLT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TRGFLT_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PRESC_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TRIGSEL_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t TRIGEN_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMOUT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVPOL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRELOAD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTMODE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 7;
        } CFGR_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ENABLE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNGSTRT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTSTRT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTRST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTARE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } CR_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t CMP_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t ARR_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t CNT_reg;

    __IO uint8_t RESERVED0[4];

    // CFGR2 @ offset=0x00000024
    union {
        __IO uint32_t CFGR2_reg;

        // bit fields
        struct {
            __IO uint32_t IN1SEL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t IN2SEL_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } CFGR2_bits;
    };

} lptim1_t;

// Peripheral LPTIM2 @ base_addess=0x58002400
typedef struct lptim2_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARRM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXTTRIG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMPOK_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARROK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DOWN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ISR_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARRMCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EXTTRIGCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMPOKCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARROKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DOWNCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ICR_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARRMIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTTRIGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMPOKIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARROKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DOWNIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } IER_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t CKSEL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKFLT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TRGFLT_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PRESC_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TRIGSEL_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t TRIGEN_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMOUT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVPOL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRELOAD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTMODE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 7;
        } CFGR_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ENABLE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNGSTRT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTSTRT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTRST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTARE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } CR_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t CMP_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t ARR_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t CNT_reg;

    __IO uint8_t RESERVED0[4];

    // CFGR2 @ offset=0x00000024
    union {
        __IO uint32_t CFGR2_reg;

        // bit fields
        struct {
            __IO uint32_t IN1SEL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t IN2SEL_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } CFGR2_bits;
    };

} lptim2_t;

// Peripheral LPTIM3 @ base_addess=0x58002800
typedef struct lptim3_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARRM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXTTRIG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMPOK_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARROK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DOWN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ISR_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARRMCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EXTTRIGCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMPOKCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARROKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DOWNCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ICR_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARRMIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTTRIGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMPOKIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARROKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DOWNIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } IER_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t CKSEL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKFLT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TRGFLT_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PRESC_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TRIGSEL_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t TRIGEN_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMOUT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVPOL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRELOAD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTMODE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 7;
        } CFGR_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ENABLE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNGSTRT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTSTRT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTRST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTARE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } CR_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t CMP_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t ARR_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t CNT_reg;

    __IO uint8_t RESERVED0[4];

    // CFGR2 @ offset=0x00000024
    __IO uint32_t CFGR2_reg;

} lptim3_t;

// Peripheral LPTIM4 @ base_addess=0x58002C00
typedef struct lptim4_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARRM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXTTRIG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMPOK_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARROK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DOWN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ISR_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARRMCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EXTTRIGCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMPOKCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARROKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DOWNCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ICR_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARRMIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTTRIGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMPOKIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARROKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DOWNIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } IER_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t CKSEL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKFLT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TRGFLT_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PRESC_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TRIGSEL_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t TRIGEN_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMOUT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVPOL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRELOAD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTMODE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 7;
        } CFGR_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ENABLE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNGSTRT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTSTRT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTRST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTARE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } CR_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t CMP_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t ARR_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t CNT_reg;

    __IO uint8_t RESERVED0[4];

    // CFGR2 @ offset=0x00000024
    __IO uint32_t CFGR2_reg;

} lptim4_t;

// Peripheral LPTIM5 @ base_addess=0x58003000
typedef struct lptim5_t {

    // ISR @ offset=0x00000000
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARRM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EXTTRIG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMPOK_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ARROK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DOWN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ISR_bits;
    };

    // ICR @ offset=0x00000004
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARRMCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EXTTRIGCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMPOKCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ARROKCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UPCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t DOWNCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 25;
        } ICR_bits;
    };

    // IER @ offset=0x00000008
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t CMPMIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARRMIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTTRIGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMPOKIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARROKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UPIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DOWNIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } IER_bits;
    };

    // CFGR @ offset=0x0000000C
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t CKSEL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKFLT_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TRGFLT_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t PRESC_bit : 3; // bit offset=9  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TRIGSEL_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t TRIGEN_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMOUT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAVPOL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRELOAD_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTMODE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 7;
        } CFGR_bits;
    };

    // CR @ offset=0x00000010
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t ENABLE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNGSTRT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNTSTRT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COUNTRST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTARE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } CR_bits;
    };

    // CMP @ offset=0x00000014
    __IO uint32_t CMP_reg;

    // ARR @ offset=0x00000018
    __IO uint32_t ARR_reg;

    // CNT @ offset=0x0000001C
    __IO uint32_t CNT_reg;

    __IO uint8_t RESERVED0[4];

    // CFGR2 @ offset=0x00000024
    __IO uint32_t CFGR2_reg;

} lptim5_t;

// Peripheral LPUART1 @ base_addess=0x58000C00
typedef struct lpuart1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DEDT_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT_bit : 5; // bit offset=21  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 4;
            __IO uint32_t ADD_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 4;
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    __IO uint32_t BRR_reg;

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED4 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} lpuart1_t;

// Peripheral LTDC @ base_addess=0x50001000
typedef struct ltdc_t {

    __IO uint8_t RESERVED0[8];

    // SSCR @ offset=0x00000008
    union {
        __IO uint32_t SSCR_reg;

        // bit fields
        struct {
            __IO uint32_t VSH_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t HSW_bit : 10; // bit offset=16  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 6;
        } SSCR_bits;
    };

    // BPCR @ offset=0x0000000C
    union {
        __IO uint32_t BPCR_reg;

        // bit fields
        struct {
            __IO uint32_t AVBP_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t AHBP_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } BPCR_bits;
    };

    // AWCR @ offset=0x00000010
    union {
        __IO uint32_t AWCR_reg;

        // bit fields
        struct {
            __IO uint32_t AAH_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t AAV_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } AWCR_bits;
    };

    // TWCR @ offset=0x00000014
    union {
        __IO uint32_t TWCR_reg;

        // bit fields
        struct {
            __IO uint32_t TOTALH_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t TOTALW_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } TWCR_bits;
    };

    // GCR @ offset=0x00000018
    union {
        __IO uint32_t GCR_reg;

        // bit fields
        struct {
            __IO uint32_t LTDCEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBW_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DGW_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DRW_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 11;
            __IO uint32_t PCPOL_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEPOL_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSPOL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSPOL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } GCR_bits;
    };

    __IO uint8_t RESERVED1[8];

    // SRCR @ offset=0x00000024
    union {
        __IO uint32_t SRCR_reg;

        // bit fields
        struct {
            __IO uint32_t IMR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBR_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } SRCR_bits;
    };

    __IO uint8_t RESERVED2[4];

    // BCCR @ offset=0x0000002C
    union {
        __IO uint32_t BCCR_reg;

        // bit fields
        struct {
            __IO uint32_t BCBLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BCGREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t BCRED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } BCCR_bits;
    };

    __IO uint8_t RESERVED3[4];

    // IER @ offset=0x00000034
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t LIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FUIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TERRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } IER_bits;
    };

    // ISR @ offset=0x00000038
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t LIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FUIF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TERRIF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RRIF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 28;
        } ISR_bits;
    };

    // ICR @ offset=0x0000003C
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CLIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CFUIF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTERRIF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRRIF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 28;
        } ICR_bits;
    };

    // LIPCR @ offset=0x00000040
    __IO uint32_t LIPCR_reg;

    // CPSR @ offset=0x00000044
    union {
        __IO uint32_t CPSR_reg;

        // bit fields
        struct {
            __IO uint32_t CYPOS_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t CXPOS_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CPSR_bits;
    };

    // CDSR @ offset=0x00000048
    union {
        __IO uint32_t CDSR_reg;

        // bit fields
        struct {
            __IO uint32_t VDES_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HDES_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VSYNCS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HSYNCS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 28;
        } CDSR_bits;
    };

    __IO uint8_t RESERVED4[56];

    // L1CR @ offset=0x00000084
    union {
        __IO uint32_t L1CR_reg;

        // bit fields
        struct {
            __IO uint32_t LEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COLKEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CLUTEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 27;
        } L1CR_bits;
    };

    // L1WHPCR @ offset=0x00000088
    union {
        __IO uint32_t L1WHPCR_reg;

        // bit fields
        struct {
            __IO uint32_t WHSTPOS_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t WHSPPOS_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } L1WHPCR_bits;
    };

    // L1WVPCR @ offset=0x0000008C
    union {
        __IO uint32_t L1WVPCR_reg;

        // bit fields
        struct {
            __IO uint32_t WVSTPOS_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t WVSPPOS_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } L1WVPCR_bits;
    };

    // L1CKCR @ offset=0x00000090
    union {
        __IO uint32_t L1CKCR_reg;

        // bit fields
        struct {
            __IO uint32_t CKBLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKGREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKRED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } L1CKCR_bits;
    };

    // L1PFCR @ offset=0x00000094
    __IO uint32_t L1PFCR_reg;

    // L1CACR @ offset=0x00000098
    __IO uint32_t L1CACR_reg;

    // L1DCCR @ offset=0x0000009C
    union {
        __IO uint32_t L1DCCR_reg;

        // bit fields
        struct {
            __IO uint32_t DCBLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCGREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCALPHA_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } L1DCCR_bits;
    };

    // L1BFCR @ offset=0x000000A0
    union {
        __IO uint32_t L1BFCR_reg;

        // bit fields
        struct {
            __IO uint32_t BF2_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BF1_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 21;
        } L1BFCR_bits;
    };

    __IO uint8_t RESERVED5[8];

    // L1CFBAR @ offset=0x000000AC
    __IO uint32_t L1CFBAR_reg;

    // L1CFBLR @ offset=0x000000B0
    union {
        __IO uint32_t L1CFBLR_reg;

        // bit fields
        struct {
            __IO uint32_t CFBLL_bit : 13; // bit offset=0  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CFBP_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 3;
        } L1CFBLR_bits;
    };

    // L1CFBLNR @ offset=0x000000B4
    __IO uint32_t L1CFBLNR_reg;

    __IO uint8_t RESERVED6[12];

    // L1CLUTWR @ offset=0x000000C4
    union {
        __IO uint32_t L1CLUTWR_reg;

        // bit fields
        struct {
            __IO uint32_t BLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t GREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLUTADD_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.WRITE_ONLY
        } L1CLUTWR_bits;
    };

    __IO uint8_t RESERVED7[60];

    // L2CR @ offset=0x00000104
    union {
        __IO uint32_t L2CR_reg;

        // bit fields
        struct {
            __IO uint32_t LEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COLKEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CLUTEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 27;
        } L2CR_bits;
    };

    // L2WHPCR @ offset=0x00000108
    union {
        __IO uint32_t L2WHPCR_reg;

        // bit fields
        struct {
            __IO uint32_t WHSTPOS_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t WHSPPOS_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } L2WHPCR_bits;
    };

    // L2WVPCR @ offset=0x0000010C
    union {
        __IO uint32_t L2WVPCR_reg;

        // bit fields
        struct {
            __IO uint32_t WVSTPOS_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t WVSPPOS_bit : 11; // bit offset=16  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 5;
        } L2WVPCR_bits;
    };

    // L2CKCR @ offset=0x00000110
    union {
        __IO uint32_t L2CKCR_reg;

        // bit fields
        struct {
            __IO uint32_t CKBLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKGREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKRED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 8;
        } L2CKCR_bits;
    };

    // L2PFCR @ offset=0x00000114
    __IO uint32_t L2PFCR_reg;

    // L2CACR @ offset=0x00000118
    __IO uint32_t L2CACR_reg;

    // L2DCCR @ offset=0x0000011C
    union {
        __IO uint32_t L2DCCR_reg;

        // bit fields
        struct {
            __IO uint32_t DCBLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCGREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCALPHA_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } L2DCCR_bits;
    };

    // L2BFCR @ offset=0x00000120
    union {
        __IO uint32_t L2BFCR_reg;

        // bit fields
        struct {
            __IO uint32_t BF2_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BF1_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 21;
        } L2BFCR_bits;
    };

    __IO uint8_t RESERVED8[8];

    // L2CFBAR @ offset=0x0000012C
    __IO uint32_t L2CFBAR_reg;

    // L2CFBLR @ offset=0x00000130
    union {
        __IO uint32_t L2CFBLR_reg;

        // bit fields
        struct {
            __IO uint32_t CFBLL_bit : 13; // bit offset=0  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CFBP_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 3;
        } L2CFBLR_bits;
    };

    // L2CFBLNR @ offset=0x00000134
    __IO uint32_t L2CFBLNR_reg;

    __IO uint8_t RESERVED9[12];

    // L2CLUTWR @ offset=0x00000144
    union {
        __IO uint32_t L2CLUTWR_reg;

        // bit fields
        struct {
            __IO uint32_t BLUE_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t GREEN_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RED_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLUTADD_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.WRITE_ONLY
        } L2CLUTWR_bits;
    };

} ltdc_t;

// Peripheral MDIOS @ base_addess=0x40009400
typedef struct mdios_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WRIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RDIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DPC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PORT_ADDRESS_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } CR_bits;
    };

    // WRFR @ offset=0x00000004
    __IO uint32_t WRFR_reg;

    // CWRFR @ offset=0x00000008
    __IO uint32_t CWRFR_reg;

    // RDFR @ offset=0x0000000C
    __IO uint32_t RDFR_reg;

    // CRDFR @ offset=0x00000010
    __IO uint32_t CRDFR_reg;

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t PERF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SERF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TERF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 29;
        } SR_bits;
    };

    // CLRFR @ offset=0x00000018
    union {
        __IO uint32_t CLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t CPERF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSERF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTERF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } CLRFR_bits;
    };

    // DINR0 @ offset=0x0000001C
    __IO uint32_t DINR0_reg;

    // DINR1 @ offset=0x00000020
    __IO uint32_t DINR1_reg;

    // DINR2 @ offset=0x00000024
    __IO uint32_t DINR2_reg;

    // DINR3 @ offset=0x00000028
    __IO uint32_t DINR3_reg;

    // DINR4 @ offset=0x0000002C
    __IO uint32_t DINR4_reg;

    // DINR5 @ offset=0x00000030
    __IO uint32_t DINR5_reg;

    // DINR6 @ offset=0x00000034
    __IO uint32_t DINR6_reg;

    // DINR7 @ offset=0x00000038
    __IO uint32_t DINR7_reg;

    // DINR8 @ offset=0x0000003C
    __IO uint32_t DINR8_reg;

    // DINR9 @ offset=0x00000040
    __IO uint32_t DINR9_reg;

    // DINR10 @ offset=0x00000044
    __IO uint32_t DINR10_reg;

    // DINR11 @ offset=0x00000048
    __IO uint32_t DINR11_reg;

    // DINR12 @ offset=0x0000004C
    __IO uint32_t DINR12_reg;

    // DINR13 @ offset=0x00000050
    __IO uint32_t DINR13_reg;

    // DINR14 @ offset=0x00000054
    __IO uint32_t DINR14_reg;

    // DINR15 @ offset=0x00000058
    __IO uint32_t DINR15_reg;

    // DINR16 @ offset=0x0000005C
    __IO uint32_t DINR16_reg;

    // DINR17 @ offset=0x00000060
    __IO uint32_t DINR17_reg;

    // DINR18 @ offset=0x00000064
    __IO uint32_t DINR18_reg;

    // DINR19 @ offset=0x00000068
    __IO uint32_t DINR19_reg;

    // DINR20 @ offset=0x0000006C
    __IO uint32_t DINR20_reg;

    // DINR21 @ offset=0x00000070
    __IO uint32_t DINR21_reg;

    // DINR22 @ offset=0x00000074
    __IO uint32_t DINR22_reg;

    // DINR23 @ offset=0x00000078
    __IO uint32_t DINR23_reg;

    // DINR24 @ offset=0x0000007C
    __IO uint32_t DINR24_reg;

    // DINR25 @ offset=0x00000080
    __IO uint32_t DINR25_reg;

    // DINR26 @ offset=0x00000084
    __IO uint32_t DINR26_reg;

    // DINR27 @ offset=0x00000088
    __IO uint32_t DINR27_reg;

    // DINR28 @ offset=0x0000008C
    __IO uint32_t DINR28_reg;

    // DINR29 @ offset=0x00000090
    __IO uint32_t DINR29_reg;

    // DINR30 @ offset=0x00000094
    __IO uint32_t DINR30_reg;

    // DINR31 @ offset=0x00000098
    __IO uint32_t DINR31_reg;

    // DOUTR0 @ offset=0x0000009C
    __IO uint32_t DOUTR0_reg;

    // DOUTR1 @ offset=0x000000A0
    __IO uint32_t DOUTR1_reg;

    // DOUTR2 @ offset=0x000000A4
    __IO uint32_t DOUTR2_reg;

    // DOUTR3 @ offset=0x000000A8
    __IO uint32_t DOUTR3_reg;

    // DOUTR4 @ offset=0x000000AC
    __IO uint32_t DOUTR4_reg;

    // DOUTR5 @ offset=0x000000B0
    __IO uint32_t DOUTR5_reg;

    // DOUTR6 @ offset=0x000000B4
    __IO uint32_t DOUTR6_reg;

    // DOUTR7 @ offset=0x000000B8
    __IO uint32_t DOUTR7_reg;

    // DOUTR8 @ offset=0x000000BC
    __IO uint32_t DOUTR8_reg;

    // DOUTR9 @ offset=0x000000C0
    __IO uint32_t DOUTR9_reg;

    // DOUTR10 @ offset=0x000000C4
    __IO uint32_t DOUTR10_reg;

    // DOUTR11 @ offset=0x000000C8
    __IO uint32_t DOUTR11_reg;

    // DOUTR12 @ offset=0x000000CC
    __IO uint32_t DOUTR12_reg;

    // DOUTR13 @ offset=0x000000D0
    __IO uint32_t DOUTR13_reg;

    // DOUTR14 @ offset=0x000000D4
    __IO uint32_t DOUTR14_reg;

    // DOUTR15 @ offset=0x000000D8
    __IO uint32_t DOUTR15_reg;

    // DOUTR16 @ offset=0x000000DC
    __IO uint32_t DOUTR16_reg;

    // DOUTR17 @ offset=0x000000E0
    __IO uint32_t DOUTR17_reg;

    // DOUTR18 @ offset=0x000000E4
    __IO uint32_t DOUTR18_reg;

    // DOUTR19 @ offset=0x000000E8
    __IO uint32_t DOUTR19_reg;

    // DOUTR20 @ offset=0x000000EC
    __IO uint32_t DOUTR20_reg;

    // DOUTR21 @ offset=0x000000F0
    __IO uint32_t DOUTR21_reg;

    // DOUTR22 @ offset=0x000000F4
    __IO uint32_t DOUTR22_reg;

    // DOUTR23 @ offset=0x000000F8
    __IO uint32_t DOUTR23_reg;

    // DOUTR24 @ offset=0x000000FC
    __IO uint32_t DOUTR24_reg;

    // DOUTR25 @ offset=0x00000100
    __IO uint32_t DOUTR25_reg;

    // DOUTR26 @ offset=0x00000104
    __IO uint32_t DOUTR26_reg;

    // DOUTR27 @ offset=0x00000108
    __IO uint32_t DOUTR27_reg;

    // DOUTR28 @ offset=0x0000010C
    __IO uint32_t DOUTR28_reg;

    // DOUTR29 @ offset=0x00000110
    __IO uint32_t DOUTR29_reg;

    // DOUTR30 @ offset=0x00000114
    __IO uint32_t DOUTR30_reg;

    // DOUTR31 @ offset=0x00000118
    __IO uint32_t DOUTR31_reg;

} mdios_t;

// Peripheral MDMA @ base_addess=0x52000000
typedef struct mdma_t {

    // MDMA_GISR0 @ offset=0x00000000
    union {
        __IO uint32_t MDMA_GISR0_reg;

        // bit fields
        struct {
            __IO uint32_t GIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF5_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF6_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF7_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF8_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF9_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF10_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF11_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF12_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF13_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF14_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GIF15_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 16;
        } MDMA_GISR0_bits;
    };

    __IO uint8_t RESERVED0[60];

    // MDMA_C0ISR @ offset=0x00000040
    union {
        __IO uint32_t MDMA_C0ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C0ISR_bits;
    };

    // MDMA_C0IFCR @ offset=0x00000044
    union {
        __IO uint32_t MDMA_C0IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF0_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF0_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF0_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF0_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF0_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C0IFCR_bits;
    };

    // MDMA_C0ESR @ offset=0x00000048
    union {
        __IO uint32_t MDMA_C0ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C0ESR_bits;
    };

    // MDMA_C0CR @ offset=0x0000004C
    union {
        __IO uint32_t MDMA_C0CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C0CR_bits;
    };

    // MDMA_C0TCR @ offset=0x00000050
    union {
        __IO uint32_t MDMA_C0TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C0TCR_bits;
    };

    // MDMA_C0BNDTR @ offset=0x00000054
    union {
        __IO uint32_t MDMA_C0BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C0BNDTR_bits;
    };

    // MDMA_C0SAR @ offset=0x00000058
    __IO uint32_t MDMA_C0SAR_reg;

    // MDMA_C0DAR @ offset=0x0000005C
    __IO uint32_t MDMA_C0DAR_reg;

    // MDMA_C0BRUR @ offset=0x00000060
    union {
        __IO uint32_t MDMA_C0BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C0BRUR_bits;
    };

    // MDMA_C0LAR @ offset=0x00000064
    __IO uint32_t MDMA_C0LAR_reg;

    // MDMA_C0TBR @ offset=0x00000068
    union {
        __IO uint32_t MDMA_C0TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C0TBR_bits;
    };

    __IO uint8_t RESERVED1[4];

    // MDMA_C0MAR @ offset=0x00000070
    __IO uint32_t MDMA_C0MAR_reg;

    // MDMA_C0MDR @ offset=0x00000074
    __IO uint32_t MDMA_C0MDR_reg;

    __IO uint8_t RESERVED2[8];

    // MDMA_C1ISR @ offset=0x00000080
    union {
        __IO uint32_t MDMA_C1ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA1_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C1ISR_bits;
    };

    // MDMA_C1IFCR @ offset=0x00000084
    union {
        __IO uint32_t MDMA_C1IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF1_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF1_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF1_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF1_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C1IFCR_bits;
    };

    // MDMA_C1ESR @ offset=0x00000088
    union {
        __IO uint32_t MDMA_C1ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C1ESR_bits;
    };

    // MDMA_C1CR @ offset=0x0000008C
    union {
        __IO uint32_t MDMA_C1CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C1CR_bits;
    };

    // MDMA_C1TCR @ offset=0x00000090
    union {
        __IO uint32_t MDMA_C1TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C1TCR_bits;
    };

    // MDMA_C1BNDTR @ offset=0x00000094
    union {
        __IO uint32_t MDMA_C1BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C1BNDTR_bits;
    };

    // MDMA_C1SAR @ offset=0x00000098
    __IO uint32_t MDMA_C1SAR_reg;

    // MDMA_C1DAR @ offset=0x0000009C
    __IO uint32_t MDMA_C1DAR_reg;

    // MDMA_C1BRUR @ offset=0x000000A0
    union {
        __IO uint32_t MDMA_C1BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C1BRUR_bits;
    };

    // MDMA_C1LAR @ offset=0x000000A4
    __IO uint32_t MDMA_C1LAR_reg;

    // MDMA_C1TBR @ offset=0x000000A8
    union {
        __IO uint32_t MDMA_C1TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C1TBR_bits;
    };

    __IO uint8_t RESERVED3[4];

    // MDMA_C1MAR @ offset=0x000000B0
    __IO uint32_t MDMA_C1MAR_reg;

    // MDMA_C1MDR @ offset=0x000000B4
    __IO uint32_t MDMA_C1MDR_reg;

    __IO uint8_t RESERVED4[8];

    // MDMA_C2ISR @ offset=0x000000C0
    union {
        __IO uint32_t MDMA_C2ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C2ISR_bits;
    };

    // MDMA_C2IFCR @ offset=0x000000C4
    union {
        __IO uint32_t MDMA_C2IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF2_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF2_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF2_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C2IFCR_bits;
    };

    // MDMA_C2ESR @ offset=0x000000C8
    union {
        __IO uint32_t MDMA_C2ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C2ESR_bits;
    };

    // MDMA_C2CR @ offset=0x000000CC
    union {
        __IO uint32_t MDMA_C2CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C2CR_bits;
    };

    // MDMA_C2TCR @ offset=0x000000D0
    union {
        __IO uint32_t MDMA_C2TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C2TCR_bits;
    };

    // MDMA_C2BNDTR @ offset=0x000000D4
    union {
        __IO uint32_t MDMA_C2BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C2BNDTR_bits;
    };

    // MDMA_C2SAR @ offset=0x000000D8
    __IO uint32_t MDMA_C2SAR_reg;

    // MDMA_C2DAR @ offset=0x000000DC
    __IO uint32_t MDMA_C2DAR_reg;

    // MDMA_C2BRUR @ offset=0x000000E0
    union {
        __IO uint32_t MDMA_C2BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C2BRUR_bits;
    };

    // MDMA_C2LAR @ offset=0x000000E4
    __IO uint32_t MDMA_C2LAR_reg;

    // MDMA_C2TBR @ offset=0x000000E8
    union {
        __IO uint32_t MDMA_C2TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C2TBR_bits;
    };

    __IO uint8_t RESERVED5[4];

    // MDMA_C2MAR @ offset=0x000000F0
    __IO uint32_t MDMA_C2MAR_reg;

    // MDMA_C2MDR @ offset=0x000000F4
    __IO uint32_t MDMA_C2MDR_reg;

    __IO uint8_t RESERVED6[8];

    // MDMA_C3ISR @ offset=0x00000100
    union {
        __IO uint32_t MDMA_C3ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF3_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF3_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF3_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C3ISR_bits;
    };

    // MDMA_C3IFCR @ offset=0x00000104
    union {
        __IO uint32_t MDMA_C3IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF3_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF3_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF3_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF3_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C3IFCR_bits;
    };

    // MDMA_C3ESR @ offset=0x00000108
    union {
        __IO uint32_t MDMA_C3ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C3ESR_bits;
    };

    // MDMA_C3CR @ offset=0x0000010C
    union {
        __IO uint32_t MDMA_C3CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C3CR_bits;
    };

    // MDMA_C3TCR @ offset=0x00000110
    union {
        __IO uint32_t MDMA_C3TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C3TCR_bits;
    };

    // MDMA_C3BNDTR @ offset=0x00000114
    union {
        __IO uint32_t MDMA_C3BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C3BNDTR_bits;
    };

    // MDMA_C3SAR @ offset=0x00000118
    __IO uint32_t MDMA_C3SAR_reg;

    // MDMA_C3DAR @ offset=0x0000011C
    __IO uint32_t MDMA_C3DAR_reg;

    // MDMA_C3BRUR @ offset=0x00000120
    union {
        __IO uint32_t MDMA_C3BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C3BRUR_bits;
    };

    // MDMA_C3LAR @ offset=0x00000124
    __IO uint32_t MDMA_C3LAR_reg;

    // MDMA_C3TBR @ offset=0x00000128
    union {
        __IO uint32_t MDMA_C3TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C3TBR_bits;
    };

    __IO uint8_t RESERVED7[4];

    // MDMA_C3MAR @ offset=0x00000130
    __IO uint32_t MDMA_C3MAR_reg;

    // MDMA_C3MDR @ offset=0x00000134
    __IO uint32_t MDMA_C3MDR_reg;

    __IO uint8_t RESERVED8[8];

    // MDMA_C4ISR @ offset=0x00000140
    union {
        __IO uint32_t MDMA_C4ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF4_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA4_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C4ISR_bits;
    };

    // MDMA_C4IFCR @ offset=0x00000144
    union {
        __IO uint32_t MDMA_C4IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF4_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF4_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF4_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF4_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C4IFCR_bits;
    };

    // MDMA_C4ESR @ offset=0x00000148
    union {
        __IO uint32_t MDMA_C4ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C4ESR_bits;
    };

    // MDMA_C4CR @ offset=0x0000014C
    union {
        __IO uint32_t MDMA_C4CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C4CR_bits;
    };

    // MDMA_C4TCR @ offset=0x00000150
    union {
        __IO uint32_t MDMA_C4TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C4TCR_bits;
    };

    // MDMA_C4BNDTR @ offset=0x00000154
    union {
        __IO uint32_t MDMA_C4BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C4BNDTR_bits;
    };

    // MDMA_C4SAR @ offset=0x00000158
    __IO uint32_t MDMA_C4SAR_reg;

    // MDMA_C4DAR @ offset=0x0000015C
    __IO uint32_t MDMA_C4DAR_reg;

    // MDMA_C4BRUR @ offset=0x00000160
    union {
        __IO uint32_t MDMA_C4BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C4BRUR_bits;
    };

    // MDMA_C4LAR @ offset=0x00000164
    __IO uint32_t MDMA_C4LAR_reg;

    // MDMA_C4TBR @ offset=0x00000168
    union {
        __IO uint32_t MDMA_C4TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C4TBR_bits;
    };

    __IO uint8_t RESERVED9[4];

    // MDMA_C4MAR @ offset=0x00000170
    __IO uint32_t MDMA_C4MAR_reg;

    // MDMA_C4MDR @ offset=0x00000174
    __IO uint32_t MDMA_C4MDR_reg;

    __IO uint8_t RESERVED10[8];

    // MDMA_C5ISR @ offset=0x00000180
    union {
        __IO uint32_t MDMA_C5ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF5_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF5_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF5_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF5_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C5ISR_bits;
    };

    // MDMA_C5IFCR @ offset=0x00000184
    union {
        __IO uint32_t MDMA_C5IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF5_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF5_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF5_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF5_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C5IFCR_bits;
    };

    // MDMA_C5ESR @ offset=0x00000188
    union {
        __IO uint32_t MDMA_C5ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C5ESR_bits;
    };

    // MDMA_C5CR @ offset=0x0000018C
    union {
        __IO uint32_t MDMA_C5CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C5CR_bits;
    };

    // MDMA_C5TCR @ offset=0x00000190
    union {
        __IO uint32_t MDMA_C5TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C5TCR_bits;
    };

    // MDMA_C5BNDTR @ offset=0x00000194
    union {
        __IO uint32_t MDMA_C5BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C5BNDTR_bits;
    };

    // MDMA_C5SAR @ offset=0x00000198
    __IO uint32_t MDMA_C5SAR_reg;

    // MDMA_C5DAR @ offset=0x0000019C
    __IO uint32_t MDMA_C5DAR_reg;

    // MDMA_C5BRUR @ offset=0x000001A0
    union {
        __IO uint32_t MDMA_C5BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C5BRUR_bits;
    };

    // MDMA_C5LAR @ offset=0x000001A4
    __IO uint32_t MDMA_C5LAR_reg;

    // MDMA_C5TBR @ offset=0x000001A8
    union {
        __IO uint32_t MDMA_C5TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C5TBR_bits;
    };

    __IO uint8_t RESERVED11[4];

    // MDMA_C5MAR @ offset=0x000001B0
    __IO uint32_t MDMA_C5MAR_reg;

    // MDMA_C5MDR @ offset=0x000001B4
    __IO uint32_t MDMA_C5MDR_reg;

    __IO uint8_t RESERVED12[8];

    // MDMA_C6ISR @ offset=0x000001C0
    union {
        __IO uint32_t MDMA_C6ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF6_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF6_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF6_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF6_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF6_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA6_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C6ISR_bits;
    };

    // MDMA_C6IFCR @ offset=0x000001C4
    union {
        __IO uint32_t MDMA_C6IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF6_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF6_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF6_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF6_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF6_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C6IFCR_bits;
    };

    // MDMA_C6ESR @ offset=0x000001C8
    union {
        __IO uint32_t MDMA_C6ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C6ESR_bits;
    };

    // MDMA_C6CR @ offset=0x000001CC
    union {
        __IO uint32_t MDMA_C6CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C6CR_bits;
    };

    // MDMA_C6TCR @ offset=0x000001D0
    union {
        __IO uint32_t MDMA_C6TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C6TCR_bits;
    };

    // MDMA_C6BNDTR @ offset=0x000001D4
    union {
        __IO uint32_t MDMA_C6BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C6BNDTR_bits;
    };

    // MDMA_C6SAR @ offset=0x000001D8
    __IO uint32_t MDMA_C6SAR_reg;

    // MDMA_C6DAR @ offset=0x000001DC
    __IO uint32_t MDMA_C6DAR_reg;

    // MDMA_C6BRUR @ offset=0x000001E0
    union {
        __IO uint32_t MDMA_C6BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C6BRUR_bits;
    };

    // MDMA_C6LAR @ offset=0x000001E4
    __IO uint32_t MDMA_C6LAR_reg;

    // MDMA_C6TBR @ offset=0x000001E8
    union {
        __IO uint32_t MDMA_C6TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C6TBR_bits;
    };

    __IO uint8_t RESERVED13[4];

    // MDMA_C6MAR @ offset=0x000001F0
    __IO uint32_t MDMA_C6MAR_reg;

    // MDMA_C6MDR @ offset=0x000001F4
    __IO uint32_t MDMA_C6MDR_reg;

    __IO uint8_t RESERVED14[8];

    // MDMA_C7ISR @ offset=0x00000200
    union {
        __IO uint32_t MDMA_C7ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF7_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF7_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF7_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF7_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA7_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C7ISR_bits;
    };

    // MDMA_C7IFCR @ offset=0x00000204
    union {
        __IO uint32_t MDMA_C7IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF7_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF7_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF7_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF7_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C7IFCR_bits;
    };

    // MDMA_C7ESR @ offset=0x00000208
    union {
        __IO uint32_t MDMA_C7ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C7ESR_bits;
    };

    // MDMA_C7CR @ offset=0x0000020C
    union {
        __IO uint32_t MDMA_C7CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C7CR_bits;
    };

    // MDMA_C7TCR @ offset=0x00000210
    union {
        __IO uint32_t MDMA_C7TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C7TCR_bits;
    };

    // MDMA_C7BNDTR @ offset=0x00000214
    union {
        __IO uint32_t MDMA_C7BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C7BNDTR_bits;
    };

    // MDMA_C7SAR @ offset=0x00000218
    __IO uint32_t MDMA_C7SAR_reg;

    // MDMA_C7DAR @ offset=0x0000021C
    __IO uint32_t MDMA_C7DAR_reg;

    // MDMA_C7BRUR @ offset=0x00000220
    union {
        __IO uint32_t MDMA_C7BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C7BRUR_bits;
    };

    // MDMA_C7LAR @ offset=0x00000224
    __IO uint32_t MDMA_C7LAR_reg;

    // MDMA_C7TBR @ offset=0x00000228
    union {
        __IO uint32_t MDMA_C7TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C7TBR_bits;
    };

    __IO uint8_t RESERVED15[4];

    // MDMA_C7MAR @ offset=0x00000230
    __IO uint32_t MDMA_C7MAR_reg;

    // MDMA_C7MDR @ offset=0x00000234
    __IO uint32_t MDMA_C7MDR_reg;

    __IO uint8_t RESERVED16[8];

    // MDMA_C8ISR @ offset=0x00000240
    union {
        __IO uint32_t MDMA_C8ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF8_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF8_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF8_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF8_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF8_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA8_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C8ISR_bits;
    };

    // MDMA_C8IFCR @ offset=0x00000244
    union {
        __IO uint32_t MDMA_C8IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF8_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF8_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF8_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF8_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF8_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C8IFCR_bits;
    };

    // MDMA_C8ESR @ offset=0x00000248
    union {
        __IO uint32_t MDMA_C8ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C8ESR_bits;
    };

    // MDMA_C8CR @ offset=0x0000024C
    union {
        __IO uint32_t MDMA_C8CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C8CR_bits;
    };

    // MDMA_C8TCR @ offset=0x00000250
    union {
        __IO uint32_t MDMA_C8TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C8TCR_bits;
    };

    // MDMA_C8BNDTR @ offset=0x00000254
    union {
        __IO uint32_t MDMA_C8BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C8BNDTR_bits;
    };

    // MDMA_C8SAR @ offset=0x00000258
    __IO uint32_t MDMA_C8SAR_reg;

    // MDMA_C8DAR @ offset=0x0000025C
    __IO uint32_t MDMA_C8DAR_reg;

    // MDMA_C8BRUR @ offset=0x00000260
    union {
        __IO uint32_t MDMA_C8BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C8BRUR_bits;
    };

    // MDMA_C8LAR @ offset=0x00000264
    __IO uint32_t MDMA_C8LAR_reg;

    // MDMA_C8TBR @ offset=0x00000268
    union {
        __IO uint32_t MDMA_C8TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C8TBR_bits;
    };

    __IO uint8_t RESERVED17[4];

    // MDMA_C8MAR @ offset=0x00000270
    __IO uint32_t MDMA_C8MAR_reg;

    // MDMA_C8MDR @ offset=0x00000274
    __IO uint32_t MDMA_C8MDR_reg;

    __IO uint8_t RESERVED18[8];

    // MDMA_C9ISR @ offset=0x00000280
    union {
        __IO uint32_t MDMA_C9ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF9_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF9_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF9_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF9_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF9_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA9_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C9ISR_bits;
    };

    // MDMA_C9IFCR @ offset=0x00000284
    union {
        __IO uint32_t MDMA_C9IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF9_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF9_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF9_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF9_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF9_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C9IFCR_bits;
    };

    // MDMA_C9ESR @ offset=0x00000288
    union {
        __IO uint32_t MDMA_C9ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C9ESR_bits;
    };

    // MDMA_C9CR @ offset=0x0000028C
    union {
        __IO uint32_t MDMA_C9CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C9CR_bits;
    };

    // MDMA_C9TCR @ offset=0x00000290
    union {
        __IO uint32_t MDMA_C9TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C9TCR_bits;
    };

    // MDMA_C9BNDTR @ offset=0x00000294
    union {
        __IO uint32_t MDMA_C9BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C9BNDTR_bits;
    };

    // MDMA_C9SAR @ offset=0x00000298
    __IO uint32_t MDMA_C9SAR_reg;

    // MDMA_C9DAR @ offset=0x0000029C
    __IO uint32_t MDMA_C9DAR_reg;

    // MDMA_C9BRUR @ offset=0x000002A0
    union {
        __IO uint32_t MDMA_C9BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C9BRUR_bits;
    };

    // MDMA_C9LAR @ offset=0x000002A4
    __IO uint32_t MDMA_C9LAR_reg;

    // MDMA_C9TBR @ offset=0x000002A8
    union {
        __IO uint32_t MDMA_C9TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C9TBR_bits;
    };

    __IO uint8_t RESERVED19[4];

    // MDMA_C9MAR @ offset=0x000002B0
    __IO uint32_t MDMA_C9MAR_reg;

    // MDMA_C9MDR @ offset=0x000002B4
    __IO uint32_t MDMA_C9MDR_reg;

    __IO uint8_t RESERVED20[8];

    // MDMA_C10ISR @ offset=0x000002C0
    union {
        __IO uint32_t MDMA_C10ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF10_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF10_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF10_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF10_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF10_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA10_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C10ISR_bits;
    };

    // MDMA_C10IFCR @ offset=0x000002C4
    union {
        __IO uint32_t MDMA_C10IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF10_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF10_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF10_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF10_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF10_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C10IFCR_bits;
    };

    // MDMA_C10ESR @ offset=0x000002C8
    union {
        __IO uint32_t MDMA_C10ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C10ESR_bits;
    };

    // MDMA_C10CR @ offset=0x000002CC
    union {
        __IO uint32_t MDMA_C10CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C10CR_bits;
    };

    // MDMA_C10TCR @ offset=0x000002D0
    union {
        __IO uint32_t MDMA_C10TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C10TCR_bits;
    };

    // MDMA_C10BNDTR @ offset=0x000002D4
    union {
        __IO uint32_t MDMA_C10BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C10BNDTR_bits;
    };

    // MDMA_C10SAR @ offset=0x000002D8
    __IO uint32_t MDMA_C10SAR_reg;

    // MDMA_C10DAR @ offset=0x000002DC
    __IO uint32_t MDMA_C10DAR_reg;

    // MDMA_C10BRUR @ offset=0x000002E0
    union {
        __IO uint32_t MDMA_C10BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C10BRUR_bits;
    };

    // MDMA_C10LAR @ offset=0x000002E4
    __IO uint32_t MDMA_C10LAR_reg;

    // MDMA_C10TBR @ offset=0x000002E8
    union {
        __IO uint32_t MDMA_C10TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C10TBR_bits;
    };

    __IO uint8_t RESERVED21[4];

    // MDMA_C10MAR @ offset=0x000002F0
    __IO uint32_t MDMA_C10MAR_reg;

    // MDMA_C10MDR @ offset=0x000002F4
    __IO uint32_t MDMA_C10MDR_reg;

    __IO uint8_t RESERVED22[8];

    // MDMA_C11ISR @ offset=0x00000300
    union {
        __IO uint32_t MDMA_C11ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF11_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF11_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF11_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF11_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF11_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA11_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C11ISR_bits;
    };

    // MDMA_C11IFCR @ offset=0x00000304
    union {
        __IO uint32_t MDMA_C11IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF11_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF11_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF11_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF11_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF11_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C11IFCR_bits;
    };

    // MDMA_C11ESR @ offset=0x00000308
    union {
        __IO uint32_t MDMA_C11ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C11ESR_bits;
    };

    // MDMA_C11CR @ offset=0x0000030C
    union {
        __IO uint32_t MDMA_C11CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C11CR_bits;
    };

    // MDMA_C11TCR @ offset=0x00000310
    union {
        __IO uint32_t MDMA_C11TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C11TCR_bits;
    };

    // MDMA_C11BNDTR @ offset=0x00000314
    union {
        __IO uint32_t MDMA_C11BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C11BNDTR_bits;
    };

    // MDMA_C11SAR @ offset=0x00000318
    __IO uint32_t MDMA_C11SAR_reg;

    // MDMA_C11DAR @ offset=0x0000031C
    __IO uint32_t MDMA_C11DAR_reg;

    // MDMA_C11BRUR @ offset=0x00000320
    union {
        __IO uint32_t MDMA_C11BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C11BRUR_bits;
    };

    // MDMA_C11LAR @ offset=0x00000324
    __IO uint32_t MDMA_C11LAR_reg;

    // MDMA_C11TBR @ offset=0x00000328
    union {
        __IO uint32_t MDMA_C11TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C11TBR_bits;
    };

    __IO uint8_t RESERVED23[4];

    // MDMA_C11MAR @ offset=0x00000330
    __IO uint32_t MDMA_C11MAR_reg;

    // MDMA_C11MDR @ offset=0x00000334
    __IO uint32_t MDMA_C11MDR_reg;

    __IO uint8_t RESERVED24[8];

    // MDMA_C12ISR @ offset=0x00000340
    union {
        __IO uint32_t MDMA_C12ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF12_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF12_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF12_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF12_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF12_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA12_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C12ISR_bits;
    };

    // MDMA_C12IFCR @ offset=0x00000344
    union {
        __IO uint32_t MDMA_C12IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF12_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF12_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF12_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF12_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF12_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C12IFCR_bits;
    };

    // MDMA_C12ESR @ offset=0x00000348
    union {
        __IO uint32_t MDMA_C12ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C12ESR_bits;
    };

    // MDMA_C12CR @ offset=0x0000034C
    union {
        __IO uint32_t MDMA_C12CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C12CR_bits;
    };

    // MDMA_C12TCR @ offset=0x00000350
    union {
        __IO uint32_t MDMA_C12TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C12TCR_bits;
    };

    // MDMA_C12BNDTR @ offset=0x00000354
    union {
        __IO uint32_t MDMA_C12BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C12BNDTR_bits;
    };

    // MDMA_C12SAR @ offset=0x00000358
    __IO uint32_t MDMA_C12SAR_reg;

    // MDMA_C12DAR @ offset=0x0000035C
    __IO uint32_t MDMA_C12DAR_reg;

    // MDMA_C12BRUR @ offset=0x00000360
    union {
        __IO uint32_t MDMA_C12BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C12BRUR_bits;
    };

    // MDMA_C12LAR @ offset=0x00000364
    __IO uint32_t MDMA_C12LAR_reg;

    // MDMA_C12TBR @ offset=0x00000368
    union {
        __IO uint32_t MDMA_C12TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C12TBR_bits;
    };

    __IO uint8_t RESERVED25[4];

    // MDMA_C12MAR @ offset=0x00000370
    __IO uint32_t MDMA_C12MAR_reg;

    // MDMA_C12MDR @ offset=0x00000374
    __IO uint32_t MDMA_C12MDR_reg;

    __IO uint8_t RESERVED26[8];

    // MDMA_C13ISR @ offset=0x00000380
    union {
        __IO uint32_t MDMA_C13ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF13_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF13_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF13_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF13_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF13_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA13_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C13ISR_bits;
    };

    // MDMA_C13IFCR @ offset=0x00000384
    union {
        __IO uint32_t MDMA_C13IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF13_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF13_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF13_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF13_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF13_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C13IFCR_bits;
    };

    // MDMA_C13ESR @ offset=0x00000388
    union {
        __IO uint32_t MDMA_C13ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C13ESR_bits;
    };

    // MDMA_C13CR @ offset=0x0000038C
    union {
        __IO uint32_t MDMA_C13CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C13CR_bits;
    };

    // MDMA_C13TCR @ offset=0x00000390
    union {
        __IO uint32_t MDMA_C13TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C13TCR_bits;
    };

    // MDMA_C13BNDTR @ offset=0x00000394
    union {
        __IO uint32_t MDMA_C13BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C13BNDTR_bits;
    };

    // MDMA_C13SAR @ offset=0x00000398
    __IO uint32_t MDMA_C13SAR_reg;

    // MDMA_C13DAR @ offset=0x0000039C
    __IO uint32_t MDMA_C13DAR_reg;

    // MDMA_C13BRUR @ offset=0x000003A0
    union {
        __IO uint32_t MDMA_C13BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C13BRUR_bits;
    };

    // MDMA_C13LAR @ offset=0x000003A4
    __IO uint32_t MDMA_C13LAR_reg;

    // MDMA_C13TBR @ offset=0x000003A8
    union {
        __IO uint32_t MDMA_C13TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C13TBR_bits;
    };

    __IO uint8_t RESERVED27[4];

    // MDMA_C13MAR @ offset=0x000003B0
    __IO uint32_t MDMA_C13MAR_reg;

    // MDMA_C13MDR @ offset=0x000003B4
    __IO uint32_t MDMA_C13MDR_reg;

    __IO uint8_t RESERVED28[8];

    // MDMA_C14ISR @ offset=0x000003C0
    union {
        __IO uint32_t MDMA_C14ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF14_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF14_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF14_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF14_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF14_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA14_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C14ISR_bits;
    };

    // MDMA_C14IFCR @ offset=0x000003C4
    union {
        __IO uint32_t MDMA_C14IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF14_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF14_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF14_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF14_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF14_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C14IFCR_bits;
    };

    // MDMA_C14ESR @ offset=0x000003C8
    union {
        __IO uint32_t MDMA_C14ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C14ESR_bits;
    };

    // MDMA_C14CR @ offset=0x000003CC
    union {
        __IO uint32_t MDMA_C14CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C14CR_bits;
    };

    // MDMA_C14TCR @ offset=0x000003D0
    union {
        __IO uint32_t MDMA_C14TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C14TCR_bits;
    };

    // MDMA_C14BNDTR @ offset=0x000003D4
    union {
        __IO uint32_t MDMA_C14BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C14BNDTR_bits;
    };

    // MDMA_C14SAR @ offset=0x000003D8
    __IO uint32_t MDMA_C14SAR_reg;

    // MDMA_C14DAR @ offset=0x000003DC
    __IO uint32_t MDMA_C14DAR_reg;

    // MDMA_C14BRUR @ offset=0x000003E0
    union {
        __IO uint32_t MDMA_C14BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C14BRUR_bits;
    };

    // MDMA_C14LAR @ offset=0x000003E4
    __IO uint32_t MDMA_C14LAR_reg;

    // MDMA_C14TBR @ offset=0x000003E8
    union {
        __IO uint32_t MDMA_C14TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C14TBR_bits;
    };

    __IO uint8_t RESERVED29[4];

    // MDMA_C14MAR @ offset=0x000003F0
    __IO uint32_t MDMA_C14MAR_reg;

    // MDMA_C14MDR @ offset=0x000003F4
    __IO uint32_t MDMA_C14MDR_reg;

    __IO uint8_t RESERVED30[8];

    // MDMA_C15ISR @ offset=0x00000400
    union {
        __IO uint32_t MDMA_C15ISR_reg;

        // bit fields
        struct {
            __IO uint32_t TEIF15_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTCIF15_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BRTIF15_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BTIF15_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCIF15_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t CRQA15_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } MDMA_C15ISR_bits;
    };

    // MDMA_C15IFCR @ offset=0x00000404
    union {
        __IO uint32_t MDMA_C15IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEIF15_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CCTCIF15_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBRTIF15_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CBTIF15_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLTCIF15_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } MDMA_C15IFCR_bits;
    };

    // MDMA_C15ESR @ offset=0x00000408
    union {
        __IO uint32_t MDMA_C15ESR_reg;

        // bit fields
        struct {
            __IO uint32_t TEA_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t TED_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TELD_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } MDMA_C15ESR_bits;
    };

    // MDMA_C15CR @ offset=0x0000040C
    union {
        __IO uint32_t MDMA_C15CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BTIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PL_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t BEX_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HEX_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WEX_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SWRQ_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 15;
        } MDMA_C15CR_bits;
    };

    // MDMA_C15TCR @ offset=0x00000410
    union {
        __IO uint32_t MDMA_C15TCR_reg;

        // bit fields
        struct {
            __IO uint32_t SINC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSIZE_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DSIZE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SINCOS_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DINCOS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBURST_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBURST_bit : 3; // bit offset=15  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TLEN_bit : 7; // bit offset=18  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PAM_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRGM_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWRM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BWM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } MDMA_C15TCR_bits;
    };

    // MDMA_C15BNDTR @ offset=0x00000414
    union {
        __IO uint32_t MDMA_C15BNDTR_reg;

        // bit fields
        struct {
            __IO uint32_t BNDT_bit : 17; // bit offset=0  bit width=17  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t BRSUM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRDUM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRC_bit : 12; // bit offset=20  bit width=12  access=SVDAccessType.READ_WRITE
        } MDMA_C15BNDTR_bits;
    };

    // MDMA_C15SAR @ offset=0x00000418
    __IO uint32_t MDMA_C15SAR_reg;

    // MDMA_C15DAR @ offset=0x0000041C
    __IO uint32_t MDMA_C15DAR_reg;

    // MDMA_C15BRUR @ offset=0x00000420
    union {
        __IO uint32_t MDMA_C15BRUR_reg;

        // bit fields
        struct {
            __IO uint32_t SUV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t DUV_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } MDMA_C15BRUR_bits;
    };

    // MDMA_C15LAR @ offset=0x00000424
    __IO uint32_t MDMA_C15LAR_reg;

    // MDMA_C15TBR @ offset=0x00000428
    union {
        __IO uint32_t MDMA_C15TBR_reg;

        // bit fields
        struct {
            __IO uint32_t TSEL_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 10;
            __IO uint32_t SBUS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBUS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } MDMA_C15TBR_bits;
    };

    __IO uint8_t RESERVED31[4];

    // MDMA_C15MAR @ offset=0x00000430
    __IO uint32_t MDMA_C15MAR_reg;

    // MDMA_C15MDR @ offset=0x00000434
    __IO uint32_t MDMA_C15MDR_reg;

} mdma_t;

// Peripheral OPAMP @ base_addess=0x40009000
typedef struct opamp_t {

    // OPAMP1_CSR @ offset=0x00000000
    union {
        __IO uint32_t OPAMP1_CSR_reg;

        // bit fields
        struct {
            __IO uint32_t OPAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FORCE_VP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VP_SEL_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t VM_SEL_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAHSM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t CALON_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALSEL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PGA_GAIN_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t USERTRIM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 10;
            __IO uint32_t TSTREF_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALOUT_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 1;
        } OPAMP1_CSR_bits;
    };

    // OPAMP1_OTR @ offset=0x00000004
    union {
        __IO uint32_t OPAMP1_OTR_reg;

        // bit fields
        struct {
            __IO uint32_t TRIMOFFSETN_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t TRIMOFFSETP_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } OPAMP1_OTR_bits;
    };

    // OPAMP1_HSOTR @ offset=0x00000008
    union {
        __IO uint32_t OPAMP1_HSOTR_reg;

        // bit fields
        struct {
            __IO uint32_t TRIMLPOFFSETN_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t TRIMLPOFFSETP_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } OPAMP1_HSOTR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // OPAMP2_CSR @ offset=0x00000010
    union {
        __IO uint32_t OPAMP2_CSR_reg;

        // bit fields
        struct {
            __IO uint32_t OPAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FORCE_VP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t VM_SEL_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAHSM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t CALON_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALSEL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PGA_GAIN_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t USERTRIM_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 10;
            __IO uint32_t TSTREF_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALOUT_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 1;
        } OPAMP2_CSR_bits;
    };

    // OPAMP2_OTR @ offset=0x00000014
    union {
        __IO uint32_t OPAMP2_OTR_reg;

        // bit fields
        struct {
            __IO uint32_t TRIMOFFSETN_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t TRIMOFFSETP_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } OPAMP2_OTR_bits;
    };

    // OPAMP2_HSOTR @ offset=0x00000018
    union {
        __IO uint32_t OPAMP2_HSOTR_reg;

        // bit fields
        struct {
            __IO uint32_t TRIMLPOFFSETN_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t TRIMLPOFFSETP_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } OPAMP2_HSOTR_bits;
    };

} opamp_t;

// Peripheral OTG1_HS_DEVICE @ base_addess=0x40040800
typedef struct otg1_hs_device_t {

    // OTG_HS_DCFG @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_DCFG_reg;

        // bit fields
        struct {
            __IO uint32_t DSPD_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NZLSOHSK_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DAD_bit : 7; // bit offset=4  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFIVL_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 11;
            __IO uint32_t PERSCHIVL_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } OTG_HS_DCFG_bits;
    };

    // OTG_HS_DCTL @ offset=0x00000004
    union {
        __IO uint32_t OTG_HS_DCTL_reg;

        // bit fields
        struct {
            __IO uint32_t RWUSIG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GINSTS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GONSTS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCTL_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SGINAK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGINAK_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SGONAK_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGONAK_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t POPRGDNE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 20;
        } OTG_HS_DCTL_bits;
    };

    // OTG_HS_DSTS @ offset=0x00000008
    union {
        __IO uint32_t OTG_HS_DSTS_reg;

        // bit fields
        struct {
            __IO uint32_t SUSPSTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ENUMSPD_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t EERR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t FNSOF_bit : 14; // bit offset=8  bit width=14  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 10;
        } OTG_HS_DSTS_bits;
    };

    __IO uint8_t RESERVED0[4];

    // OTG_HS_DIEPMSK @ offset=0x00000010
    union {
        __IO uint32_t OTG_HS_DIEPMSK_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFEMSK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPNMM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPNEM_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXFURM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 22;
        } OTG_HS_DIEPMSK_bits;
    };

    // OTG_HS_DOEPMSK @ offset=0x00000014
    union {
        __IO uint32_t OTG_HS_DOEPMSK_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t OPEM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOIM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 22;
        } OTG_HS_DOEPMSK_bits;
    };

    // OTG_HS_DAINT @ offset=0x00000018
    union {
        __IO uint32_t OTG_HS_DAINT_reg;

        // bit fields
        struct {
            __IO uint32_t IEPINT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t OEPINT_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } OTG_HS_DAINT_bits;
    };

    // OTG_HS_DAINTMSK @ offset=0x0000001C
    union {
        __IO uint32_t OTG_HS_DAINTMSK_reg;

        // bit fields
        struct {
            __IO uint32_t IEPM_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t OEPM_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DAINTMSK_bits;
    };

    __IO uint8_t RESERVED1[8];

    // OTG_HS_DVBUSDIS @ offset=0x00000028
    __IO uint32_t OTG_HS_DVBUSDIS_reg;

    // OTG_HS_DVBUSPULSE @ offset=0x0000002C
    __IO uint32_t OTG_HS_DVBUSPULSE_reg;

    // OTG_HS_DTHRCTL @ offset=0x00000030
    union {
        __IO uint32_t OTG_HS_DTHRCTL_reg;

        // bit fields
        struct {
            __IO uint32_t NONISOTHREN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISOTHREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTHRLEN_bit : 9; // bit offset=2  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t RXTHREN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXTHRLEN_bit : 9; // bit offset=17  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t ARPEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 4;
        } OTG_HS_DTHRCTL_bits;
    };

    // OTG_HS_DIEPEMPMSK @ offset=0x00000034
    __IO uint32_t OTG_HS_DIEPEMPMSK_reg;

    // OTG_HS_DEACHINT @ offset=0x00000038
    union {
        __IO uint32_t OTG_HS_DEACHINT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t IEP1INT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 15;
            __IO uint32_t OEP1INT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } OTG_HS_DEACHINT_bits;
    };

    // OTG_HS_DEACHINTMSK @ offset=0x0000003C
    union {
        __IO uint32_t OTG_HS_DEACHINTMSK_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t IEP1INTM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 15;
            __IO uint32_t OEP1INTM_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } OTG_HS_DEACHINTMSK_bits;
    };

    __IO uint8_t RESERVED2[192];

    // OTG_HS_DIEPCTL0 @ offset=0x00000100
    union {
        __IO uint32_t OTG_HS_DIEPCTL0_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL0_bits;
    };

    __IO uint8_t RESERVED3[4];

    // OTG_HS_DIEPINT0 @ offset=0x00000108
    union {
        __IO uint32_t OTG_HS_DIEPINT0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT0_bits;
    };

    __IO uint8_t RESERVED4[4];

    // OTG_HS_DIEPTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t PKTCNT_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 11;
        } OTG_HS_DIEPTSIZ0_bits;
    };

    // OTG_HS_DIEPDMA1 @ offset=0x00000114
    __IO uint32_t OTG_HS_DIEPDMA1_reg;

    // OTG_HS_DTXFSTS0 @ offset=0x00000118
    __IO uint32_t OTG_HS_DTXFSTS0_reg;

    __IO uint8_t RESERVED5[4];

    // OTG_HS_DIEPCTL1 @ offset=0x00000120
    union {
        __IO uint32_t OTG_HS_DIEPCTL1_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL1_bits;
    };

    __IO uint8_t RESERVED6[4];

    // OTG_HS_DIEPINT1 @ offset=0x00000128
    union {
        __IO uint32_t OTG_HS_DIEPINT1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT1_bits;
    };

    __IO uint8_t RESERVED7[4];

    // OTG_HS_DIEPTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ1_bits;
    };

    // OTG_HS_DIEPDMA2 @ offset=0x00000134
    __IO uint32_t OTG_HS_DIEPDMA2_reg;

    // OTG_HS_DTXFSTS1 @ offset=0x00000138
    __IO uint32_t OTG_HS_DTXFSTS1_reg;

    __IO uint8_t RESERVED8[4];

    // OTG_HS_DIEPCTL2 @ offset=0x00000140
    union {
        __IO uint32_t OTG_HS_DIEPCTL2_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL2_bits;
    };

    __IO uint8_t RESERVED9[4];

    // OTG_HS_DIEPINT2 @ offset=0x00000148
    union {
        __IO uint32_t OTG_HS_DIEPINT2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT2_bits;
    };

    __IO uint8_t RESERVED10[4];

    // OTG_HS_DIEPTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ2_bits;
    };

    // OTG_HS_DIEPDMA3 @ offset=0x00000154
    __IO uint32_t OTG_HS_DIEPDMA3_reg;

    // OTG_HS_DTXFSTS2 @ offset=0x00000158
    __IO uint32_t OTG_HS_DTXFSTS2_reg;

    __IO uint8_t RESERVED11[4];

    // OTG_HS_DIEPCTL3 @ offset=0x00000160
    union {
        __IO uint32_t OTG_HS_DIEPCTL3_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL3_bits;
    };

    __IO uint8_t RESERVED12[4];

    // OTG_HS_DIEPINT3 @ offset=0x00000168
    union {
        __IO uint32_t OTG_HS_DIEPINT3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT3_bits;
    };

    __IO uint8_t RESERVED13[4];

    // OTG_HS_DIEPTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ3_bits;
    };

    // OTG_HS_DIEPDMA4 @ offset=0x00000174
    __IO uint32_t OTG_HS_DIEPDMA4_reg;

    // OTG_HS_DTXFSTS3 @ offset=0x00000178
    __IO uint32_t OTG_HS_DTXFSTS3_reg;

    __IO uint8_t RESERVED14[4];

    // OTG_HS_DIEPCTL4 @ offset=0x00000180
    union {
        __IO uint32_t OTG_HS_DIEPCTL4_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL4_bits;
    };

    __IO uint8_t RESERVED15[4];

    // OTG_HS_DIEPINT4 @ offset=0x00000188
    union {
        __IO uint32_t OTG_HS_DIEPINT4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT4_bits;
    };

    __IO uint8_t RESERVED16[4];

    // OTG_HS_DIEPTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ4_bits;
    };

    // OTG_HS_DIEPDMA5 @ offset=0x00000194
    __IO uint32_t OTG_HS_DIEPDMA5_reg;

    // OTG_HS_DTXFSTS4 @ offset=0x00000198
    __IO uint32_t OTG_HS_DTXFSTS4_reg;

    union {
    __IO uint8_t RESERVED17[4];

        // OTG_HS_DIEPCTL5 @ offset=0x000001A0
        union {
            __IO uint32_t OTG_HS_DIEPCTL5_reg;

            // bit fields
            struct {
                __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 4;
                __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1: 1;
                __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            } OTG_HS_DIEPCTL5_bits;
        };

        // OTG_HS_DIEPTSIZ6 @ offset=0x000001A0
        union {
            __IO uint32_t OTG_HS_DIEPTSIZ6_reg;

            // bit fields
            struct {
                __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 1;
            } OTG_HS_DIEPTSIZ6_bits;
        };

    };

    // OTG_HS_DTXFSTS6 @ offset=0x000001A4
    __IO uint32_t OTG_HS_DTXFSTS6_reg;

    union {
        // OTG_HS_DIEPINT5 @ offset=0x000001A8
        union {
            __IO uint32_t OTG_HS_DIEPINT5_reg;

            // bit fields
            struct {
                __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 1;
                __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1: 1;
                __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED2: 1;
                __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED3 : 18;
            } OTG_HS_DIEPINT5_bits;
        };

        // OTG_HS_DIEPTSIZ7 @ offset=0x000001A8
        union {
            __IO uint32_t OTG_HS_DIEPTSIZ7_reg;

            // bit fields
            struct {
                __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 1;
            } OTG_HS_DIEPTSIZ7_bits;
        };

    };

    // OTG_HS_DTXFSTS7 @ offset=0x000001AC
    __IO uint32_t OTG_HS_DTXFSTS7_reg;

    // OTG_HS_DIEPTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ5_bits;
    };

    __IO uint8_t RESERVED18[4];

    // OTG_HS_DTXFSTS5 @ offset=0x000001B8
    __IO uint32_t OTG_HS_DTXFSTS5_reg;

    __IO uint8_t RESERVED19[4];

    // OTG_HS_DIEPCTL6 @ offset=0x000001C0
    union {
        __IO uint32_t OTG_HS_DIEPCTL6_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL6_bits;
    };

    __IO uint8_t RESERVED20[4];

    // OTG_HS_DIEPINT6 @ offset=0x000001C8
    union {
        __IO uint32_t OTG_HS_DIEPINT6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT6_bits;
    };

    __IO uint8_t RESERVED21[20];

    // OTG_HS_DIEPCTL7 @ offset=0x000001E0
    union {
        __IO uint32_t OTG_HS_DIEPCTL7_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL7_bits;
    };

    __IO uint8_t RESERVED22[4];

    // OTG_HS_DIEPINT7 @ offset=0x000001E8
    union {
        __IO uint32_t OTG_HS_DIEPINT7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT7_bits;
    };

    __IO uint8_t RESERVED23[276];

    // OTG_HS_DOEPCTL0 @ offset=0x00000300
    union {
        __IO uint32_t OTG_HS_DOEPCTL0_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } OTG_HS_DOEPCTL0_bits;
    };

    __IO uint8_t RESERVED24[4];

    // OTG_HS_DOEPINT0 @ offset=0x00000308
    union {
        __IO uint32_t OTG_HS_DOEPINT0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT0_bits;
    };

    __IO uint8_t RESERVED25[4];

    // OTG_HS_DOEPTSIZ0 @ offset=0x00000310
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t PKTCNT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 1;
        } OTG_HS_DOEPTSIZ0_bits;
    };

    __IO uint8_t RESERVED26[12];

    // OTG_HS_DOEPCTL1 @ offset=0x00000320
    union {
        __IO uint32_t OTG_HS_DOEPCTL1_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL1_bits;
    };

    __IO uint8_t RESERVED27[4];

    // OTG_HS_DOEPINT1 @ offset=0x00000328
    union {
        __IO uint32_t OTG_HS_DOEPINT1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT1_bits;
    };

    __IO uint8_t RESERVED28[4];

    // OTG_HS_DOEPTSIZ1 @ offset=0x00000330
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ1_bits;
    };

    __IO uint8_t RESERVED29[12];

    // OTG_HS_DOEPCTL2 @ offset=0x00000340
    union {
        __IO uint32_t OTG_HS_DOEPCTL2_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL2_bits;
    };

    __IO uint8_t RESERVED30[4];

    // OTG_HS_DOEPINT2 @ offset=0x00000348
    union {
        __IO uint32_t OTG_HS_DOEPINT2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT2_bits;
    };

    __IO uint8_t RESERVED31[4];

    // OTG_HS_DOEPTSIZ2 @ offset=0x00000350
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ2_bits;
    };

    __IO uint8_t RESERVED32[12];

    // OTG_HS_DOEPCTL3 @ offset=0x00000360
    union {
        __IO uint32_t OTG_HS_DOEPCTL3_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL3_bits;
    };

    __IO uint8_t RESERVED33[4];

    // OTG_HS_DOEPINT3 @ offset=0x00000368
    union {
        __IO uint32_t OTG_HS_DOEPINT3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT3_bits;
    };

    __IO uint8_t RESERVED34[4];

    // OTG_HS_DOEPTSIZ3 @ offset=0x00000370
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ3_bits;
    };

    __IO uint8_t RESERVED35[12];

    // OTG_HS_DOEPCTL4 @ offset=0x00000380
    union {
        __IO uint32_t OTG_HS_DOEPCTL4_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL4_bits;
    };

    __IO uint8_t RESERVED36[4];

    // OTG_HS_DOEPINT4 @ offset=0x00000388
    union {
        __IO uint32_t OTG_HS_DOEPINT4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT4_bits;
    };

    __IO uint8_t RESERVED37[4];

    // OTG_HS_DOEPTSIZ4 @ offset=0x00000390
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ4_bits;
    };

    __IO uint8_t RESERVED38[12];

    // OTG_HS_DOEPCTL5 @ offset=0x000003A0
    union {
        __IO uint32_t OTG_HS_DOEPCTL5_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL5_bits;
    };

    __IO uint8_t RESERVED39[4];

    // OTG_HS_DOEPINT5 @ offset=0x000003A8
    union {
        __IO uint32_t OTG_HS_DOEPINT5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT5_bits;
    };

    __IO uint8_t RESERVED40[4];

    // OTG_HS_DOEPTSIZ5 @ offset=0x000003B0
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ5_bits;
    };

    __IO uint8_t RESERVED41[12];

    // OTG_HS_DOEPCTL6 @ offset=0x000003C0
    union {
        __IO uint32_t OTG_HS_DOEPCTL6_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL6_bits;
    };

    __IO uint8_t RESERVED42[4];

    // OTG_HS_DOEPINT6 @ offset=0x000003C8
    union {
        __IO uint32_t OTG_HS_DOEPINT6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT6_bits;
    };

    __IO uint8_t RESERVED43[4];

    // OTG_HS_DOEPTSIZ6 @ offset=0x000003D0
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ6_bits;
    };

    __IO uint8_t RESERVED44[12];

    // OTG_HS_DOEPCTL7 @ offset=0x000003E0
    union {
        __IO uint32_t OTG_HS_DOEPCTL7_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL7_bits;
    };

    __IO uint8_t RESERVED45[4];

    // OTG_HS_DOEPINT7 @ offset=0x000003E8
    union {
        __IO uint32_t OTG_HS_DOEPINT7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT7_bits;
    };

    __IO uint8_t RESERVED46[4];

    // OTG_HS_DOEPTSIZ7 @ offset=0x000003F0
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ7_bits;
    };

} otg1_hs_device_t;

// Peripheral OTG1_HS_GLOBAL @ base_addess=0x40040000
typedef struct otg1_hs_global_t {

    // OTG_HS_GOTGCTL @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_GOTGCTL_reg;

        // bit fields
        struct {
            __IO uint32_t SRQSCS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBVALOEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBVALOVAL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AVALOEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AVALOVAL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BVALOEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BVALOVAL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HNGSCS_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HNPRQ_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSHNPEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DHNPEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EHEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CIDSTS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DBCT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASVLD_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSVLD_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OTGVER_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CURMOD_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 10;
        } OTG_HS_GOTGCTL_bits;
    };

    // OTG_HS_GOTGINT @ offset=0x00000004
    union {
        __IO uint32_t OTG_HS_GOTGINT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SEDET_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t SRSSCHG_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HNSSCHG_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t HNGDET_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADTOCHG_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBCDNE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDCHNG_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 11;
        } OTG_HS_GOTGINT_bits;
    };

    // OTG_HS_GAHBCFG @ offset=0x00000008
    union {
        __IO uint32_t OTG_HS_GAHBCFG_reg;

        // bit fields
        struct {
            __IO uint32_t GINT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HBSTLEN_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXFELVL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXFELVL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 23;
        } OTG_HS_GAHBCFG_bits;
    };

    // OTG_HS_GUSBCFG @ offset=0x0000000C
    union {
        __IO uint32_t OTG_HS_GUSBCFG_reg;

        // bit fields
        struct {
            __IO uint32_t TOCAL_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t PHYSEL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SRPCAP_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HNPCAP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRDT_bit : 4; // bit offset=10  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PHYLPCS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t ULPIFSLS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIAR_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPICSM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIEVBUSD_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIEVBUSI_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSDPS_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCCI_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTCI_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIIPD_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 3;
            __IO uint32_t FHMOD_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FDMOD_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 1;
        } OTG_HS_GUSBCFG_bits;
    };

    // OTG_HS_GRSTCTL @ offset=0x00000010
    union {
        __IO uint32_t OTG_HS_GRSTCTL_reg;

        // bit fields
        struct {
            __IO uint32_t CSRST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSRST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FCRST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXFFLSH_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFFLSH_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 19;
            __IO uint32_t DMAREQ_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AHBIDL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } OTG_HS_GRSTCTL_bits;
    };

    // OTG_HS_GINTSTS @ offset=0x00000014
    union {
        __IO uint32_t OTG_HS_GINTSTS_reg;

        // bit fields
        struct {
            __IO uint32_t CMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MMIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTGINT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFLVL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NPTXFE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GINAKEFF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOUTNAKEFF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ESUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBSUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBRST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENUMDNE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISOODRP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOPF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t IEPINT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OEPINT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IISOIXFR_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PXFR_INCOMPISOOUT_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAFSUSP_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t HPRTINT_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HCINT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PTXFE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CIDSCHG_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCINT_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRQINT_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUINT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_GINTSTS_bits;
    };

    // OTG_HS_GINTMSK @ offset=0x00000018
    union {
        __IO uint32_t OTG_HS_GINTMSK_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MMISM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTGINT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOFM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFLVLM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NPTXFEM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GINAKEFFM_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GONAKEFFM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t ESUSPM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBSUSPM_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBRST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENUMDNEM_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISOODRPM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOPFM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t IEPINT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OEPINT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IISOIXFRM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PXFRM_IISOOXFRM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSUSPM_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTIM_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HCIM_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXFEM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMINTM_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIDSCHGM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCINT_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRQIM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUIM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_GINTMSK_bits;
    };

    union {
        // OTG_HS_GRXSTSR_Host @ offset=0x0000001C
        union {
            __IO uint32_t OTG_HS_GRXSTSR_HOST_reg;

            // bit fields
            struct {
                __IO uint32_t CHNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 11;
            } OTG_HS_GRXSTSR_HOST_bits;
        };

        // OTG_HS_GRXSTSR_Device @ offset=0x0000001C
        union {
            __IO uint32_t OTG_HS_GRXSTSR_DEVICE_reg;

            // bit fields
            struct {
                __IO uint32_t EPNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t FRMNUM_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 7;
            } OTG_HS_GRXSTSR_DEVICE_bits;
        };

    };

    union {
        // OTG_HS_GRXSTSP_Host @ offset=0x00000020
        union {
            __IO uint32_t OTG_HS_GRXSTSP_HOST_reg;

            // bit fields
            struct {
                __IO uint32_t CHNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 11;
            } OTG_HS_GRXSTSP_HOST_bits;
        };

        // OTG_HS_GRXSTSP_Device @ offset=0x00000020
        union {
            __IO uint32_t OTG_HS_GRXSTSP_DEVICE_reg;

            // bit fields
            struct {
                __IO uint32_t EPNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t FRMNUM_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 7;
            } OTG_HS_GRXSTSP_DEVICE_bits;
        };

    };

    // OTG_HS_GRXFSIZ @ offset=0x00000024
    __IO uint32_t OTG_HS_GRXFSIZ_reg;

    union {
        // OTG_HS_HNPTXFSIZ_Host @ offset=0x00000028
        union {
            __IO uint32_t OTG_HS_HNPTXFSIZ_HOST_reg;

            // bit fields
            struct {
                __IO uint32_t NPTXFSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t NPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            } OTG_HS_HNPTXFSIZ_HOST_bits;
        };

        // OTG_HS_DIEPTXF0_Device @ offset=0x00000028
        union {
            __IO uint32_t OTG_HS_DIEPTXF0_DEVICE_reg;

            // bit fields
            struct {
                __IO uint32_t TX0FSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t TX0FD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            } OTG_HS_DIEPTXF0_DEVICE_bits;
        };

    };

    // OTG_HS_GNPTXSTS @ offset=0x0000002C
    union {
        __IO uint32_t OTG_HS_GNPTXSTS_reg;

        // bit fields
        struct {
            __IO uint32_t NPTXFSAV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t NPTQXSAV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t NPTXQTOP_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_GNPTXSTS_bits;
    };

    __IO uint8_t RESERVED0[8];

    // OTG_HS_GCCFG @ offset=0x00000038
    union {
        __IO uint32_t OTG_HS_GCCFG_reg;

        // bit fields
        struct {
            __IO uint32_t DCDET_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDET_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS2DET_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t PWRDWN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BCDEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCDEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PDEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBDEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 10;
        } OTG_HS_GCCFG_bits;
    };

    // OTG_HS_CID @ offset=0x0000003C
    __IO uint32_t OTG_HS_CID_reg;

    __IO uint8_t RESERVED1[20];

    // OTG_HS_GLPMCFG @ offset=0x00000054
    union {
        __IO uint32_t OTG_HS_GLPMCFG_reg;

        // bit fields
        struct {
            __IO uint32_t LPMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMACK_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BESL_bit : 4; // bit offset=2  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t REMWAKE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t L1SSEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BESLTHRS_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t L1DSEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMRST_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t SLPSTS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t L1RSMOK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LPMCHIDX_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMRCNT_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNDLPM_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMRCNTSTS_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t ENBESL_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 3;
        } OTG_HS_GLPMCFG_bits;
    };

    __IO uint8_t RESERVED2[168];

    // OTG_HS_HPTXFSIZ @ offset=0x00000100
    union {
        __IO uint32_t OTG_HS_HPTXFSIZ_reg;

        // bit fields
        struct {
            __IO uint32_t PTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_HPTXFSIZ_bits;
    };

    // OTG_HS_DIEPTXF1 @ offset=0x00000104
    union {
        __IO uint32_t OTG_HS_DIEPTXF1_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF1_bits;
    };

    // OTG_HS_DIEPTXF2 @ offset=0x00000108
    union {
        __IO uint32_t OTG_HS_DIEPTXF2_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF2_bits;
    };

    // OTG_HS_DIEPTXF3 @ offset=0x0000010C
    union {
        __IO uint32_t OTG_HS_DIEPTXF3_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF3_bits;
    };

    // OTG_HS_DIEPTXF4 @ offset=0x00000110
    union {
        __IO uint32_t OTG_HS_DIEPTXF4_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF4_bits;
    };

    // OTG_HS_DIEPTXF5 @ offset=0x00000114
    union {
        __IO uint32_t OTG_HS_DIEPTXF5_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF5_bits;
    };

    // OTG_HS_DIEPTXF6 @ offset=0x00000118
    union {
        __IO uint32_t OTG_HS_DIEPTXF6_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF6_bits;
    };

    // OTG_HS_DIEPTXF7 @ offset=0x0000011C
    union {
        __IO uint32_t OTG_HS_DIEPTXF7_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF7_bits;
    };

    // OTG_DIEPTXF8 @ offset=0x00000120
    union {
        __IO uint32_t OTG_DIEPTXF8_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_DIEPTXF8_bits;
    };

} otg1_hs_global_t;

// Peripheral OTG1_HS_HOST @ base_addess=0x40040400
typedef struct otg1_hs_host_t {

    // OTG_HS_HCFG @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_HCFG_reg;

        // bit fields
        struct {
            __IO uint32_t FSLSPCS_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSLSS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 29;
        } OTG_HS_HCFG_bits;
    };

    // OTG_HS_HFIR @ offset=0x00000004
    __IO uint32_t OTG_HS_HFIR_reg;

    // OTG_HS_HFNUM @ offset=0x00000008
    union {
        __IO uint32_t OTG_HS_HFNUM_reg;

        // bit fields
        struct {
            __IO uint32_t FRNUM_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t FTREM_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } OTG_HS_HFNUM_bits;
    };

    __IO uint8_t RESERVED0[4];

    // OTG_HS_HPTXSTS @ offset=0x00000010
    union {
        __IO uint32_t OTG_HS_HPTXSTS_reg;

        // bit fields
        struct {
            __IO uint32_t PTXFSAVL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXQSAV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t PTXQTOP_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } OTG_HS_HPTXSTS_bits;
    };

    // OTG_HS_HAINT @ offset=0x00000014
    __IO uint32_t OTG_HS_HAINT_reg;

    // OTG_HS_HAINTMSK @ offset=0x00000018
    __IO uint32_t OTG_HS_HAINTMSK_reg;

    __IO uint8_t RESERVED1[36];

    // OTG_HS_HPRT @ offset=0x00000040
    union {
        __IO uint32_t OTG_HS_HPRT_reg;

        // bit fields
        struct {
            __IO uint32_t PCSTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PCDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PENA_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PENCHNG_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t POCA_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t POCCHNG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRES_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSUSP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PLSTS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t PPWR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTCTL_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSPD_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } OTG_HS_HPRT_bits;
    };

    __IO uint8_t RESERVED2[188];

    // OTG_HS_HCCHAR0 @ offset=0x00000100
    union {
        __IO uint32_t OTG_HS_HCCHAR0_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR0_bits;
    };

    // OTG_HS_HCSPLT0 @ offset=0x00000104
    union {
        __IO uint32_t OTG_HS_HCSPLT0_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT0_bits;
    };

    // OTG_HS_HCINT0 @ offset=0x00000108
    union {
        __IO uint32_t OTG_HS_HCINT0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT0_bits;
    };

    // OTG_HS_HCINTMSK0 @ offset=0x0000010C
    union {
        __IO uint32_t OTG_HS_HCINTMSK0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK0_bits;
    };

    // OTG_HS_HCTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t OTG_HS_HCTSIZ0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ0_bits;
    };

    // OTG_HS_HCDMA0 @ offset=0x00000114
    __IO uint32_t OTG_HS_HCDMA0_reg;

    __IO uint8_t RESERVED3[8];

    // OTG_HS_HCCHAR1 @ offset=0x00000120
    union {
        __IO uint32_t OTG_HS_HCCHAR1_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR1_bits;
    };

    // OTG_HS_HCSPLT1 @ offset=0x00000124
    union {
        __IO uint32_t OTG_HS_HCSPLT1_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT1_bits;
    };

    // OTG_HS_HCINT1 @ offset=0x00000128
    union {
        __IO uint32_t OTG_HS_HCINT1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT1_bits;
    };

    // OTG_HS_HCINTMSK1 @ offset=0x0000012C
    union {
        __IO uint32_t OTG_HS_HCINTMSK1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK1_bits;
    };

    // OTG_HS_HCTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t OTG_HS_HCTSIZ1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ1_bits;
    };

    // OTG_HS_HCDMA1 @ offset=0x00000134
    __IO uint32_t OTG_HS_HCDMA1_reg;

    __IO uint8_t RESERVED4[8];

    // OTG_HS_HCCHAR2 @ offset=0x00000140
    union {
        __IO uint32_t OTG_HS_HCCHAR2_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR2_bits;
    };

    // OTG_HS_HCSPLT2 @ offset=0x00000144
    union {
        __IO uint32_t OTG_HS_HCSPLT2_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT2_bits;
    };

    // OTG_HS_HCINT2 @ offset=0x00000148
    union {
        __IO uint32_t OTG_HS_HCINT2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT2_bits;
    };

    // OTG_HS_HCINTMSK2 @ offset=0x0000014C
    union {
        __IO uint32_t OTG_HS_HCINTMSK2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK2_bits;
    };

    // OTG_HS_HCTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t OTG_HS_HCTSIZ2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ2_bits;
    };

    // OTG_HS_HCDMA2 @ offset=0x00000154
    __IO uint32_t OTG_HS_HCDMA2_reg;

    __IO uint8_t RESERVED5[8];

    // OTG_HS_HCCHAR3 @ offset=0x00000160
    union {
        __IO uint32_t OTG_HS_HCCHAR3_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR3_bits;
    };

    // OTG_HS_HCSPLT3 @ offset=0x00000164
    union {
        __IO uint32_t OTG_HS_HCSPLT3_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT3_bits;
    };

    // OTG_HS_HCINT3 @ offset=0x00000168
    union {
        __IO uint32_t OTG_HS_HCINT3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT3_bits;
    };

    // OTG_HS_HCINTMSK3 @ offset=0x0000016C
    union {
        __IO uint32_t OTG_HS_HCINTMSK3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK3_bits;
    };

    // OTG_HS_HCTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t OTG_HS_HCTSIZ3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ3_bits;
    };

    // OTG_HS_HCDMA3 @ offset=0x00000174
    __IO uint32_t OTG_HS_HCDMA3_reg;

    __IO uint8_t RESERVED6[8];

    // OTG_HS_HCCHAR4 @ offset=0x00000180
    union {
        __IO uint32_t OTG_HS_HCCHAR4_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR4_bits;
    };

    // OTG_HS_HCSPLT4 @ offset=0x00000184
    union {
        __IO uint32_t OTG_HS_HCSPLT4_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT4_bits;
    };

    // OTG_HS_HCINT4 @ offset=0x00000188
    union {
        __IO uint32_t OTG_HS_HCINT4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT4_bits;
    };

    // OTG_HS_HCINTMSK4 @ offset=0x0000018C
    union {
        __IO uint32_t OTG_HS_HCINTMSK4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK4_bits;
    };

    // OTG_HS_HCTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t OTG_HS_HCTSIZ4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ4_bits;
    };

    // OTG_HS_HCDMA4 @ offset=0x00000194
    __IO uint32_t OTG_HS_HCDMA4_reg;

    __IO uint8_t RESERVED7[8];

    // OTG_HS_HCCHAR5 @ offset=0x000001A0
    union {
        __IO uint32_t OTG_HS_HCCHAR5_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR5_bits;
    };

    // OTG_HS_HCSPLT5 @ offset=0x000001A4
    union {
        __IO uint32_t OTG_HS_HCSPLT5_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT5_bits;
    };

    // OTG_HS_HCINT5 @ offset=0x000001A8
    union {
        __IO uint32_t OTG_HS_HCINT5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT5_bits;
    };

    // OTG_HS_HCINTMSK5 @ offset=0x000001AC
    union {
        __IO uint32_t OTG_HS_HCINTMSK5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK5_bits;
    };

    // OTG_HS_HCTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t OTG_HS_HCTSIZ5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ5_bits;
    };

    // OTG_HS_HCDMA5 @ offset=0x000001B4
    __IO uint32_t OTG_HS_HCDMA5_reg;

    __IO uint8_t RESERVED8[8];

    // OTG_HS_HCCHAR6 @ offset=0x000001C0
    union {
        __IO uint32_t OTG_HS_HCCHAR6_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR6_bits;
    };

    // OTG_HS_HCSPLT6 @ offset=0x000001C4
    union {
        __IO uint32_t OTG_HS_HCSPLT6_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT6_bits;
    };

    // OTG_HS_HCINT6 @ offset=0x000001C8
    union {
        __IO uint32_t OTG_HS_HCINT6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT6_bits;
    };

    // OTG_HS_HCINTMSK6 @ offset=0x000001CC
    union {
        __IO uint32_t OTG_HS_HCINTMSK6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK6_bits;
    };

    // OTG_HS_HCTSIZ6 @ offset=0x000001D0
    union {
        __IO uint32_t OTG_HS_HCTSIZ6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ6_bits;
    };

    // OTG_HS_HCDMA6 @ offset=0x000001D4
    __IO uint32_t OTG_HS_HCDMA6_reg;

    __IO uint8_t RESERVED9[8];

    // OTG_HS_HCCHAR7 @ offset=0x000001E0
    union {
        __IO uint32_t OTG_HS_HCCHAR7_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR7_bits;
    };

    // OTG_HS_HCSPLT7 @ offset=0x000001E4
    union {
        __IO uint32_t OTG_HS_HCSPLT7_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT7_bits;
    };

    // OTG_HS_HCINT7 @ offset=0x000001E8
    union {
        __IO uint32_t OTG_HS_HCINT7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT7_bits;
    };

    // OTG_HS_HCINTMSK7 @ offset=0x000001EC
    union {
        __IO uint32_t OTG_HS_HCINTMSK7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK7_bits;
    };

    // OTG_HS_HCTSIZ7 @ offset=0x000001F0
    union {
        __IO uint32_t OTG_HS_HCTSIZ7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ7_bits;
    };

    // OTG_HS_HCDMA7 @ offset=0x000001F4
    __IO uint32_t OTG_HS_HCDMA7_reg;

    __IO uint8_t RESERVED10[8];

    // OTG_HS_HCCHAR8 @ offset=0x00000200
    union {
        __IO uint32_t OTG_HS_HCCHAR8_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR8_bits;
    };

    // OTG_HS_HCSPLT8 @ offset=0x00000204
    union {
        __IO uint32_t OTG_HS_HCSPLT8_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT8_bits;
    };

    // OTG_HS_HCINT8 @ offset=0x00000208
    union {
        __IO uint32_t OTG_HS_HCINT8_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT8_bits;
    };

    // OTG_HS_HCINTMSK8 @ offset=0x0000020C
    union {
        __IO uint32_t OTG_HS_HCINTMSK8_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK8_bits;
    };

    // OTG_HS_HCTSIZ8 @ offset=0x00000210
    union {
        __IO uint32_t OTG_HS_HCTSIZ8_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ8_bits;
    };

    // OTG_HS_HCDMA8 @ offset=0x00000214
    __IO uint32_t OTG_HS_HCDMA8_reg;

    __IO uint8_t RESERVED11[8];

    // OTG_HS_HCCHAR9 @ offset=0x00000220
    union {
        __IO uint32_t OTG_HS_HCCHAR9_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR9_bits;
    };

    // OTG_HS_HCSPLT9 @ offset=0x00000224
    union {
        __IO uint32_t OTG_HS_HCSPLT9_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT9_bits;
    };

    // OTG_HS_HCINT9 @ offset=0x00000228
    union {
        __IO uint32_t OTG_HS_HCINT9_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT9_bits;
    };

    // OTG_HS_HCINTMSK9 @ offset=0x0000022C
    union {
        __IO uint32_t OTG_HS_HCINTMSK9_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK9_bits;
    };

    // OTG_HS_HCTSIZ9 @ offset=0x00000230
    union {
        __IO uint32_t OTG_HS_HCTSIZ9_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ9_bits;
    };

    // OTG_HS_HCDMA9 @ offset=0x00000234
    __IO uint32_t OTG_HS_HCDMA9_reg;

    __IO uint8_t RESERVED12[8];

    // OTG_HS_HCCHAR10 @ offset=0x00000240
    union {
        __IO uint32_t OTG_HS_HCCHAR10_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR10_bits;
    };

    // OTG_HS_HCSPLT10 @ offset=0x00000244
    union {
        __IO uint32_t OTG_HS_HCSPLT10_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT10_bits;
    };

    // OTG_HS_HCINT10 @ offset=0x00000248
    union {
        __IO uint32_t OTG_HS_HCINT10_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT10_bits;
    };

    // OTG_HS_HCINTMSK10 @ offset=0x0000024C
    union {
        __IO uint32_t OTG_HS_HCINTMSK10_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK10_bits;
    };

    // OTG_HS_HCTSIZ10 @ offset=0x00000250
    union {
        __IO uint32_t OTG_HS_HCTSIZ10_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ10_bits;
    };

    // OTG_HS_HCDMA10 @ offset=0x00000254
    __IO uint32_t OTG_HS_HCDMA10_reg;

    __IO uint8_t RESERVED13[8];

    // OTG_HS_HCCHAR11 @ offset=0x00000260
    union {
        __IO uint32_t OTG_HS_HCCHAR11_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR11_bits;
    };

    // OTG_HS_HCSPLT11 @ offset=0x00000264
    union {
        __IO uint32_t OTG_HS_HCSPLT11_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT11_bits;
    };

    // OTG_HS_HCINT11 @ offset=0x00000268
    union {
        __IO uint32_t OTG_HS_HCINT11_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT11_bits;
    };

    // OTG_HS_HCINTMSK11 @ offset=0x0000026C
    union {
        __IO uint32_t OTG_HS_HCINTMSK11_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK11_bits;
    };

    // OTG_HS_HCTSIZ11 @ offset=0x00000270
    union {
        __IO uint32_t OTG_HS_HCTSIZ11_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ11_bits;
    };

    // OTG_HS_HCDMA11 @ offset=0x00000274
    __IO uint32_t OTG_HS_HCDMA11_reg;

    // OTG_HS_HCCHAR12 @ offset=0x00000278
    union {
        __IO uint32_t OTG_HS_HCCHAR12_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR12_bits;
    };

    // OTG_HS_HCSPLT12 @ offset=0x0000027C
    union {
        __IO uint32_t OTG_HS_HCSPLT12_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT12_bits;
    };

    // OTG_HS_HCINT12 @ offset=0x00000280
    union {
        __IO uint32_t OTG_HS_HCINT12_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT12_bits;
    };

    // OTG_HS_HCINTMSK12 @ offset=0x00000284
    union {
        __IO uint32_t OTG_HS_HCINTMSK12_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK12_bits;
    };

    // OTG_HS_HCTSIZ12 @ offset=0x00000288
    union {
        __IO uint32_t OTG_HS_HCTSIZ12_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ12_bits;
    };

    // OTG_HS_HCDMA12 @ offset=0x0000028C
    __IO uint32_t OTG_HS_HCDMA12_reg;

    // OTG_HS_HCCHAR13 @ offset=0x00000290
    union {
        __IO uint32_t OTG_HS_HCCHAR13_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR13_bits;
    };

    // OTG_HS_HCSPLT13 @ offset=0x00000294
    union {
        __IO uint32_t OTG_HS_HCSPLT13_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT13_bits;
    };

    // OTG_HS_HCINT13 @ offset=0x00000298
    union {
        __IO uint32_t OTG_HS_HCINT13_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT13_bits;
    };

    // OTG_HS_HCINTMSK13 @ offset=0x0000029C
    union {
        __IO uint32_t OTG_HS_HCINTMSK13_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK13_bits;
    };

    // OTG_HS_HCTSIZ13 @ offset=0x000002A0
    union {
        __IO uint32_t OTG_HS_HCTSIZ13_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ13_bits;
    };

    // OTG_HS_HCDMA13 @ offset=0x000002A4
    __IO uint32_t OTG_HS_HCDMA13_reg;

    // OTG_HS_HCCHAR14 @ offset=0x000002A8
    union {
        __IO uint32_t OTG_HS_HCCHAR14_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR14_bits;
    };

    // OTG_HS_HCSPLT14 @ offset=0x000002AC
    union {
        __IO uint32_t OTG_HS_HCSPLT14_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT14_bits;
    };

    // OTG_HS_HCINT14 @ offset=0x000002B0
    union {
        __IO uint32_t OTG_HS_HCINT14_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT14_bits;
    };

    // OTG_HS_HCINTMSK14 @ offset=0x000002B4
    union {
        __IO uint32_t OTG_HS_HCINTMSK14_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK14_bits;
    };

    // OTG_HS_HCTSIZ14 @ offset=0x000002B8
    union {
        __IO uint32_t OTG_HS_HCTSIZ14_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ14_bits;
    };

    // OTG_HS_HCDMA14 @ offset=0x000002BC
    __IO uint32_t OTG_HS_HCDMA14_reg;

    // OTG_HS_HCCHAR15 @ offset=0x000002C0
    union {
        __IO uint32_t OTG_HS_HCCHAR15_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR15_bits;
    };

    // OTG_HS_HCSPLT15 @ offset=0x000002C4
    union {
        __IO uint32_t OTG_HS_HCSPLT15_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT15_bits;
    };

    // OTG_HS_HCINT15 @ offset=0x000002C8
    union {
        __IO uint32_t OTG_HS_HCINT15_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT15_bits;
    };

    // OTG_HS_HCINTMSK15 @ offset=0x000002CC
    union {
        __IO uint32_t OTG_HS_HCINTMSK15_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK15_bits;
    };

    // OTG_HS_HCTSIZ15 @ offset=0x000002D0
    union {
        __IO uint32_t OTG_HS_HCTSIZ15_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ15_bits;
    };

    // OTG_HS_HCDMA15 @ offset=0x000002D4
    __IO uint32_t OTG_HS_HCDMA15_reg;

} otg1_hs_host_t;

// Peripheral OTG1_HS_PWRCLK @ base_addess=0x40040E00
typedef struct otg1_hs_pwrclk_t {

    // OTG_HS_PCGCR @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_PCGCR_reg;

        // bit fields
        struct {
            __IO uint32_t STPPCLK_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GATEHCLK_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PHYSUSP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 27;
        } OTG_HS_PCGCR_bits;
    };

} otg1_hs_pwrclk_t;

// Peripheral OTG2_HS_DEVICE @ base_addess=0x40080800
typedef struct otg2_hs_device_t {

    // OTG_HS_DCFG @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_DCFG_reg;

        // bit fields
        struct {
            __IO uint32_t DSPD_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NZLSOHSK_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DAD_bit : 7; // bit offset=4  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t PFIVL_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 11;
            __IO uint32_t PERSCHIVL_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } OTG_HS_DCFG_bits;
    };

    // OTG_HS_DCTL @ offset=0x00000004
    union {
        __IO uint32_t OTG_HS_DCTL_reg;

        // bit fields
        struct {
            __IO uint32_t RWUSIG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GINSTS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GONSTS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCTL_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SGINAK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGINAK_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SGONAK_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CGONAK_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t POPRGDNE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 20;
        } OTG_HS_DCTL_bits;
    };

    // OTG_HS_DSTS @ offset=0x00000008
    union {
        __IO uint32_t OTG_HS_DSTS_reg;

        // bit fields
        struct {
            __IO uint32_t SUSPSTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ENUMSPD_bit : 2; // bit offset=1  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t EERR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t FNSOF_bit : 14; // bit offset=8  bit width=14  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 10;
        } OTG_HS_DSTS_bits;
    };

    __IO uint8_t RESERVED0[4];

    // OTG_HS_DIEPMSK @ offset=0x00000010
    union {
        __IO uint32_t OTG_HS_DIEPMSK_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFEMSK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPNMM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPNEM_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t TXFURM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 22;
        } OTG_HS_DIEPMSK_bits;
    };

    // OTG_HS_DOEPMSK @ offset=0x00000014
    union {
        __IO uint32_t OTG_HS_DOEPMSK_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t OPEM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOIM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 22;
        } OTG_HS_DOEPMSK_bits;
    };

    // OTG_HS_DAINT @ offset=0x00000018
    union {
        __IO uint32_t OTG_HS_DAINT_reg;

        // bit fields
        struct {
            __IO uint32_t IEPINT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t OEPINT_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } OTG_HS_DAINT_bits;
    };

    // OTG_HS_DAINTMSK @ offset=0x0000001C
    union {
        __IO uint32_t OTG_HS_DAINTMSK_reg;

        // bit fields
        struct {
            __IO uint32_t IEPM_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t OEPM_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DAINTMSK_bits;
    };

    __IO uint8_t RESERVED1[8];

    // OTG_HS_DVBUSDIS @ offset=0x00000028
    __IO uint32_t OTG_HS_DVBUSDIS_reg;

    // OTG_HS_DVBUSPULSE @ offset=0x0000002C
    __IO uint32_t OTG_HS_DVBUSPULSE_reg;

    // OTG_HS_DTHRCTL @ offset=0x00000030
    union {
        __IO uint32_t OTG_HS_DTHRCTL_reg;

        // bit fields
        struct {
            __IO uint32_t NONISOTHREN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISOTHREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTHRLEN_bit : 9; // bit offset=2  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t RXTHREN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXTHRLEN_bit : 9; // bit offset=17  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t ARPEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 4;
        } OTG_HS_DTHRCTL_bits;
    };

    // OTG_HS_DIEPEMPMSK @ offset=0x00000034
    __IO uint32_t OTG_HS_DIEPEMPMSK_reg;

    // OTG_HS_DEACHINT @ offset=0x00000038
    union {
        __IO uint32_t OTG_HS_DEACHINT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t IEP1INT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 15;
            __IO uint32_t OEP1INT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } OTG_HS_DEACHINT_bits;
    };

    // OTG_HS_DEACHINTMSK @ offset=0x0000003C
    union {
        __IO uint32_t OTG_HS_DEACHINTMSK_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t IEP1INTM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 15;
            __IO uint32_t OEP1INTM_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } OTG_HS_DEACHINTMSK_bits;
    };

    __IO uint8_t RESERVED2[192];

    // OTG_HS_DIEPCTL0 @ offset=0x00000100
    union {
        __IO uint32_t OTG_HS_DIEPCTL0_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL0_bits;
    };

    __IO uint8_t RESERVED3[4];

    // OTG_HS_DIEPINT0 @ offset=0x00000108
    union {
        __IO uint32_t OTG_HS_DIEPINT0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT0_bits;
    };

    __IO uint8_t RESERVED4[4];

    // OTG_HS_DIEPTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t PKTCNT_bit : 2; // bit offset=19  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 11;
        } OTG_HS_DIEPTSIZ0_bits;
    };

    // OTG_HS_DIEPDMA1 @ offset=0x00000114
    __IO uint32_t OTG_HS_DIEPDMA1_reg;

    // OTG_HS_DTXFSTS0 @ offset=0x00000118
    __IO uint32_t OTG_HS_DTXFSTS0_reg;

    __IO uint8_t RESERVED5[4];

    // OTG_HS_DIEPCTL1 @ offset=0x00000120
    union {
        __IO uint32_t OTG_HS_DIEPCTL1_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL1_bits;
    };

    __IO uint8_t RESERVED6[4];

    // OTG_HS_DIEPINT1 @ offset=0x00000128
    union {
        __IO uint32_t OTG_HS_DIEPINT1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT1_bits;
    };

    __IO uint8_t RESERVED7[4];

    // OTG_HS_DIEPTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ1_bits;
    };

    // OTG_HS_DIEPDMA2 @ offset=0x00000134
    __IO uint32_t OTG_HS_DIEPDMA2_reg;

    // OTG_HS_DTXFSTS1 @ offset=0x00000138
    __IO uint32_t OTG_HS_DTXFSTS1_reg;

    __IO uint8_t RESERVED8[4];

    // OTG_HS_DIEPCTL2 @ offset=0x00000140
    union {
        __IO uint32_t OTG_HS_DIEPCTL2_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL2_bits;
    };

    __IO uint8_t RESERVED9[4];

    // OTG_HS_DIEPINT2 @ offset=0x00000148
    union {
        __IO uint32_t OTG_HS_DIEPINT2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT2_bits;
    };

    __IO uint8_t RESERVED10[4];

    // OTG_HS_DIEPTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ2_bits;
    };

    // OTG_HS_DIEPDMA3 @ offset=0x00000154
    __IO uint32_t OTG_HS_DIEPDMA3_reg;

    // OTG_HS_DTXFSTS2 @ offset=0x00000158
    __IO uint32_t OTG_HS_DTXFSTS2_reg;

    __IO uint8_t RESERVED11[4];

    // OTG_HS_DIEPCTL3 @ offset=0x00000160
    union {
        __IO uint32_t OTG_HS_DIEPCTL3_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL3_bits;
    };

    __IO uint8_t RESERVED12[4];

    // OTG_HS_DIEPINT3 @ offset=0x00000168
    union {
        __IO uint32_t OTG_HS_DIEPINT3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT3_bits;
    };

    __IO uint8_t RESERVED13[4];

    // OTG_HS_DIEPTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ3_bits;
    };

    // OTG_HS_DIEPDMA4 @ offset=0x00000174
    __IO uint32_t OTG_HS_DIEPDMA4_reg;

    // OTG_HS_DTXFSTS3 @ offset=0x00000178
    __IO uint32_t OTG_HS_DTXFSTS3_reg;

    __IO uint8_t RESERVED14[4];

    // OTG_HS_DIEPCTL4 @ offset=0x00000180
    union {
        __IO uint32_t OTG_HS_DIEPCTL4_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL4_bits;
    };

    __IO uint8_t RESERVED15[4];

    // OTG_HS_DIEPINT4 @ offset=0x00000188
    union {
        __IO uint32_t OTG_HS_DIEPINT4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT4_bits;
    };

    __IO uint8_t RESERVED16[4];

    // OTG_HS_DIEPTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ4_bits;
    };

    // OTG_HS_DIEPDMA5 @ offset=0x00000194
    __IO uint32_t OTG_HS_DIEPDMA5_reg;

    // OTG_HS_DTXFSTS4 @ offset=0x00000198
    __IO uint32_t OTG_HS_DTXFSTS4_reg;

    union {
    __IO uint8_t RESERVED17[4];

        // OTG_HS_DIEPCTL5 @ offset=0x000001A0
        union {
            __IO uint32_t OTG_HS_DIEPCTL5_reg;

            // bit fields
            struct {
                __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 4;
                __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1: 1;
                __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
                __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
            } OTG_HS_DIEPCTL5_bits;
        };

        // OTG_HS_DIEPTSIZ6 @ offset=0x000001A0
        union {
            __IO uint32_t OTG_HS_DIEPTSIZ6_reg;

            // bit fields
            struct {
                __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 1;
            } OTG_HS_DIEPTSIZ6_bits;
        };

    };

    // OTG_HS_DTXFSTS6 @ offset=0x000001A4
    __IO uint32_t OTG_HS_DTXFSTS6_reg;

    union {
        // OTG_HS_DIEPINT5 @ offset=0x000001A8
        union {
            __IO uint32_t OTG_HS_DIEPINT5_reg;

            // bit fields
            struct {
                __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 1;
                __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1: 1;
                __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED2: 1;
                __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED3 : 18;
            } OTG_HS_DIEPINT5_bits;
        };

        // OTG_HS_DIEPTSIZ7 @ offset=0x000001A8
        union {
            __IO uint32_t OTG_HS_DIEPTSIZ7_reg;

            // bit fields
            struct {
                __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
                __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
                __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 1;
            } OTG_HS_DIEPTSIZ7_bits;
        };

    };

    // OTG_HS_DTXFSTS7 @ offset=0x000001AC
    __IO uint32_t OTG_HS_DTXFSTS7_reg;

    // OTG_HS_DIEPTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t OTG_HS_DIEPTSIZ5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DIEPTSIZ5_bits;
    };

    __IO uint8_t RESERVED18[4];

    // OTG_HS_DTXFSTS5 @ offset=0x000001B8
    __IO uint32_t OTG_HS_DTXFSTS5_reg;

    __IO uint8_t RESERVED19[4];

    // OTG_HS_DIEPCTL6 @ offset=0x000001C0
    union {
        __IO uint32_t OTG_HS_DIEPCTL6_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL6_bits;
    };

    __IO uint8_t RESERVED20[4];

    // OTG_HS_DIEPINT6 @ offset=0x000001C8
    union {
        __IO uint32_t OTG_HS_DIEPINT6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT6_bits;
    };

    __IO uint8_t RESERVED21[20];

    // OTG_HS_DIEPCTL7 @ offset=0x000001E0
    union {
        __IO uint32_t OTG_HS_DIEPCTL7_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 4; // bit offset=22  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPCTL7_bits;
    };

    __IO uint8_t RESERVED22[4];

    // OTG_HS_DIEPINT7 @ offset=0x000001E8
    union {
        __IO uint32_t OTG_HS_DIEPINT7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TOC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITTXFE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t INEPNE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOUDRN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BNA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PKTDRPSTS_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BERR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } OTG_HS_DIEPINT7_bits;
    };

    __IO uint8_t RESERVED23[276];

    // OTG_HS_DOEPCTL0 @ offset=0x00000300
    union {
        __IO uint32_t OTG_HS_DOEPCTL0_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } OTG_HS_DOEPCTL0_bits;
    };

    __IO uint8_t RESERVED24[4];

    // OTG_HS_DOEPINT0 @ offset=0x00000308
    union {
        __IO uint32_t OTG_HS_DOEPINT0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT0_bits;
    };

    __IO uint8_t RESERVED25[4];

    // OTG_HS_DOEPTSIZ0 @ offset=0x00000310
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t PKTCNT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 1;
        } OTG_HS_DOEPTSIZ0_bits;
    };

    __IO uint8_t RESERVED26[12];

    // OTG_HS_DOEPCTL1 @ offset=0x00000320
    union {
        __IO uint32_t OTG_HS_DOEPCTL1_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL1_bits;
    };

    __IO uint8_t RESERVED27[4];

    // OTG_HS_DOEPINT1 @ offset=0x00000328
    union {
        __IO uint32_t OTG_HS_DOEPINT1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT1_bits;
    };

    __IO uint8_t RESERVED28[4];

    // OTG_HS_DOEPTSIZ1 @ offset=0x00000330
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ1_bits;
    };

    __IO uint8_t RESERVED29[12];

    // OTG_HS_DOEPCTL2 @ offset=0x00000340
    union {
        __IO uint32_t OTG_HS_DOEPCTL2_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL2_bits;
    };

    __IO uint8_t RESERVED30[4];

    // OTG_HS_DOEPINT2 @ offset=0x00000348
    union {
        __IO uint32_t OTG_HS_DOEPINT2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT2_bits;
    };

    __IO uint8_t RESERVED31[4];

    // OTG_HS_DOEPTSIZ2 @ offset=0x00000350
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ2_bits;
    };

    __IO uint8_t RESERVED32[12];

    // OTG_HS_DOEPCTL3 @ offset=0x00000360
    union {
        __IO uint32_t OTG_HS_DOEPCTL3_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL3_bits;
    };

    __IO uint8_t RESERVED33[4];

    // OTG_HS_DOEPINT3 @ offset=0x00000368
    union {
        __IO uint32_t OTG_HS_DOEPINT3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT3_bits;
    };

    __IO uint8_t RESERVED34[4];

    // OTG_HS_DOEPTSIZ3 @ offset=0x00000370
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ3_bits;
    };

    __IO uint8_t RESERVED35[12];

    // OTG_HS_DOEPCTL4 @ offset=0x00000380
    union {
        __IO uint32_t OTG_HS_DOEPCTL4_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL4_bits;
    };

    __IO uint8_t RESERVED36[4];

    // OTG_HS_DOEPINT4 @ offset=0x00000388
    union {
        __IO uint32_t OTG_HS_DOEPINT4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT4_bits;
    };

    __IO uint8_t RESERVED37[4];

    // OTG_HS_DOEPTSIZ4 @ offset=0x00000390
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ4_bits;
    };

    __IO uint8_t RESERVED38[12];

    // OTG_HS_DOEPCTL5 @ offset=0x000003A0
    union {
        __IO uint32_t OTG_HS_DOEPCTL5_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL5_bits;
    };

    __IO uint8_t RESERVED39[4];

    // OTG_HS_DOEPINT5 @ offset=0x000003A8
    union {
        __IO uint32_t OTG_HS_DOEPINT5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT5_bits;
    };

    __IO uint8_t RESERVED40[4];

    // OTG_HS_DOEPTSIZ5 @ offset=0x000003B0
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ5_bits;
    };

    __IO uint8_t RESERVED41[12];

    // OTG_HS_DOEPCTL6 @ offset=0x000003C0
    union {
        __IO uint32_t OTG_HS_DOEPCTL6_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL6_bits;
    };

    __IO uint8_t RESERVED42[4];

    // OTG_HS_DOEPINT6 @ offset=0x000003C8
    union {
        __IO uint32_t OTG_HS_DOEPINT6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT6_bits;
    };

    __IO uint8_t RESERVED43[4];

    // OTG_HS_DOEPTSIZ6 @ offset=0x000003D0
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ6_bits;
    };

    __IO uint8_t RESERVED44[12];

    // OTG_HS_DOEPCTL7 @ offset=0x000003E0
    union {
        __IO uint32_t OTG_HS_DOEPCTL7_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t USBAEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EONUM_DPID_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NAKSTS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNPM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t CNAK_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SNAK_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SD0PID_SEVNFRM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EPDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_DOEPCTL7_bits;
    };

    __IO uint8_t RESERVED45[4];

    // OTG_HS_DOEPINT7 @ offset=0x000003E8
    union {
        __IO uint32_t OTG_HS_DOEPINT7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDISD_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t STUP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTEPDIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t B2BSTUP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t NYET_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } OTG_HS_DOEPINT7_bits;
    };

    __IO uint8_t RESERVED46[4];

    // OTG_HS_DOEPTSIZ7 @ offset=0x000003F0
    union {
        __IO uint32_t OTG_HS_DOEPTSIZ7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDPID_STUPCNT_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_DOEPTSIZ7_bits;
    };

} otg2_hs_device_t;

// Peripheral OTG2_HS_GLOBAL @ base_addess=0x40080000
typedef struct otg2_hs_global_t {

    // OTG_HS_GOTGCTL @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_GOTGCTL_reg;

        // bit fields
        struct {
            __IO uint32_t SRQSCS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBVALOEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBVALOVAL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AVALOEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AVALOVAL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BVALOEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BVALOVAL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HNGSCS_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HNPRQ_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSHNPEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DHNPEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EHEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CIDSTS_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DBCT_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ASVLD_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BSVLD_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OTGVER_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CURMOD_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 10;
        } OTG_HS_GOTGCTL_bits;
    };

    // OTG_HS_GOTGINT @ offset=0x00000004
    union {
        __IO uint32_t OTG_HS_GOTGINT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SEDET_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t SRSSCHG_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HNSSCHG_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t HNGDET_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADTOCHG_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBCDNE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDCHNG_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 11;
        } OTG_HS_GOTGINT_bits;
    };

    // OTG_HS_GAHBCFG @ offset=0x00000008
    union {
        __IO uint32_t OTG_HS_GAHBCFG_reg;

        // bit fields
        struct {
            __IO uint32_t GINT_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HBSTLEN_bit : 4; // bit offset=1  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TXFELVL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXFELVL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 23;
        } OTG_HS_GAHBCFG_bits;
    };

    // OTG_HS_GUSBCFG @ offset=0x0000000C
    union {
        __IO uint32_t OTG_HS_GUSBCFG_reg;

        // bit fields
        struct {
            __IO uint32_t TOCAL_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t PHYSEL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SRPCAP_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HNPCAP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TRDT_bit : 4; // bit offset=10  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t PHYLPCS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t ULPIFSLS_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIAR_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPICSM_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIEVBUSD_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIEVBUSI_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSDPS_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCCI_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTCI_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ULPIIPD_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 3;
            __IO uint32_t FHMOD_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FDMOD_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 1;
        } OTG_HS_GUSBCFG_bits;
    };

    // OTG_HS_GRSTCTL @ offset=0x00000010
    union {
        __IO uint32_t OTG_HS_GRSTCTL_reg;

        // bit fields
        struct {
            __IO uint32_t CSRST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSRST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FCRST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXFFLSH_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFFLSH_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFNUM_bit : 5; // bit offset=6  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 19;
            __IO uint32_t DMAREQ_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AHBIDL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } OTG_HS_GRSTCTL_bits;
    };

    // OTG_HS_GINTSTS @ offset=0x00000014
    union {
        __IO uint32_t OTG_HS_GINTSTS_reg;

        // bit fields
        struct {
            __IO uint32_t CMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MMIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTGINT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFLVL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NPTXFE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t GINAKEFF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BOUTNAKEFF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ESUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBSUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBRST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENUMDNE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISOODRP_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOPF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t IEPINT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OEPINT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IISOIXFR_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PXFR_INCOMPISOOUT_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAFSUSP_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t HPRTINT_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HCINT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PTXFE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CIDSCHG_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCINT_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRQINT_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUINT_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_GINTSTS_bits;
    };

    // OTG_HS_GINTMSK @ offset=0x00000018
    union {
        __IO uint32_t OTG_HS_GINTMSK_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MMISM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OTGINT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SOFM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFLVLM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NPTXFEM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GINAKEFFM_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GONAKEFFM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t ESUSPM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBSUSPM_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBRST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ENUMDNEM_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ISOODRPM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOPFM_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t IEPINT_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OEPINT_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IISOIXFRM_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PXFRM_IISOOXFRM_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSUSPM_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RSTDE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTIM_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t HCIM_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXFEM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMINTM_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CIDSCHGM_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DISCINT_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRQIM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUIM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_GINTMSK_bits;
    };

    union {
        // OTG_HS_GRXSTSR_Host @ offset=0x0000001C
        union {
            __IO uint32_t OTG_HS_GRXSTSR_HOST_reg;

            // bit fields
            struct {
                __IO uint32_t CHNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 11;
            } OTG_HS_GRXSTSR_HOST_bits;
        };

        // OTG_HS_GRXSTSR_Device @ offset=0x0000001C
        union {
            __IO uint32_t OTG_HS_GRXSTSR_DEVICE_reg;

            // bit fields
            struct {
                __IO uint32_t EPNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t FRMNUM_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 7;
            } OTG_HS_GRXSTSR_DEVICE_bits;
        };

    };

    union {
        // OTG_HS_GRXSTSP_Host @ offset=0x00000020
        union {
            __IO uint32_t OTG_HS_GRXSTSP_HOST_reg;

            // bit fields
            struct {
                __IO uint32_t CHNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 11;
            } OTG_HS_GRXSTSP_HOST_bits;
        };

        // OTG_HS_GRXSTSP_Device @ offset=0x00000020
        union {
            __IO uint32_t OTG_HS_GRXSTSP_DEVICE_reg;

            // bit fields
            struct {
                __IO uint32_t EPNUM_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t BCNT_bit : 11; // bit offset=4  bit width=11  access=SVDAccessType.READ_ONLY
                __IO uint32_t DPID_bit : 2; // bit offset=15  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t PKTSTS_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t FRMNUM_bit : 4; // bit offset=21  bit width=4  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 7;
            } OTG_HS_GRXSTSP_DEVICE_bits;
        };

    };

    // OTG_HS_GRXFSIZ @ offset=0x00000024
    __IO uint32_t OTG_HS_GRXFSIZ_reg;

    union {
        // OTG_HS_HNPTXFSIZ_Host @ offset=0x00000028
        union {
            __IO uint32_t OTG_HS_HNPTXFSIZ_HOST_reg;

            // bit fields
            struct {
                __IO uint32_t NPTXFSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t NPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            } OTG_HS_HNPTXFSIZ_HOST_bits;
        };

        // OTG_HS_DIEPTXF0_Device @ offset=0x00000028
        union {
            __IO uint32_t OTG_HS_DIEPTXF0_DEVICE_reg;

            // bit fields
            struct {
                __IO uint32_t TX0FSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
                __IO uint32_t TX0FD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
            } OTG_HS_DIEPTXF0_DEVICE_bits;
        };

    };

    // OTG_HS_GNPTXSTS @ offset=0x0000002C
    union {
        __IO uint32_t OTG_HS_GNPTXSTS_reg;

        // bit fields
        struct {
            __IO uint32_t NPTXFSAV_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t NPTQXSAV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t NPTXQTOP_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_GNPTXSTS_bits;
    };

    __IO uint8_t RESERVED0[8];

    // OTG_HS_GCCFG @ offset=0x00000038
    union {
        __IO uint32_t OTG_HS_GCCFG_reg;

        // bit fields
        struct {
            __IO uint32_t DCDET_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDET_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS2DET_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 12;
            __IO uint32_t PWRDWN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BCDEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCDEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PDEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBDEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 10;
        } OTG_HS_GCCFG_bits;
    };

    // OTG_HS_CID @ offset=0x0000003C
    __IO uint32_t OTG_HS_CID_reg;

    __IO uint8_t RESERVED1[20];

    // OTG_HS_GLPMCFG @ offset=0x00000054
    union {
        __IO uint32_t OTG_HS_GLPMCFG_reg;

        // bit fields
        struct {
            __IO uint32_t LPMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMACK_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BESL_bit : 4; // bit offset=2  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t REMWAKE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t L1SSEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BESLTHRS_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t L1DSEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMRST_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t SLPSTS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t L1RSMOK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LPMCHIDX_bit : 4; // bit offset=17  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMRCNT_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SNDLPM_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPMRCNTSTS_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t ENBESL_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 3;
        } OTG_HS_GLPMCFG_bits;
    };

    __IO uint8_t RESERVED2[168];

    // OTG_HS_HPTXFSIZ @ offset=0x00000100
    union {
        __IO uint32_t OTG_HS_HPTXFSIZ_reg;

        // bit fields
        struct {
            __IO uint32_t PTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_HPTXFSIZ_bits;
    };

    // OTG_HS_DIEPTXF1 @ offset=0x00000104
    union {
        __IO uint32_t OTG_HS_DIEPTXF1_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF1_bits;
    };

    // OTG_HS_DIEPTXF2 @ offset=0x00000108
    union {
        __IO uint32_t OTG_HS_DIEPTXF2_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF2_bits;
    };

    // OTG_HS_DIEPTXF3 @ offset=0x0000010C
    union {
        __IO uint32_t OTG_HS_DIEPTXF3_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF3_bits;
    };

    // OTG_HS_DIEPTXF4 @ offset=0x00000110
    union {
        __IO uint32_t OTG_HS_DIEPTXF4_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF4_bits;
    };

    // OTG_HS_DIEPTXF5 @ offset=0x00000114
    union {
        __IO uint32_t OTG_HS_DIEPTXF5_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF5_bits;
    };

    // OTG_HS_DIEPTXF6 @ offset=0x00000118
    union {
        __IO uint32_t OTG_HS_DIEPTXF6_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF6_bits;
    };

    // OTG_HS_DIEPTXF7 @ offset=0x0000011C
    union {
        __IO uint32_t OTG_HS_DIEPTXF7_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_HS_DIEPTXF7_bits;
    };

    // OTG_DIEPTXF8 @ offset=0x00000120
    union {
        __IO uint32_t OTG_DIEPTXF8_reg;

        // bit fields
        struct {
            __IO uint32_t INEPTXSA_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t INEPTXFD_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } OTG_DIEPTXF8_bits;
    };

} otg2_hs_global_t;

// Peripheral OTG2_HS_HOST @ base_addess=0x40080400
typedef struct otg2_hs_host_t {

    // OTG_HS_HCFG @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_HCFG_reg;

        // bit fields
        struct {
            __IO uint32_t FSLSPCS_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSLSS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 29;
        } OTG_HS_HCFG_bits;
    };

    // OTG_HS_HFIR @ offset=0x00000004
    __IO uint32_t OTG_HS_HFIR_reg;

    // OTG_HS_HFNUM @ offset=0x00000008
    union {
        __IO uint32_t OTG_HS_HFNUM_reg;

        // bit fields
        struct {
            __IO uint32_t FRNUM_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t FTREM_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } OTG_HS_HFNUM_bits;
    };

    __IO uint8_t RESERVED0[4];

    // OTG_HS_HPTXSTS @ offset=0x00000010
    union {
        __IO uint32_t OTG_HS_HPTXSTS_reg;

        // bit fields
        struct {
            __IO uint32_t PTXFSAVL_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTXQSAV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t PTXQTOP_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_ONLY
        } OTG_HS_HPTXSTS_bits;
    };

    // OTG_HS_HAINT @ offset=0x00000014
    __IO uint32_t OTG_HS_HAINT_reg;

    // OTG_HS_HAINTMSK @ offset=0x00000018
    __IO uint32_t OTG_HS_HAINTMSK_reg;

    __IO uint8_t RESERVED1[36];

    // OTG_HS_HPRT @ offset=0x00000040
    union {
        __IO uint32_t OTG_HS_HPRT_reg;

        // bit fields
        struct {
            __IO uint32_t PCSTS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PCDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PENA_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PENCHNG_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t POCA_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t POCCHNG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRES_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSUSP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PLSTS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t PPWR_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTCTL_bit : 4; // bit offset=13  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t PSPD_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } OTG_HS_HPRT_bits;
    };

    __IO uint8_t RESERVED2[188];

    // OTG_HS_HCCHAR0 @ offset=0x00000100
    union {
        __IO uint32_t OTG_HS_HCCHAR0_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR0_bits;
    };

    // OTG_HS_HCSPLT0 @ offset=0x00000104
    union {
        __IO uint32_t OTG_HS_HCSPLT0_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT0_bits;
    };

    // OTG_HS_HCINT0 @ offset=0x00000108
    union {
        __IO uint32_t OTG_HS_HCINT0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT0_bits;
    };

    // OTG_HS_HCINTMSK0 @ offset=0x0000010C
    union {
        __IO uint32_t OTG_HS_HCINTMSK0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK0_bits;
    };

    // OTG_HS_HCTSIZ0 @ offset=0x00000110
    union {
        __IO uint32_t OTG_HS_HCTSIZ0_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ0_bits;
    };

    // OTG_HS_HCDMA0 @ offset=0x00000114
    __IO uint32_t OTG_HS_HCDMA0_reg;

    __IO uint8_t RESERVED3[8];

    // OTG_HS_HCCHAR1 @ offset=0x00000120
    union {
        __IO uint32_t OTG_HS_HCCHAR1_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR1_bits;
    };

    // OTG_HS_HCSPLT1 @ offset=0x00000124
    union {
        __IO uint32_t OTG_HS_HCSPLT1_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT1_bits;
    };

    // OTG_HS_HCINT1 @ offset=0x00000128
    union {
        __IO uint32_t OTG_HS_HCINT1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT1_bits;
    };

    // OTG_HS_HCINTMSK1 @ offset=0x0000012C
    union {
        __IO uint32_t OTG_HS_HCINTMSK1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK1_bits;
    };

    // OTG_HS_HCTSIZ1 @ offset=0x00000130
    union {
        __IO uint32_t OTG_HS_HCTSIZ1_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ1_bits;
    };

    // OTG_HS_HCDMA1 @ offset=0x00000134
    __IO uint32_t OTG_HS_HCDMA1_reg;

    __IO uint8_t RESERVED4[8];

    // OTG_HS_HCCHAR2 @ offset=0x00000140
    union {
        __IO uint32_t OTG_HS_HCCHAR2_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR2_bits;
    };

    // OTG_HS_HCSPLT2 @ offset=0x00000144
    union {
        __IO uint32_t OTG_HS_HCSPLT2_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT2_bits;
    };

    // OTG_HS_HCINT2 @ offset=0x00000148
    union {
        __IO uint32_t OTG_HS_HCINT2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT2_bits;
    };

    // OTG_HS_HCINTMSK2 @ offset=0x0000014C
    union {
        __IO uint32_t OTG_HS_HCINTMSK2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK2_bits;
    };

    // OTG_HS_HCTSIZ2 @ offset=0x00000150
    union {
        __IO uint32_t OTG_HS_HCTSIZ2_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ2_bits;
    };

    // OTG_HS_HCDMA2 @ offset=0x00000154
    __IO uint32_t OTG_HS_HCDMA2_reg;

    __IO uint8_t RESERVED5[8];

    // OTG_HS_HCCHAR3 @ offset=0x00000160
    union {
        __IO uint32_t OTG_HS_HCCHAR3_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR3_bits;
    };

    // OTG_HS_HCSPLT3 @ offset=0x00000164
    union {
        __IO uint32_t OTG_HS_HCSPLT3_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT3_bits;
    };

    // OTG_HS_HCINT3 @ offset=0x00000168
    union {
        __IO uint32_t OTG_HS_HCINT3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT3_bits;
    };

    // OTG_HS_HCINTMSK3 @ offset=0x0000016C
    union {
        __IO uint32_t OTG_HS_HCINTMSK3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK3_bits;
    };

    // OTG_HS_HCTSIZ3 @ offset=0x00000170
    union {
        __IO uint32_t OTG_HS_HCTSIZ3_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ3_bits;
    };

    // OTG_HS_HCDMA3 @ offset=0x00000174
    __IO uint32_t OTG_HS_HCDMA3_reg;

    __IO uint8_t RESERVED6[8];

    // OTG_HS_HCCHAR4 @ offset=0x00000180
    union {
        __IO uint32_t OTG_HS_HCCHAR4_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR4_bits;
    };

    // OTG_HS_HCSPLT4 @ offset=0x00000184
    union {
        __IO uint32_t OTG_HS_HCSPLT4_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT4_bits;
    };

    // OTG_HS_HCINT4 @ offset=0x00000188
    union {
        __IO uint32_t OTG_HS_HCINT4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT4_bits;
    };

    // OTG_HS_HCINTMSK4 @ offset=0x0000018C
    union {
        __IO uint32_t OTG_HS_HCINTMSK4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK4_bits;
    };

    // OTG_HS_HCTSIZ4 @ offset=0x00000190
    union {
        __IO uint32_t OTG_HS_HCTSIZ4_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ4_bits;
    };

    // OTG_HS_HCDMA4 @ offset=0x00000194
    __IO uint32_t OTG_HS_HCDMA4_reg;

    __IO uint8_t RESERVED7[8];

    // OTG_HS_HCCHAR5 @ offset=0x000001A0
    union {
        __IO uint32_t OTG_HS_HCCHAR5_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR5_bits;
    };

    // OTG_HS_HCSPLT5 @ offset=0x000001A4
    union {
        __IO uint32_t OTG_HS_HCSPLT5_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT5_bits;
    };

    // OTG_HS_HCINT5 @ offset=0x000001A8
    union {
        __IO uint32_t OTG_HS_HCINT5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT5_bits;
    };

    // OTG_HS_HCINTMSK5 @ offset=0x000001AC
    union {
        __IO uint32_t OTG_HS_HCINTMSK5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK5_bits;
    };

    // OTG_HS_HCTSIZ5 @ offset=0x000001B0
    union {
        __IO uint32_t OTG_HS_HCTSIZ5_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ5_bits;
    };

    // OTG_HS_HCDMA5 @ offset=0x000001B4
    __IO uint32_t OTG_HS_HCDMA5_reg;

    __IO uint8_t RESERVED8[8];

    // OTG_HS_HCCHAR6 @ offset=0x000001C0
    union {
        __IO uint32_t OTG_HS_HCCHAR6_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR6_bits;
    };

    // OTG_HS_HCSPLT6 @ offset=0x000001C4
    union {
        __IO uint32_t OTG_HS_HCSPLT6_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT6_bits;
    };

    // OTG_HS_HCINT6 @ offset=0x000001C8
    union {
        __IO uint32_t OTG_HS_HCINT6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT6_bits;
    };

    // OTG_HS_HCINTMSK6 @ offset=0x000001CC
    union {
        __IO uint32_t OTG_HS_HCINTMSK6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK6_bits;
    };

    // OTG_HS_HCTSIZ6 @ offset=0x000001D0
    union {
        __IO uint32_t OTG_HS_HCTSIZ6_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ6_bits;
    };

    // OTG_HS_HCDMA6 @ offset=0x000001D4
    __IO uint32_t OTG_HS_HCDMA6_reg;

    __IO uint8_t RESERVED9[8];

    // OTG_HS_HCCHAR7 @ offset=0x000001E0
    union {
        __IO uint32_t OTG_HS_HCCHAR7_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR7_bits;
    };

    // OTG_HS_HCSPLT7 @ offset=0x000001E4
    union {
        __IO uint32_t OTG_HS_HCSPLT7_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT7_bits;
    };

    // OTG_HS_HCINT7 @ offset=0x000001E8
    union {
        __IO uint32_t OTG_HS_HCINT7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT7_bits;
    };

    // OTG_HS_HCINTMSK7 @ offset=0x000001EC
    union {
        __IO uint32_t OTG_HS_HCINTMSK7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK7_bits;
    };

    // OTG_HS_HCTSIZ7 @ offset=0x000001F0
    union {
        __IO uint32_t OTG_HS_HCTSIZ7_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ7_bits;
    };

    // OTG_HS_HCDMA7 @ offset=0x000001F4
    __IO uint32_t OTG_HS_HCDMA7_reg;

    __IO uint8_t RESERVED10[8];

    // OTG_HS_HCCHAR8 @ offset=0x00000200
    union {
        __IO uint32_t OTG_HS_HCCHAR8_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR8_bits;
    };

    // OTG_HS_HCSPLT8 @ offset=0x00000204
    union {
        __IO uint32_t OTG_HS_HCSPLT8_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT8_bits;
    };

    // OTG_HS_HCINT8 @ offset=0x00000208
    union {
        __IO uint32_t OTG_HS_HCINT8_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT8_bits;
    };

    // OTG_HS_HCINTMSK8 @ offset=0x0000020C
    union {
        __IO uint32_t OTG_HS_HCINTMSK8_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK8_bits;
    };

    // OTG_HS_HCTSIZ8 @ offset=0x00000210
    union {
        __IO uint32_t OTG_HS_HCTSIZ8_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ8_bits;
    };

    // OTG_HS_HCDMA8 @ offset=0x00000214
    __IO uint32_t OTG_HS_HCDMA8_reg;

    __IO uint8_t RESERVED11[8];

    // OTG_HS_HCCHAR9 @ offset=0x00000220
    union {
        __IO uint32_t OTG_HS_HCCHAR9_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR9_bits;
    };

    // OTG_HS_HCSPLT9 @ offset=0x00000224
    union {
        __IO uint32_t OTG_HS_HCSPLT9_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT9_bits;
    };

    // OTG_HS_HCINT9 @ offset=0x00000228
    union {
        __IO uint32_t OTG_HS_HCINT9_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT9_bits;
    };

    // OTG_HS_HCINTMSK9 @ offset=0x0000022C
    union {
        __IO uint32_t OTG_HS_HCINTMSK9_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK9_bits;
    };

    // OTG_HS_HCTSIZ9 @ offset=0x00000230
    union {
        __IO uint32_t OTG_HS_HCTSIZ9_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ9_bits;
    };

    // OTG_HS_HCDMA9 @ offset=0x00000234
    __IO uint32_t OTG_HS_HCDMA9_reg;

    __IO uint8_t RESERVED12[8];

    // OTG_HS_HCCHAR10 @ offset=0x00000240
    union {
        __IO uint32_t OTG_HS_HCCHAR10_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR10_bits;
    };

    // OTG_HS_HCSPLT10 @ offset=0x00000244
    union {
        __IO uint32_t OTG_HS_HCSPLT10_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT10_bits;
    };

    // OTG_HS_HCINT10 @ offset=0x00000248
    union {
        __IO uint32_t OTG_HS_HCINT10_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT10_bits;
    };

    // OTG_HS_HCINTMSK10 @ offset=0x0000024C
    union {
        __IO uint32_t OTG_HS_HCINTMSK10_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK10_bits;
    };

    // OTG_HS_HCTSIZ10 @ offset=0x00000250
    union {
        __IO uint32_t OTG_HS_HCTSIZ10_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ10_bits;
    };

    // OTG_HS_HCDMA10 @ offset=0x00000254
    __IO uint32_t OTG_HS_HCDMA10_reg;

    __IO uint8_t RESERVED13[8];

    // OTG_HS_HCCHAR11 @ offset=0x00000260
    union {
        __IO uint32_t OTG_HS_HCCHAR11_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR11_bits;
    };

    // OTG_HS_HCSPLT11 @ offset=0x00000264
    union {
        __IO uint32_t OTG_HS_HCSPLT11_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT11_bits;
    };

    // OTG_HS_HCINT11 @ offset=0x00000268
    union {
        __IO uint32_t OTG_HS_HCINT11_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT11_bits;
    };

    // OTG_HS_HCINTMSK11 @ offset=0x0000026C
    union {
        __IO uint32_t OTG_HS_HCINTMSK11_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK11_bits;
    };

    // OTG_HS_HCTSIZ11 @ offset=0x00000270
    union {
        __IO uint32_t OTG_HS_HCTSIZ11_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ11_bits;
    };

    // OTG_HS_HCDMA11 @ offset=0x00000274
    __IO uint32_t OTG_HS_HCDMA11_reg;

    // OTG_HS_HCCHAR12 @ offset=0x00000278
    union {
        __IO uint32_t OTG_HS_HCCHAR12_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR12_bits;
    };

    // OTG_HS_HCSPLT12 @ offset=0x0000027C
    union {
        __IO uint32_t OTG_HS_HCSPLT12_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT12_bits;
    };

    // OTG_HS_HCINT12 @ offset=0x00000280
    union {
        __IO uint32_t OTG_HS_HCINT12_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT12_bits;
    };

    // OTG_HS_HCINTMSK12 @ offset=0x00000284
    union {
        __IO uint32_t OTG_HS_HCINTMSK12_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK12_bits;
    };

    // OTG_HS_HCTSIZ12 @ offset=0x00000288
    union {
        __IO uint32_t OTG_HS_HCTSIZ12_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ12_bits;
    };

    // OTG_HS_HCDMA12 @ offset=0x0000028C
    __IO uint32_t OTG_HS_HCDMA12_reg;

    // OTG_HS_HCCHAR13 @ offset=0x00000290
    union {
        __IO uint32_t OTG_HS_HCCHAR13_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR13_bits;
    };

    // OTG_HS_HCSPLT13 @ offset=0x00000294
    union {
        __IO uint32_t OTG_HS_HCSPLT13_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT13_bits;
    };

    // OTG_HS_HCINT13 @ offset=0x00000298
    union {
        __IO uint32_t OTG_HS_HCINT13_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT13_bits;
    };

    // OTG_HS_HCINTMSK13 @ offset=0x0000029C
    union {
        __IO uint32_t OTG_HS_HCINTMSK13_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK13_bits;
    };

    // OTG_HS_HCTSIZ13 @ offset=0x000002A0
    union {
        __IO uint32_t OTG_HS_HCTSIZ13_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ13_bits;
    };

    // OTG_HS_HCDMA13 @ offset=0x000002A4
    __IO uint32_t OTG_HS_HCDMA13_reg;

    // OTG_HS_HCCHAR14 @ offset=0x000002A8
    union {
        __IO uint32_t OTG_HS_HCCHAR14_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR14_bits;
    };

    // OTG_HS_HCSPLT14 @ offset=0x000002AC
    union {
        __IO uint32_t OTG_HS_HCSPLT14_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT14_bits;
    };

    // OTG_HS_HCINT14 @ offset=0x000002B0
    union {
        __IO uint32_t OTG_HS_HCINT14_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT14_bits;
    };

    // OTG_HS_HCINTMSK14 @ offset=0x000002B4
    union {
        __IO uint32_t OTG_HS_HCINTMSK14_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALLM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK14_bits;
    };

    // OTG_HS_HCTSIZ14 @ offset=0x000002B8
    union {
        __IO uint32_t OTG_HS_HCTSIZ14_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ14_bits;
    };

    // OTG_HS_HCDMA14 @ offset=0x000002BC
    __IO uint32_t OTG_HS_HCDMA14_reg;

    // OTG_HS_HCCHAR15 @ offset=0x000002C0
    union {
        __IO uint32_t OTG_HS_HCCHAR15_reg;

        // bit fields
        struct {
            __IO uint32_t MPSIZ_bit : 11; // bit offset=0  bit width=11  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPNUM_bit : 4; // bit offset=11  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPDIR_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t LSDEV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EPTYP_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MC_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DAD_bit : 7; // bit offset=22  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODDFRM_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHDIS_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHENA_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCCHAR15_bits;
    };

    // OTG_HS_HCSPLT15 @ offset=0x000002C4
    union {
        __IO uint32_t OTG_HS_HCSPLT15_reg;

        // bit fields
        struct {
            __IO uint32_t PRTADDR_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t HUBADDR_bit : 7; // bit offset=7  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t XACTPOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMPLSPLT_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t SPLITEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } OTG_HS_HCSPLT15_bits;
    };

    // OTG_HS_HCINT15 @ offset=0x000002C8
    union {
        __IO uint32_t OTG_HS_HCINT15_reg;

        // bit fields
        struct {
            __IO uint32_t XFRC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHH_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACK_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMOR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERR_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINT15_bits;
    };

    // OTG_HS_HCINTMSK15 @ offset=0x000002CC
    union {
        __IO uint32_t OTG_HS_HCINTMSK15_reg;

        // bit fields
        struct {
            __IO uint32_t XFRCM_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHHM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AHBERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STALL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NAKM_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKM_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NYET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXERRM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BBERRM_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FRMORM_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTERRM_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } OTG_HS_HCINTMSK15_bits;
    };

    // OTG_HS_HCTSIZ15 @ offset=0x000002D0
    union {
        __IO uint32_t OTG_HS_HCTSIZ15_reg;

        // bit fields
        struct {
            __IO uint32_t XFRSIZ_bit : 19; // bit offset=0  bit width=19  access=SVDAccessType.READ_WRITE
            __IO uint32_t PKTCNT_bit : 10; // bit offset=19  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t DPID_bit : 2; // bit offset=29  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 1;
        } OTG_HS_HCTSIZ15_bits;
    };

    // OTG_HS_HCDMA15 @ offset=0x000002D4
    __IO uint32_t OTG_HS_HCDMA15_reg;

} otg2_hs_host_t;

// Peripheral OTG2_HS_PWRCLK @ base_addess=0x40080E00
typedef struct otg2_hs_pwrclk_t {

    // OTG_HS_PCGCR @ offset=0x00000000
    union {
        __IO uint32_t OTG_HS_PCGCR_reg;

        // bit fields
        struct {
            __IO uint32_t STPPCLK_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GATEHCLK_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PHYSUSP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 27;
        } OTG_HS_PCGCR_bits;
    };

} otg2_hs_pwrclk_t;

// Peripheral PWR @ base_addess=0x58024800
typedef struct pwr_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t LPDS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t PVDE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBP_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FLPS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SVOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t AVDEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALS_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 13;
        } CR1_bits;
    };

    // CSR1 @ offset=0x00000004
    union {
        __IO uint32_t CSR1_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PVDO_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 8;
            __IO uint32_t ACTVOSRDY_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ACTVOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t AVDO_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 15;
        } CSR1_bits;
    };

    // CR2 @ offset=0x00000008
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t BREN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t MONEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 11;
            __IO uint32_t BRRDY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t VBATL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VBATH_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMPL_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEMPH_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED3 : 8;
        } CR2_bits;
    };

    // CR3 @ offset=0x0000000C
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t BYPASS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LDOEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCUEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t VBE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VBRS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 14;
            __IO uint32_t USB33DEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USBREGEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB33RDY_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 5;
        } CR3_bits;
    };

    // CPUCR @ offset=0x00000010
    union {
        __IO uint32_t CPUCR_reg;

        // bit fields
        struct {
            __IO uint32_t PDDS_D1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PDDS_D2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PDDS_D3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t STOPF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBF_D1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBF_D2_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSSF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t RUN_D3_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } CPUCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // D3CR @ offset=0x00000018
    union {
        __IO uint32_t D3CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t VOSRDY_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VOS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } D3CR_bits;
    };

    __IO uint8_t RESERVED1[4];

    // WKUPCR @ offset=0x00000020
    __IO uint32_t WKUPCR_reg;

    // WKUPFR @ offset=0x00000024
    union {
        __IO uint32_t WKUPFR_reg;

        // bit fields
        struct {
            __IO uint32_t WKUPF1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPF2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPF3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPF4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPF5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPF6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 26;
        } WKUPFR_bits;
    };

    // WKUPEPR @ offset=0x00000028
    union {
        __IO uint32_t WKUPEPR_reg;

        // bit fields
        struct {
            __IO uint32_t WKUPEN1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPEN2_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPEN3_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPEN4_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPEN5_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPEN6_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t WKUPP1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPP2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPP3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPP4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPP5_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPP6_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t WKUPPUPD1_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPPUPD2_bit : 2; // bit offset=18  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPPUPD3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPPUPD4_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPPUPD5_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WKUPPUPD6_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 4;
        } WKUPEPR_bits;
    };

} pwr_t;

// Peripheral QUADSPI @ base_addess=0x52005000
typedef struct quadspi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABORT_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSHIFT_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DFM_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSEL_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHRES_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TEIE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTIE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMIE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TOIE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t APMS_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PMM_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRESCALER_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } CR_bits;
    };

    // DCR @ offset=0x00000004
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t CKMODE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t CSHT_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t FSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 11;
        } DCR_bits;
    };

    // SR @ offset=0x00000008
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t TEF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FTF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SMF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TOF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t FLEVEL_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 18;
        } SR_bits;
    };

    // FCR @ offset=0x0000000C
    union {
        __IO uint32_t FCR_reg;

        // bit fields
        struct {
            __IO uint32_t CTEF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTCF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CSMF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTOF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 27;
        } FCR_bits;
    };

    // DLR @ offset=0x00000010
    __IO uint32_t DLR_reg;

    // CCR @ offset=0x00000014
    union {
        __IO uint32_t CCR_reg;

        // bit fields
        struct {
            __IO uint32_t INSTRUCTION_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t IMODE_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADMODE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADSIZE_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABMODE_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABSIZE_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCYC_bit : 5; // bit offset=18  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DMODE_bit : 2; // bit offset=24  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t FMODE_bit : 2; // bit offset=26  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SIOO_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DHHC_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRM_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CCR_bits;
    };

    // AR @ offset=0x00000018
    __IO uint32_t AR_reg;

    // ABR @ offset=0x0000001C
    __IO uint32_t ABR_reg;

    // DR @ offset=0x00000020
    __IO uint32_t DR_reg;

    // PSMKR @ offset=0x00000024
    __IO uint32_t PSMKR_reg;

    // PSMAR @ offset=0x00000028
    __IO uint32_t PSMAR_reg;

    // PIR @ offset=0x0000002C
    __IO uint32_t PIR_reg;

    // LPTR @ offset=0x00000030
    __IO uint32_t LPTR_reg;

} quadspi_t;

// Peripheral RAMECC1 @ base_addess=0x52009000
typedef struct ramecc1_t {

    // IER @ offset=0x00000000
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t GIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCSEIE__bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCDEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCDEBWIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } IER_bits;
    };

    __IO uint8_t RESERVED0[28];

    // M1CR @ offset=0x00000020
    union {
        __IO uint32_t M1CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M1CR_bits;
    };

    // M1SR @ offset=0x00000024
    union {
        __IO uint32_t M1SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M1SR_bits;
    };

    // M1FAR @ offset=0x00000028
    __IO uint32_t M1FAR_reg;

    // M1FDRL @ offset=0x0000002C
    __IO uint32_t M1FDRL_reg;

    // M1FDRH @ offset=0x00000030
    __IO uint32_t M1FDRH_reg;

    // M1FECR @ offset=0x00000034
    __IO uint32_t M1FECR_reg;

    __IO uint8_t RESERVED1[8];

    // M2CR @ offset=0x00000040
    union {
        __IO uint32_t M2CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M2CR_bits;
    };

    // M2SR @ offset=0x00000044
    union {
        __IO uint32_t M2SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M2SR_bits;
    };

    // M2FAR @ offset=0x00000048
    __IO uint32_t M2FAR_reg;

    // M2FDRL @ offset=0x0000004C
    __IO uint32_t M2FDRL_reg;

    // M2FDRH @ offset=0x00000050
    __IO uint32_t M2FDRH_reg;

    __IO uint8_t RESERVED2[4];

    // M2FECR @ offset=0x00000058
    __IO uint32_t M2FECR_reg;

    __IO uint8_t RESERVED3[4];

    // M3CR @ offset=0x00000060
    union {
        __IO uint32_t M3CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M3CR_bits;
    };

    // M3SR @ offset=0x00000064
    union {
        __IO uint32_t M3SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M3SR_bits;
    };

    // M3FAR @ offset=0x00000068
    __IO uint32_t M3FAR_reg;

    // M3FDRL @ offset=0x0000006C
    __IO uint32_t M3FDRL_reg;

    // M3FDRH @ offset=0x00000070
    __IO uint32_t M3FDRH_reg;

    __IO uint8_t RESERVED4[8];

    // M3FECR @ offset=0x0000007C
    __IO uint32_t M3FECR_reg;

    // M4CR @ offset=0x00000080
    union {
        __IO uint32_t M4CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M4CR_bits;
    };

    // M4SR @ offset=0x00000084
    union {
        __IO uint32_t M4SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M4SR_bits;
    };

    // M4FAR @ offset=0x00000088
    __IO uint32_t M4FAR_reg;

    // M4FDRL @ offset=0x0000008C
    __IO uint32_t M4FDRL_reg;

    union {
        // M4FDRH @ offset=0x00000090
        __IO uint32_t M4FDRH_reg;

        // M4FECR @ offset=0x00000090
        __IO uint32_t M4FECR_reg;

    };

    __IO uint8_t RESERVED5[12];

    // M5CR @ offset=0x000000A0
    union {
        __IO uint32_t M5CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M5CR_bits;
    };

    // M5SR @ offset=0x000000A4
    union {
        __IO uint32_t M5SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M5SR_bits;
    };

    // M5FAR @ offset=0x000000A8
    __IO uint32_t M5FAR_reg;

    // M5FDRL @ offset=0x000000AC
    __IO uint32_t M5FDRL_reg;

    // M5FDRH @ offset=0x000000B0
    __IO uint32_t M5FDRH_reg;

    // M5FECR @ offset=0x000000B4
    __IO uint32_t M5FECR_reg;

} ramecc1_t;

// Peripheral RAMECC2 @ base_addess=0x48023000
typedef struct ramecc2_t {

    // IER @ offset=0x00000000
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t GIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCSEIE__bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCDEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCDEBWIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } IER_bits;
    };

    __IO uint8_t RESERVED0[28];

    // M1CR @ offset=0x00000020
    union {
        __IO uint32_t M1CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M1CR_bits;
    };

    // M1SR @ offset=0x00000024
    union {
        __IO uint32_t M1SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M1SR_bits;
    };

    // M1FAR @ offset=0x00000028
    __IO uint32_t M1FAR_reg;

    // M1FDRL @ offset=0x0000002C
    __IO uint32_t M1FDRL_reg;

    // M1FDRH @ offset=0x00000030
    __IO uint32_t M1FDRH_reg;

    // M1FECR @ offset=0x00000034
    __IO uint32_t M1FECR_reg;

    __IO uint8_t RESERVED1[8];

    // M2CR @ offset=0x00000040
    union {
        __IO uint32_t M2CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M2CR_bits;
    };

    // M2SR @ offset=0x00000044
    union {
        __IO uint32_t M2SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M2SR_bits;
    };

    // M2FAR @ offset=0x00000048
    __IO uint32_t M2FAR_reg;

    // M2FDRL @ offset=0x0000004C
    __IO uint32_t M2FDRL_reg;

    // M2FDRH @ offset=0x00000050
    __IO uint32_t M2FDRH_reg;

    __IO uint8_t RESERVED2[4];

    // M2FECR @ offset=0x00000058
    __IO uint32_t M2FECR_reg;

    __IO uint8_t RESERVED3[4];

    // M3CR @ offset=0x00000060
    union {
        __IO uint32_t M3CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M3CR_bits;
    };

    // M3SR @ offset=0x00000064
    union {
        __IO uint32_t M3SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M3SR_bits;
    };

    // M3FAR @ offset=0x00000068
    __IO uint32_t M3FAR_reg;

    // M3FDRL @ offset=0x0000006C
    __IO uint32_t M3FDRL_reg;

    // M3FDRH @ offset=0x00000070
    __IO uint32_t M3FDRH_reg;

    __IO uint8_t RESERVED4[8];

    // M3FECR @ offset=0x0000007C
    __IO uint32_t M3FECR_reg;

    // M4CR @ offset=0x00000080
    union {
        __IO uint32_t M4CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M4CR_bits;
    };

    // M4SR @ offset=0x00000084
    union {
        __IO uint32_t M4SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M4SR_bits;
    };

    // M4FAR @ offset=0x00000088
    __IO uint32_t M4FAR_reg;

    // M4FDRL @ offset=0x0000008C
    __IO uint32_t M4FDRL_reg;

    union {
        // M4FDRH @ offset=0x00000090
        __IO uint32_t M4FDRH_reg;

        // M4FECR @ offset=0x00000090
        __IO uint32_t M4FECR_reg;

    };

    __IO uint8_t RESERVED5[12];

    // M5CR @ offset=0x000000A0
    union {
        __IO uint32_t M5CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M5CR_bits;
    };

    // M5SR @ offset=0x000000A4
    union {
        __IO uint32_t M5SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M5SR_bits;
    };

    // M5FAR @ offset=0x000000A8
    __IO uint32_t M5FAR_reg;

    // M5FDRL @ offset=0x000000AC
    __IO uint32_t M5FDRL_reg;

    // M5FDRH @ offset=0x000000B0
    __IO uint32_t M5FDRH_reg;

    // M5FECR @ offset=0x000000B4
    __IO uint32_t M5FECR_reg;

} ramecc2_t;

// Peripheral RAMECC3 @ base_addess=0x58027000
typedef struct ramecc3_t {

    // IER @ offset=0x00000000
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t GIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCSEIE__bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCDEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GECCDEBWIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } IER_bits;
    };

    __IO uint8_t RESERVED0[28];

    // M1CR @ offset=0x00000020
    union {
        __IO uint32_t M1CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M1CR_bits;
    };

    // M1SR @ offset=0x00000024
    union {
        __IO uint32_t M1SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M1SR_bits;
    };

    // M1FAR @ offset=0x00000028
    __IO uint32_t M1FAR_reg;

    // M1FDRL @ offset=0x0000002C
    __IO uint32_t M1FDRL_reg;

    // M1FDRH @ offset=0x00000030
    __IO uint32_t M1FDRH_reg;

    // M1FECR @ offset=0x00000034
    __IO uint32_t M1FECR_reg;

    __IO uint8_t RESERVED1[8];

    // M2CR @ offset=0x00000040
    union {
        __IO uint32_t M2CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t ECCSEIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCDEBWIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECCELEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } M2CR_bits;
    };

    // M2SR @ offset=0x00000044
    union {
        __IO uint32_t M2SR_reg;

        // bit fields
        struct {
            __IO uint32_t SEDCF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEBWDF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } M2SR_bits;
    };

    // M2FAR @ offset=0x00000048
    __IO uint32_t M2FAR_reg;

    // M2FDRL @ offset=0x0000004C
    __IO uint32_t M2FDRL_reg;

    // M2FDRH @ offset=0x00000050
    __IO uint32_t M2FDRH_reg;

    __IO uint8_t RESERVED2[4];

    // M2FECR @ offset=0x00000058
    __IO uint32_t M2FECR_reg;

} ramecc3_t;

// Peripheral RCC @ base_addess=0x58024400
typedef struct rcc_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t HSION_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIKERON_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIRDY_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIDIV_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIDIVF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CSION_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSIRDY_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSIKERON_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t RC48ON_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RC48RDY_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t D1CKRDY_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t D2CKRDY_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSEON_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSERDY_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSEBYP_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSECSSON_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t PLL1ON_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL1RDY_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2ON_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2RDY_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3ON_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3RDY_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 2;
        } CR_bits;
    };

    union {
        // ICSCR @ offset=0x00000004
        union {
            __IO uint32_t ICSCR_reg;

            // bit fields
            struct {
                __IO uint32_t HSICAL_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
                __IO uint32_t HSITRIM_bit : 6; // bit offset=12  bit width=6  access=SVDAccessType.READ_WRITE
                __IO uint32_t CSICAL_bit : 8; // bit offset=18  bit width=8  access=SVDAccessType.READ_ONLY
                __IO uint32_t CSITRIM_bit : 5; // bit offset=26  bit width=5  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 1;
            } ICSCR_bits;
        };

        // HSICFGR @ offset=0x00000004
        union {
            __IO uint32_t HSICFGR_reg;

            // bit fields
            struct {
                __IO uint32_t HSICAL_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0: 12;
                __IO uint32_t HSITRIM_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 1;
            } HSICFGR_bits;
        };

    };

    // CRRCR @ offset=0x00000008
    __IO uint32_t CRRCR_reg;

    __IO uint8_t RESERVED0[4];

    // CFGR @ offset=0x00000010
    union {
        __IO uint32_t CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t SW_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWS_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOPWUCK_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOPKERWUCK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTCPRE_bit : 6; // bit offset=8  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t HRTIMSEL_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIMPRE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MCO1PRE_bit : 4; // bit offset=18  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCO1SEL_bit : 3; // bit offset=22  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCO2PRE_bit : 4; // bit offset=25  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCO2SEL_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CFGR_bits;
    };

    __IO uint8_t RESERVED1[4];

    // D1CFGR @ offset=0x00000018
    union {
        __IO uint32_t D1CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t HPRE_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t D1PPRE_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t D1CPRE_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } D1CFGR_bits;
    };

    // D2CFGR @ offset=0x0000001C
    union {
        __IO uint32_t D2CFGR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t D2PPRE1_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t D2PPRE2_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 21;
        } D2CFGR_bits;
    };

    // D3CFGR @ offset=0x00000020
    __IO uint32_t D3CFGR_reg;

    __IO uint8_t RESERVED2[4];

    // PLLCKSELR @ offset=0x00000028
    union {
        __IO uint32_t PLLCKSELR_reg;

        // bit fields
        struct {
            __IO uint32_t PLLSRC_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIVM1_bit : 6; // bit offset=4  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t DIVM2_bit : 6; // bit offset=12  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t DIVM3_bit : 6; // bit offset=20  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 6;
        } PLLCKSELR_bits;
    };

    // PLLCFGR @ offset=0x0000002C
    union {
        __IO uint32_t PLLCFGR_reg;

        // bit fields
        struct {
            __IO uint32_t PLL1FRACEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL1VCOSEL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL1RGE_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2FRACEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2VCOSEL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2RGE_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3FRACEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3VCOSEL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3RGE_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t DIVP1EN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVQ1EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVR1EN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVP2EN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVQ2EN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVR2EN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVP3EN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVQ3EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVR3EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 7;
        } PLLCFGR_bits;
    };

    // PLL1DIVR @ offset=0x00000030
    union {
        __IO uint32_t PLL1DIVR_reg;

        // bit fields
        struct {
            __IO uint32_t DIVN1_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVP1_bit : 7; // bit offset=9  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVQ1_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DIVR1_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } PLL1DIVR_bits;
    };

    // PLL1FRACR @ offset=0x00000034
    __IO uint32_t PLL1FRACR_reg;

    // PLL2DIVR @ offset=0x00000038
    union {
        __IO uint32_t PLL2DIVR_reg;

        // bit fields
        struct {
            __IO uint32_t DIVN2_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVP2_bit : 7; // bit offset=9  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVQ2_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DIVR2_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } PLL2DIVR_bits;
    };

    // PLL2FRACR @ offset=0x0000003C
    __IO uint32_t PLL2FRACR_reg;

    // PLL3DIVR @ offset=0x00000040
    union {
        __IO uint32_t PLL3DIVR_reg;

        // bit fields
        struct {
            __IO uint32_t DIVN3_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVP3_bit : 7; // bit offset=9  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIVQ3_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DIVR3_bit : 7; // bit offset=24  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 1;
        } PLL3DIVR_bits;
    };

    // PLL3FRACR @ offset=0x00000044
    __IO uint32_t PLL3FRACR_reg;

    __IO uint8_t RESERVED3[4];

    // D1CCIPR @ offset=0x0000004C
    union {
        __IO uint32_t D1CCIPR_reg;

        // bit fields
        struct {
            __IO uint32_t FMCSEL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t QSPISEL_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 10;
            __IO uint32_t SDMMCSEL_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 11;
            __IO uint32_t CKPERSEL_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 2;
        } D1CCIPR_bits;
    };

    // D2CCIP1R @ offset=0x00000050
    union {
        __IO uint32_t D2CCIP1R_reg;

        // bit fields
        struct {
            __IO uint32_t SAI1SEL_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t SAI23SEL_bit : 3; // bit offset=6  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t SPI123SEL_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI45SEL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SPDIFSEL_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 2;
            __IO uint32_t DFSDM1SEL_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t FDCANSEL_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 1;
            __IO uint32_t SWPSEL_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } D2CCIP1R_bits;
    };

    // D2CCIP2R @ offset=0x00000054
    union {
        __IO uint32_t D2CCIP2R_reg;

        // bit fields
        struct {
            __IO uint32_t USART234578SEL_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART16SEL_bit : 3; // bit offset=3  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t RNGSEL_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t I2C123SEL_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 6;
            __IO uint32_t USBSEL_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CECSEL_bit : 2; // bit offset=22  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 4;
            __IO uint32_t LPTIM1SEL_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 1;
        } D2CCIP2R_bits;
    };

    // D3CCIPR @ offset=0x00000058
    union {
        __IO uint32_t D3CCIPR_reg;

        // bit fields
        struct {
            __IO uint32_t LPUART1SEL_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t I2C4SEL_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM2SEL_bit : 3; // bit offset=10  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM345SEL_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADCSEL_bit : 2; // bit offset=16  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t SAI4ASEL_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI4BSEL_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI6SEL_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } D3CCIPR_bits;
    };

    __IO uint8_t RESERVED4[4];

    // CIER @ offset=0x00000060
    union {
        __IO uint32_t CIER_reg;

        // bit fields
        struct {
            __IO uint32_t LSIRDYIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSERDYIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIRDYIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSERDYIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSIRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RC48RDYIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL1RDYIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2RDYIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3RDYIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSECSSIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 22;
        } CIER_bits;
    };

    // CIFR @ offset=0x00000064
    union {
        __IO uint32_t CIFR_reg;

        // bit fields
        struct {
            __IO uint32_t LSIRDYF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSERDYF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIRDYF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSERDYF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSIRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RC48RDYF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL1RDYF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2RDYF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3RDYF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSECSSF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSECSSF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CIFR_bits;
    };

    // CICR @ offset=0x00000068
    union {
        __IO uint32_t CICR_reg;

        // bit fields
        struct {
            __IO uint32_t LSIRDYC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSERDYC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSIRDYC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSERDYC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSE_READY_INTERRUPT_CLEAR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RC48RDYC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL1RDYC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL2RDYC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PLL3RDYC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSECSSC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSECSSC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } CICR_bits;
    };

    __IO uint8_t RESERVED5[4];

    // BDCR @ offset=0x00000070
    union {
        __IO uint32_t BDCR_reg;

        // bit fields
        struct {
            __IO uint32_t LSEON_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSERDY_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSEBYP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSEDRV_bit : 2; // bit offset=3  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSECSSON_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSECSSD_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTCSRC_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 5;
            __IO uint32_t RTCEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWRST_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 15;
        } BDCR_bits;
    };

    // CSR @ offset=0x00000074
    union {
        __IO uint32_t CSR_reg;

        // bit fields
        struct {
            __IO uint32_t LSION_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSIRDY_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } CSR_bits;
    };

    __IO uint8_t RESERVED6[4];

    // AHB3RSTR @ offset=0x0000007C
    union {
        __IO uint32_t AHB3RSTR_reg;

        // bit fields
        struct {
            __IO uint32_t MDMARST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DMA2DRST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JPGDECRST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t FMCRST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t QSPIRST_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SDMMC1RST_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 14;
            __IO uint32_t CPURST_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } AHB3RSTR_bits;
    };

    // AHB1RSTR @ offset=0x00000080
    union {
        __IO uint32_t AHB1RSTR_reg;

        // bit fields
        struct {
            __IO uint32_t DMA1RST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMA2RST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADC12RST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t ETH1MACRST_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 9;
            __IO uint32_t USB1OTGRST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t USB2OTGRST_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 4;
        } AHB1RSTR_bits;
    };

    // AHB2RSTR @ offset=0x00000084
    union {
        __IO uint32_t AHB2RSTR_reg;

        // bit fields
        struct {
            __IO uint32_t CAMITFRST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CRYPTRST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HASHRST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RNGRST_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SDMMC2RST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 22;
        } AHB2RSTR_bits;
    };

    // AHB4RSTR @ offset=0x00000088
    union {
        __IO uint32_t AHB4RSTR_reg;

        // bit fields
        struct {
            __IO uint32_t GPIOARST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOBRST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOCRST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIODRST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOERST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOFRST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOGRST_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOHRST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOJRST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOKRST_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t CRCRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BDMARST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t ADC3RST_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSEMRST_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 6;
        } AHB4RSTR_bits;
    };

    // APB3RSTR @ offset=0x0000008C
    __IO uint32_t APB3RSTR_reg;

    // APB1LRSTR @ offset=0x00000090
    union {
        __IO uint32_t APB1LRSTR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM2RST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM3RST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM4RST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM5RST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM6RST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM7RST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM12RST_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM13RST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM14RST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM1RST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SPI2RST_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI3RST_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPDIFRXRST_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART2RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART3RST_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART4RST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART5RST_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C1RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C2RST_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C3RST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CECRST_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DAC12RST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART7RST_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART8RST_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } APB1LRSTR_bits;
    };

    // APB1HRSTR @ offset=0x00000094
    union {
        __IO uint32_t APB1HRSTR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CRSRST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPRST_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAMPRST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MDIOSRST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t FDCANRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 23;
        } APB1HRSTR_bits;
    };

    // APB2RSTR @ offset=0x00000098
    union {
        __IO uint32_t APB2RSTR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM1RST_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM8RST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t USART1RST_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART6RST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SPI1RST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI4RST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TIM15RST_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM16RST_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM17RST_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SPI5RST_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SAI1RST_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI2RST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI3RST_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t DFSDM1RST_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HRTIMRST_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 2;
        } APB2RSTR_bits;
    };

    // APB4RSTR @ offset=0x0000009C
    union {
        __IO uint32_t APB4RSTR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SYSCFGRST_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LPUART1RST_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI6RST_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t I2C4RST_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPTIM2RST_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM3RST_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM4RST_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM5RST_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t COMP12RST_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFRST_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 5;
            __IO uint32_t SAI4RST_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 10;
        } APB4RSTR_bits;
    };

    // GCR @ offset=0x000000A0
    __IO uint32_t GCR_reg;

    __IO uint8_t RESERVED7[4];

    // D3AMR @ offset=0x000000A8
    union {
        __IO uint32_t D3AMR_reg;

        // bit fields
        struct {
            __IO uint32_t BDMAAMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t LPUART1AMEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t SPI6AMEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t I2C4AMEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t LPTIM2AMEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM3AMEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM4AMEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM5AMEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t COMP12AMEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFAMEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTCAMEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 2;
            __IO uint32_t CRCAMEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 1;
            __IO uint32_t SAI4AMEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7: 2;
            __IO uint32_t ADC3AMEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED8: 3;
            __IO uint32_t BKPRAMAMEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM4AMEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED9 : 2;
        } D3AMR_bits;
    };

    __IO uint8_t RESERVED8[36];

    // RSR @ offset=0x000000D0
    union {
        __IO uint32_t RSR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t RMVF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPURSTF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t D1RSTF_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t D2RSTF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BORRSTF_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINRSTF_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PORRSTF_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SFTRSTF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t IWDG1RSTF_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t WWDG1RSTF_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPWRRSTF_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 1;
        } RSR_bits;
    };

    // AHB3ENR @ offset=0x000000D4
    union {
        __IO uint32_t AHB3ENR_reg;

        // bit fields
        struct {
            __IO uint32_t MDMAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DMA2DEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JPGDECEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t FMCEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t QSPIEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SDMMC1EN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 15;
        } AHB3ENR_bits;
    };

    // AHB1ENR @ offset=0x000000D8
    union {
        __IO uint32_t AHB1ENR_reg;

        // bit fields
        struct {
            __IO uint32_t DMA1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMA2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADC12EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t ETH1MACEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1TXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1RXEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t USB1OTGHSEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB1OTGHSULPIEN_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGHSEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGHSULPIEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 3;
        } AHB1ENR_bits;
    };

    // AHB2ENR @ offset=0x000000DC
    union {
        __IO uint32_t AHB2ENR_reg;

        // bit fields
        struct {
            __IO uint32_t DCMIEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CRYPTEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HASHEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RNGEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SDMMC2EN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 19;
            __IO uint32_t SRAM1EN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM2EN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM3EN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } AHB2ENR_bits;
    };

    // AHB4ENR @ offset=0x000000E0
    union {
        __IO uint32_t AHB4ENR_reg;

        // bit fields
        struct {
            __IO uint32_t GPIOAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOBEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOCEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIODEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOEEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOFEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOGEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOIEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOJEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOKEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t CRCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BDMAEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t ADC3EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSEMEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t BKPRAMEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } AHB4ENR_bits;
    };

    // APB3ENR @ offset=0x000000E4
    union {
        __IO uint32_t APB3ENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t LTDCEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t WWDG1EN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 25;
        } APB3ENR_bits;
    };

    // APB1LENR @ offset=0x000000E8
    union {
        __IO uint32_t APB1LENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM2EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM3EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM4EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM5EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM6EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM7EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM12EN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM13EN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM14EN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM1EN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SPI2EN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI3EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPDIFRXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART2EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART3EN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART4EN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART5EN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C1EN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C2EN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C3EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CECEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DAC12EN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART7EN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART8EN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } APB1LENR_bits;
    };

    // APB1HENR @ offset=0x000000EC
    union {
        __IO uint32_t APB1HENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CRSEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAMPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MDIOSEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t FDCANEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 23;
        } APB1HENR_bits;
    };

    // APB2ENR @ offset=0x000000F0
    union {
        __IO uint32_t APB2ENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM8EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t USART1EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART6EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SPI1EN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI4EN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TIM15EN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM16EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM17EN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SPI5EN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SAI1EN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI2EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI3EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t DFSDM1EN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HRTIMEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 2;
        } APB2ENR_bits;
    };

    // APB4ENR @ offset=0x000000F4
    union {
        __IO uint32_t APB4ENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SYSCFGEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LPUART1EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI6EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t I2C4EN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPTIM2EN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM3EN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM4EN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM5EN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t COMP12EN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTCAPBEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 4;
            __IO uint32_t SAI4EN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 10;
        } APB4ENR_bits;
    };

    __IO uint8_t RESERVED9[4];

    // AHB3LPENR @ offset=0x000000FC
    union {
        __IO uint32_t AHB3LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t MDMALPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DMA2DLPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JPGDECLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t FLASHLPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t FMCLPEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t QSPILPEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SDMMC1LPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 11;
            __IO uint32_t D1DTCM1LPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTCM2LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITCMLPEN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AXISRAMLPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } AHB3LPENR_bits;
    };

    // AHB1LPENR @ offset=0x00000100
    union {
        __IO uint32_t AHB1LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t DMA1LPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMA2LPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADC12LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t ETH1MACLPEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1TXLPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1RXLPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t USB1OTGHSLPEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB1OTGHSULPILPEN_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGHSLPEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGHSULPILPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 3;
        } AHB1LPENR_bits;
    };

    // AHB2LPENR @ offset=0x00000104
    union {
        __IO uint32_t AHB2LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t CAMITFLPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CRYPTLPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HASHLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RNGLPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SDMMC2LPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 19;
            __IO uint32_t SRAM1LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM2LPEN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM3LPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } AHB2LPENR_bits;
    };

    // AHB4LPENR @ offset=0x00000108
    union {
        __IO uint32_t AHB4LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t GPIOALPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOBLPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOCLPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIODLPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOELPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOFLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOGLPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOHLPEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOILPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOJLPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOKLPEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t CRCLPEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BDMALPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t ADC3LPEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 3;
            __IO uint32_t BKPRAMLPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM4LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 2;
        } AHB4LPENR_bits;
    };

    // APB3LPENR @ offset=0x0000010C
    union {
        __IO uint32_t APB3LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t LTDCLPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t WWDG1LPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 25;
        } APB3LPENR_bits;
    };

    // APB1LLPENR @ offset=0x00000110
    union {
        __IO uint32_t APB1LLPENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM2LPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM3LPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM4LPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM5LPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM6LPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM7LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM12LPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM13LPEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM14LPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM1LPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SPI2LPEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI3LPEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPDIFRXLPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART2LPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART3LPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART4LPEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART5LPEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C1LPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C2LPEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C3LPEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t HDMICECLPEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DAC12LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART7LPEN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART8LPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } APB1LLPENR_bits;
    };

    // APB1HLPENR @ offset=0x00000114
    union {
        __IO uint32_t APB1HLPENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CRSLPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPLPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAMPLPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MDIOSLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t FDCANLPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 23;
        } APB1HLPENR_bits;
    };

    // APB2LPENR @ offset=0x00000118
    union {
        __IO uint32_t APB2LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM1LPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM8LPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t USART1LPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART6LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SPI1LPEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI4LPEN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TIM15LPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM16LPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM17LPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SPI5LPEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SAI1LPEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI2LPEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI3LPEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t DFSDM1LPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HRTIMLPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 2;
        } APB2LPENR_bits;
    };

    // APB4LPENR @ offset=0x0000011C
    union {
        __IO uint32_t APB4LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SYSCFGLPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LPUART1LPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI6LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t I2C4LPEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPTIM2LPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM3LPEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM4LPEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM5LPEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t COMP12LPEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFLPEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTCAPBLPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 4;
            __IO uint32_t SAI4LPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 10;
        } APB4LPENR_bits;
    };

    __IO uint8_t RESERVED10[16];

    // C1_RSR @ offset=0x00000130
    union {
        __IO uint32_t C1_RSR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t RMVF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPURSTF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t D1RSTF_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t D2RSTF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BORRSTF_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PINRSTF_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PORRSTF_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SFTRSTF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t IWDG1RSTF_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t WWDG1RSTF_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPWRRSTF_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5 : 1;
        } C1_RSR_bits;
    };

    // C1_AHB3ENR @ offset=0x00000134
    union {
        __IO uint32_t C1_AHB3ENR_reg;

        // bit fields
        struct {
            __IO uint32_t MDMAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DMA2DEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JPGDECEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t FMCEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t QSPIEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SDMMC1EN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 15;
        } C1_AHB3ENR_bits;
    };

    // C1_AHB1ENR @ offset=0x00000138
    union {
        __IO uint32_t C1_AHB1ENR_reg;

        // bit fields
        struct {
            __IO uint32_t DMA1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMA2EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADC12EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t ETH1MACEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1TXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1RXEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t USB1OTGHSEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB1OTGHSULPIEN_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGHSEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGHSULPIEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 3;
        } C1_AHB1ENR_bits;
    };

    // C1_AHB2ENR @ offset=0x0000013C
    union {
        __IO uint32_t C1_AHB2ENR_reg;

        // bit fields
        struct {
            __IO uint32_t DCMIEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CRYPTEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HASHEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RNGEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SDMMC2EN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 19;
            __IO uint32_t SRAM1EN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM2EN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM3EN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } C1_AHB2ENR_bits;
    };

    // C1_AHB4ENR @ offset=0x00000140
    union {
        __IO uint32_t C1_AHB4ENR_reg;

        // bit fields
        struct {
            __IO uint32_t GPIOAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOBEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOCEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIODEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOEEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOFEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOGEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOHEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOIEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOJEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOKEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t CRCEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BDMAEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t ADC3EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HSEMEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t BKPRAMEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } C1_AHB4ENR_bits;
    };

    // C1_APB3ENR @ offset=0x00000144
    union {
        __IO uint32_t C1_APB3ENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t LTDCEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t WWDG1EN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 25;
        } C1_APB3ENR_bits;
    };

    // C1_APB1LENR @ offset=0x00000148
    union {
        __IO uint32_t C1_APB1LENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM2EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM3EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM4EN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM5EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM6EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM7EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM12EN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM13EN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM14EN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM1EN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SPI2EN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI3EN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPDIFRXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART2EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART3EN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART4EN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART5EN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C1EN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C2EN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C3EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t HDMICECEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DAC12EN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART7EN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART8EN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } C1_APB1LENR_bits;
    };

    // C1_APB1HENR @ offset=0x0000014C
    union {
        __IO uint32_t C1_APB1HENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CRSEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAMPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MDIOSEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t FDCANEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 23;
        } C1_APB1HENR_bits;
    };

    // C1_APB2ENR @ offset=0x00000150
    union {
        __IO uint32_t C1_APB2ENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM1EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM8EN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t USART1EN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART6EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SPI1EN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI4EN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TIM15EN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM16EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM17EN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SPI5EN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SAI1EN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI2EN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI3EN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t DFSDM1EN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HRTIMEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 2;
        } C1_APB2ENR_bits;
    };

    // C1_APB4ENR @ offset=0x00000154
    union {
        __IO uint32_t C1_APB4ENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SYSCFGEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LPUART1EN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI6EN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t I2C4EN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPTIM2EN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM3EN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM4EN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM5EN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t COMP12EN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTCAPBEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 4;
            __IO uint32_t SAI4EN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 10;
        } C1_APB4ENR_bits;
    };

    __IO uint8_t RESERVED11[4];

    // C1_AHB3LPENR @ offset=0x0000015C
    union {
        __IO uint32_t C1_AHB3LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t MDMALPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DMA2DLPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t JPGDECLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t FLITFLPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t FMCLPEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t QSPILPEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SDMMC1LPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 11;
            __IO uint32_t D1DTCM1LPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTCM2LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITCMLPEN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AXISRAMLPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } C1_AHB3LPENR_bits;
    };

    // C1_AHB1LPENR @ offset=0x00000160
    union {
        __IO uint32_t C1_AHB1LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t DMA1LPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMA2LPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ADC12LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 9;
            __IO uint32_t ETH1MACLPEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1TXLPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETH1RXLPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t USB1OTGLPEN_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB1ULPILPEN_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2OTGLPEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USB2ULPILPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 3;
        } C1_AHB1LPENR_bits;
    };

    // C1_AHB2LPENR @ offset=0x00000164
    union {
        __IO uint32_t C1_AHB2LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t CAMITFLPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CRYPTLPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HASHLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RNGLPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SDMMC2LPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 19;
            __IO uint32_t SRAM1LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM2LPEN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM3LPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } C1_AHB2LPENR_bits;
    };

    // C1_AHB4LPENR @ offset=0x00000168
    union {
        __IO uint32_t C1_AHB4LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t GPIOALPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOBLPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOCLPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIODLPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOELPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOFLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOGLPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOHLPEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOILPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOJLPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GPIOKLPEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t CRCLPEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BDMALPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t ADC3LPEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 3;
            __IO uint32_t BKPRAMLPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRAM4LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 2;
        } C1_AHB4LPENR_bits;
    };

    // C1_APB3LPENR @ offset=0x0000016C
    union {
        __IO uint32_t C1_APB3LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t LTDCLPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t WWDG1LPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 25;
        } C1_APB3LPENR_bits;
    };

    // C1_APB1LLPENR @ offset=0x00000170
    union {
        __IO uint32_t C1_APB1LLPENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM2LPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM3LPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM4LPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM5LPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM6LPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM7LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM12LPEN_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM13LPEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM14LPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM1LPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SPI2LPEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI3LPEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPDIFRXLPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART2LPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART3LPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART4LPEN_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UART5LPEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C1LPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C2LPEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C3LPEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t HDMICECLPEN_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DAC12LPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART7LPEN_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART8LPEN_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } C1_APB1LLPENR_bits;
    };

    // C1_APB1HLPENR @ offset=0x00000174
    union {
        __IO uint32_t C1_APB1HLPENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CRSLPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPLPEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OPAMPLPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MDIOSLPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t FDCANLPEN_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 23;
        } C1_APB1HLPENR_bits;
    };

    // C1_APB2LPENR @ offset=0x00000178
    union {
        __IO uint32_t C1_APB2LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t TIM1LPEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM8LPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t USART1LPEN_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t USART6LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 6;
            __IO uint32_t SPI1LPEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SPI4LPEN_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t TIM15LPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM16LPEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIM17LPEN_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t SPI5LPEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t SAI1LPEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI2LPEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SAI3LPEN_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 3;
            __IO uint32_t DFSDM1LPEN_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HRTIMLPEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6 : 2;
        } C1_APB2LPENR_bits;
    };

    // C1_APB4LPENR @ offset=0x0000017C
    union {
        __IO uint32_t C1_APB4LPENR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SYSCFGLPEN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LPUART1LPEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SPI6LPEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t I2C4LPEN_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t LPTIM2LPEN_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM3LPEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM4LPEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPTIM5LPEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t COMP12LPEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VREFLPEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTCAPBLPEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 4;
            __IO uint32_t SAI4LPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 10;
        } C1_APB4LPENR_bits;
    };

} rcc_t;

// Peripheral RNG @ base_addess=0x48021800
typedef struct rng_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t RNGEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CED_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 26;
        } CR_bits;
    };

    // SR @ offset=0x00000004
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t DRDY_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CECS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SECS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CEIS_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SEIS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 25;
        } SR_bits;
    };

    // DR @ offset=0x00000008
    __IO uint32_t DR_reg;

} rng_t;

// Peripheral RTC @ base_addess=0x58004000
typedef struct rtc_t {

    // RTC_TR @ offset=0x00000000
    union {
        __IO uint32_t RTC_TR_reg;

        // bit fields
        struct {
            __IO uint32_t SU_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MNU_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MNT_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t HU_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HT_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PM_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 9;
        } RTC_TR_bits;
    };

    // RTC_DR @ offset=0x00000004
    union {
        __IO uint32_t RTC_DR_reg;

        // bit fields
        struct {
            __IO uint32_t DU_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MU_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WDU_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t YU_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t YT_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 8;
        } RTC_DR_bits;
    };

    // RTC_CR @ offset=0x00000008
    union {
        __IO uint32_t RTC_CR_reg;

        // bit fields
        struct {
            __IO uint32_t WUCKSEL_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSEDGE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t REFCKON_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BYPSHAD_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FMT_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t ALRAE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALRBE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUTE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALRAIE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALRBIE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUTIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSIE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD1H_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUB1H_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BKP_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COSEL_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t POL_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSEL_bit : 2; // bit offset=21  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t COE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ITSE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 7;
        } RTC_CR_bits;
    };

    // RTC_ISR @ offset=0x0000000C
    union {
        __IO uint32_t RTC_ISR_reg;

        // bit fields
        struct {
            __IO uint32_t ALRAWF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ALRBWF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUTWF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SHPF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t INITS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RSF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t INITF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t INIT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALRAF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ALRBF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUTF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSOVF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP1F_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP2F_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP3F_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RECALPF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ITSF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 14;
        } RTC_ISR_bits;
    };

    // RTC_PRER @ offset=0x00000010
    union {
        __IO uint32_t RTC_PRER_reg;

        // bit fields
        struct {
            __IO uint32_t PREDIV_S_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PREDIV_A_bit : 7; // bit offset=16  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 9;
        } RTC_PRER_bits;
    };

    // RTC_WUTR @ offset=0x00000014
    __IO uint32_t RTC_WUTR_reg;

    __IO uint8_t RESERVED0[4];

    // RTC_ALRMAR @ offset=0x0000001C
    union {
        __IO uint32_t RTC_ALRMAR_reg;

        // bit fields
        struct {
            __IO uint32_t SU_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MNU_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MNT_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HU_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HT_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PM_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DU_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DT_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WDSEL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK4_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RTC_ALRMAR_bits;
    };

    // RTC_ALRMBR @ offset=0x00000020
    union {
        __IO uint32_t RTC_ALRMBR_reg;

        // bit fields
        struct {
            __IO uint32_t SU_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ST_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK1_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MNU_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MNT_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK2_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HU_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t HT_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PM_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK3_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DU_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t DT_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WDSEL_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSK4_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } RTC_ALRMBR_bits;
    };

    // RTC_WPR @ offset=0x00000024
    __IO uint32_t RTC_WPR_reg;

    // RTC_SSR @ offset=0x00000028
    __IO uint32_t RTC_SSR_reg;

    // RTC_SHIFTR @ offset=0x0000002C
    union {
        __IO uint32_t RTC_SHIFTR_reg;

        // bit fields
        struct {
            __IO uint32_t SUBFS_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 16;
            __IO uint32_t ADD1S_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.WRITE_ONLY
        } RTC_SHIFTR_bits;
    };

    // RTC_TSTR @ offset=0x00000030
    union {
        __IO uint32_t RTC_TSTR_reg;

        // bit fields
        struct {
            __IO uint32_t SU_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t ST_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t MNU_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t MNT_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t HU_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t HT_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t PM_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED2 : 9;
        } RTC_TSTR_bits;
    };

    // RTC_TSDR @ offset=0x00000034
    union {
        __IO uint32_t RTC_TSDR_reg;

        // bit fields
        struct {
            __IO uint32_t DU_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t DT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t MU_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t MT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WDU_bit : 3; // bit offset=13  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 16;
        } RTC_TSDR_bits;
    };

    // RTC_TSSSR @ offset=0x00000038
    __IO uint32_t RTC_TSSSR_reg;

    // RTC_CALR @ offset=0x0000003C
    union {
        __IO uint32_t RTC_CALR_reg;

        // bit fields
        struct {
            __IO uint32_t CALM_bit : 9; // bit offset=0  bit width=9  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t CALW16_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALW8_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CALP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 16;
        } RTC_CALR_bits;
    };

    // RTC_TAMPCR @ offset=0x00000040
    union {
        __IO uint32_t RTC_TAMPCR_reg;

        // bit fields
        struct {
            __IO uint32_t TAMP1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP1TRG_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP2E_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP2TRG_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP3E_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP3TRG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMPTS_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMPFREQ_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMPFLT_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMPPRCH_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMPPUDIS_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP1IE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP1NOERASE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP1MF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP2IE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP2NOERASE_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP2MF_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP3IE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP3NOERASE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAMP3MF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 7;
        } RTC_TAMPCR_bits;
    };

    // RTC_ALRMASSR @ offset=0x00000044
    union {
        __IO uint32_t RTC_ALRMASSR_reg;

        // bit fields
        struct {
            __IO uint32_t SS_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t MASKSS_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } RTC_ALRMASSR_bits;
    };

    // RTC_ALRMBSSR @ offset=0x00000048
    union {
        __IO uint32_t RTC_ALRMBSSR_reg;

        // bit fields
        struct {
            __IO uint32_t SS_bit : 15; // bit offset=0  bit width=15  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t MASKSS_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } RTC_ALRMBSSR_bits;
    };

    // RTC_OR @ offset=0x0000004C
    union {
        __IO uint32_t RTC_OR_reg;

        // bit fields
        struct {
            __IO uint32_t RTC_ALARM_TYPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTC_OUT_RMP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } RTC_OR_bits;
    };

    // RTC_BKP0R @ offset=0x00000050
    __IO uint32_t RTC_BKP0R_reg;

    // RTC_BKP1R @ offset=0x00000054
    __IO uint32_t RTC_BKP1R_reg;

    // RTC_BKP2R @ offset=0x00000058
    __IO uint32_t RTC_BKP2R_reg;

    // RTC_BKP3R @ offset=0x0000005C
    __IO uint32_t RTC_BKP3R_reg;

    // RTC_BKP4R @ offset=0x00000060
    __IO uint32_t RTC_BKP4R_reg;

    // RTC_BKP5R @ offset=0x00000064
    __IO uint32_t RTC_BKP5R_reg;

    // RTC_BKP6R @ offset=0x00000068
    __IO uint32_t RTC_BKP6R_reg;

    // RTC_BKP7R @ offset=0x0000006C
    __IO uint32_t RTC_BKP7R_reg;

    // RTC_BKP8R @ offset=0x00000070
    __IO uint32_t RTC_BKP8R_reg;

    // RTC_BKP9R @ offset=0x00000074
    __IO uint32_t RTC_BKP9R_reg;

    // RTC_BKP10R @ offset=0x00000078
    __IO uint32_t RTC_BKP10R_reg;

    // RTC_BKP11R @ offset=0x0000007C
    __IO uint32_t RTC_BKP11R_reg;

    // RTC_BKP12R @ offset=0x00000080
    __IO uint32_t RTC_BKP12R_reg;

    // RTC_BKP13R @ offset=0x00000084
    __IO uint32_t RTC_BKP13R_reg;

    // RTC_BKP14R @ offset=0x00000088
    __IO uint32_t RTC_BKP14R_reg;

    // RTC_BKP15R @ offset=0x0000008C
    __IO uint32_t RTC_BKP15R_reg;

    // RTC_BKP16R @ offset=0x00000090
    __IO uint32_t RTC_BKP16R_reg;

    // RTC_BKP17R @ offset=0x00000094
    __IO uint32_t RTC_BKP17R_reg;

    // RTC_BKP18R @ offset=0x00000098
    __IO uint32_t RTC_BKP18R_reg;

    // RTC_BKP19R @ offset=0x0000009C
    __IO uint32_t RTC_BKP19R_reg;

    // RTC_BKP20R @ offset=0x000000A0
    __IO uint32_t RTC_BKP20R_reg;

    // RTC_BKP21R @ offset=0x000000A4
    __IO uint32_t RTC_BKP21R_reg;

    // RTC_BKP22R @ offset=0x000000A8
    __IO uint32_t RTC_BKP22R_reg;

    // RTC_BKP23R @ offset=0x000000AC
    __IO uint32_t RTC_BKP23R_reg;

    // RTC_BKP24R @ offset=0x000000B0
    __IO uint32_t RTC_BKP24R_reg;

    // RTC_BKP25R @ offset=0x000000B4
    __IO uint32_t RTC_BKP25R_reg;

    // RTC_BKP26R @ offset=0x000000B8
    __IO uint32_t RTC_BKP26R_reg;

    // RTC_BKP27R @ offset=0x000000BC
    __IO uint32_t RTC_BKP27R_reg;

    // RTC_BKP28R @ offset=0x000000C0
    __IO uint32_t RTC_BKP28R_reg;

    // RTC_BKP29R @ offset=0x000000C4
    __IO uint32_t RTC_BKP29R_reg;

    // RTC_BKP30R @ offset=0x000000C8
    __IO uint32_t RTC_BKP30R_reg;

    // RTC_BKP31R @ offset=0x000000CC
    __IO uint32_t RTC_BKP31R_reg;

} rtc_t;

// Peripheral SAI1 @ base_addess=0x40015800
typedef struct sai1_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t SAI_GCR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCIN_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SYNCOUT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } SAI_GCR_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t SAI_ACR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_ACR1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t SAI_ACR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_ACR2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t SAI_AFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_AFRCR_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t SAI_ASLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_ASLOTR_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t SAI_AIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_AIM_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t SAI_ASR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_ASR_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t SAI_ACLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_ACLRFR_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t SAI_ADR_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t SAI_BCR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_BCR1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t SAI_BCR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_BCR2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t SAI_BFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_BFRCR_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t SAI_BSLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_BSLOTR_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t SAI_BIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_BIM_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t SAI_BSR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_BSR_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t SAI_BCLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_BCLRFR_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t SAI_BDR_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t SAI_PDMCR_reg;

        // bit fields
        struct {
            __IO uint32_t PDMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t MICNBR_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CKEN1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } SAI_PDMCR_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t SAI_PDMDLY_reg;

        // bit fields
        struct {
            __IO uint32_t DLYM1L_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DLYM1R_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DLYM2L_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DLYM2R_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DLYM3L_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DLYM3R_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t DLYM4L_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 1;
            __IO uint32_t DLYM4R_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 1;
        } SAI_PDMDLY_bits;
    };

} sai1_t;

// Peripheral SAI2 @ base_addess=0x40015C00
typedef struct sai2_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t SAI_GCR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCIN_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SYNCOUT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } SAI_GCR_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t SAI_ACR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_ACR1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t SAI_ACR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_ACR2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t SAI_AFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_AFRCR_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t SAI_ASLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_ASLOTR_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t SAI_AIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_AIM_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t SAI_ASR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_ASR_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t SAI_ACLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_ACLRFR_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t SAI_ADR_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t SAI_BCR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_BCR1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t SAI_BCR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_BCR2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t SAI_BFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_BFRCR_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t SAI_BSLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_BSLOTR_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t SAI_BIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_BIM_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t SAI_BSR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_BSR_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t SAI_BCLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_BCLRFR_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t SAI_BDR_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t SAI_PDMCR_reg;

        // bit fields
        struct {
            __IO uint32_t PDMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t MICNBR_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CKEN1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } SAI_PDMCR_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t SAI_PDMDLY_reg;

        // bit fields
        struct {
            __IO uint32_t DLYM1L_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DLYM1R_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DLYM2L_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DLYM2R_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DLYM3L_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DLYM3R_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t DLYM4L_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 1;
            __IO uint32_t DLYM4R_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 1;
        } SAI_PDMDLY_bits;
    };

} sai2_t;

// Peripheral SAI3 @ base_addess=0x40016000
typedef struct sai3_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t SAI_GCR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCIN_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SYNCOUT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } SAI_GCR_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t SAI_ACR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_ACR1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t SAI_ACR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_ACR2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t SAI_AFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_AFRCR_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t SAI_ASLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_ASLOTR_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t SAI_AIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_AIM_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t SAI_ASR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_ASR_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t SAI_ACLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_ACLRFR_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t SAI_ADR_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t SAI_BCR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_BCR1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t SAI_BCR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_BCR2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t SAI_BFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_BFRCR_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t SAI_BSLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_BSLOTR_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t SAI_BIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_BIM_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t SAI_BSR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_BSR_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t SAI_BCLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_BCLRFR_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t SAI_BDR_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t SAI_PDMCR_reg;

        // bit fields
        struct {
            __IO uint32_t PDMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t MICNBR_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CKEN1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } SAI_PDMCR_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t SAI_PDMDLY_reg;

        // bit fields
        struct {
            __IO uint32_t DLYM1L_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DLYM1R_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DLYM2L_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DLYM2R_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DLYM3L_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DLYM3R_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t DLYM4L_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 1;
            __IO uint32_t DLYM4R_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 1;
        } SAI_PDMDLY_bits;
    };

} sai3_t;

// Peripheral SAI4 @ base_addess=0x58005400
typedef struct sai4_t {

    // SAI_GCR @ offset=0x00000000
    union {
        __IO uint32_t SAI_GCR_reg;

        // bit fields
        struct {
            __IO uint32_t SYNCIN_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t SYNCOUT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 26;
        } SAI_GCR_bits;
    };

    // SAI_ACR1 @ offset=0x00000004
    union {
        __IO uint32_t SAI_ACR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_ACR1_bits;
    };

    // SAI_ACR2 @ offset=0x00000008
    union {
        __IO uint32_t SAI_ACR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_ACR2_bits;
    };

    // SAI_AFRCR @ offset=0x0000000C
    union {
        __IO uint32_t SAI_AFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_AFRCR_bits;
    };

    // SAI_ASLOTR @ offset=0x00000010
    union {
        __IO uint32_t SAI_ASLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_ASLOTR_bits;
    };

    // SAI_AIM @ offset=0x00000014
    union {
        __IO uint32_t SAI_AIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_AIM_bits;
    };

    // SAI_ASR @ offset=0x00000018
    union {
        __IO uint32_t SAI_ASR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_ASR_bits;
    };

    // SAI_ACLRFR @ offset=0x0000001C
    union {
        __IO uint32_t SAI_ACLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_ACLRFR_bits;
    };

    // SAI_ADR @ offset=0x00000020
    __IO uint32_t SAI_ADR_reg;

    // SAI_BCR1 @ offset=0x00000024
    union {
        __IO uint32_t SAI_BCR1_reg;

        // bit fields
        struct {
            __IO uint32_t MODE_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PRTCFG_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DS_bit : 3; // bit offset=5  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFIRST_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTR_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCEN_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t MONO_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OUTDRIV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t SAIXEN_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAEN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t NOMCK_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKDIV_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 2;
            __IO uint32_t OSR_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 5;
        } SAI_BCR1_bits;
    };

    // SAI_BCR2 @ offset=0x00000028
    union {
        __IO uint32_t SAI_BCR2_reg;

        // bit fields
        struct {
            __IO uint32_t FTH_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t FFLUSH_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TRIS_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEVAL_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTECNT_bit : 6; // bit offset=7  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPL_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMP_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } SAI_BCR2_bits;
    };

    // SAI_BFRCR @ offset=0x0000002C
    union {
        __IO uint32_t SAI_BFRCR_reg;

        // bit fields
        struct {
            __IO uint32_t FRL_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSALL_bit : 7; // bit offset=8  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t FSDEF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FSPOL_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FSOFF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 13;
        } SAI_BFRCR_bits;
    };

    // SAI_BSLOTR @ offset=0x00000030
    union {
        __IO uint32_t SAI_BSLOTR_reg;

        // bit fields
        struct {
            __IO uint32_t FBOFF_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SLOTSZ_bit : 2; // bit offset=6  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBSLOT_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t SLOTEN_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } SAI_BSLOTR_bits;
    };

    // SAI_BIM @ offset=0x00000034
    union {
        __IO uint32_t SAI_BIM_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDRIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MUTEDETIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WCKCFGIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FREQIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNRDYIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFSDETIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LFSDETIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } SAI_BIM_bits;
    };

    // SAI_BSR @ offset=0x00000038
    union {
        __IO uint32_t SAI_BSR_reg;

        // bit fields
        struct {
            __IO uint32_t OVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FREQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t AFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t FLVL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 13;
        } SAI_BSR_bits;
    };

    // SAI_BCLRFR @ offset=0x0000003C
    union {
        __IO uint32_t SAI_BCLRFR_reg;

        // bit fields
        struct {
            __IO uint32_t COVRUDR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CMUTEDET_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CWCKCFG_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCNRDY_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CAFSDET_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CLFSDET_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } SAI_BCLRFR_bits;
    };

    // SAI_BDR @ offset=0x00000040
    __IO uint32_t SAI_BDR_reg;

    // SAI_PDMCR @ offset=0x00000044
    union {
        __IO uint32_t SAI_PDMCR_reg;

        // bit fields
        struct {
            __IO uint32_t PDMEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t MICNBR_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CKEN1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN2_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN3_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKEN4_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } SAI_PDMCR_bits;
    };

    // SAI_PDMDLY @ offset=0x00000048
    union {
        __IO uint32_t SAI_PDMDLY_reg;

        // bit fields
        struct {
            __IO uint32_t DLYM1L_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t DLYM1R_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t DLYM2L_bit : 3; // bit offset=8  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t DLYM2R_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t DLYM3L_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4: 1;
            __IO uint32_t DLYM3R_bit : 3; // bit offset=20  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED5: 1;
            __IO uint32_t DLYM4L_bit : 3; // bit offset=24  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED6: 1;
            __IO uint32_t DLYM4R_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED7 : 1;
        } SAI_PDMDLY_bits;
    };

} sai4_t;

// Peripheral SDMMC1 @ base_addess=0x52007000
typedef struct sdmmc1_t {

    // POWER @ offset=0x00000000
    union {
        __IO uint32_t POWER_reg;

        // bit fields
        struct {
            __IO uint32_t PWRCTRL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWITCH_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWITCHEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIRPOL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } POWER_bits;
    };

    // CLKCR @ offset=0x00000004
    union {
        __IO uint32_t CLKCR_reg;

        // bit fields
        struct {
            __IO uint32_t CLKDIV_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PWRSAV_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WIDBUS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NEGEDGE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HWFC_EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDR_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSSPEED_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SELCLKRX_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } CLKCR_bits;
    };

    // ARGR @ offset=0x00000008
    __IO uint32_t ARGR_reg;

    // CMDR @ offset=0x0000000C
    union {
        __IO uint32_t CMDR_reg;

        // bit fields
        struct {
            __IO uint32_t CMDINDEX_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDTRANS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSTOP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITRESP_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITINT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITPEND_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPSMEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTHOLD_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOTMODE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOTEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSUSPEND_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } CMDR_bits;
    };

    // RESPCMDR @ offset=0x00000010
    __IO uint32_t RESPCMDR_reg;

    // RESP1R @ offset=0x00000014
    __IO uint32_t RESP1R_reg;

    // RESP2R @ offset=0x00000018
    __IO uint32_t RESP2R_reg;

    // RESP3R @ offset=0x0000001C
    __IO uint32_t RESP3R_reg;

    // RESP4R @ offset=0x00000020
    __IO uint32_t RESP4R_reg;

    // DTIMER @ offset=0x00000024
    __IO uint32_t DTIMER_reg;

    // DLENR @ offset=0x00000028
    __IO uint32_t DLENR_reg;

    // DCTRL @ offset=0x0000002C
    union {
        __IO uint32_t DCTRL_reg;

        // bit fields
        struct {
            __IO uint32_t DTEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTDIR_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTMODE_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBLOCKSIZE_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWSTART_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWSTOP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWMOD_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIOEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOTACKEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFORST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 18;
        } DCTRL_bits;
    };

    // DCNTR @ offset=0x00000030
    __IO uint32_t DCNTR_reg;

    // STAR @ offset=0x00000034
    union {
        __IO uint32_t STAR_reg;

        // bit fields
        struct {
            __IO uint32_t CCRCFAIL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DCRCFAIL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTIMEOUT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DTIMEOUT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXUNDERR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXOVERR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMDREND_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMDSENT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DATAEND_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DHOLD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DBCKEND_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DABORT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPSMACT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPSMACT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOHE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFIFOHF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFIFOF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFIFOE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSYD0_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSYD0END_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SDIOIT_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ACKFAIL_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ACKTIMEOUT_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VSWEND_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CKSTOP_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDMATE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDMABTC_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 3;
        } STAR_bits;
    };

    // ICR @ offset=0x00000038
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CCRCFAILC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRCFAILC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTIMEOUTC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTIMEOUTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUNDERRC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVERRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDRENDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSENTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAENDC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DHOLDC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBCKENDC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DABORTC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t BUSYD0ENDC_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIOITC_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKFAILC_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKTIMEOUTC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWENDC_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTOPC_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMATEC_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMABTCC_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 3;
        } ICR_bits;
    };

    // MASKR @ offset=0x0000003C
    union {
        __IO uint32_t MASKR_reg;

        // bit fields
        struct {
            __IO uint32_t CCRCFAILIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRCFAILIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTIMEOUTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTIMEOUTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUNDERRIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVERRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDRENDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSENTIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAENDIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DHOLDIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBCKENDIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DABORTIE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TXFIFOHEIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFIFOHFIE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t RXFIFOFIE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFIFOEIE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t BUSYD0ENDIE_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIOITIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKFAILIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKTIMEOUTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWENDIE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTOPIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t IDMABTCIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } MASKR_bits;
    };

    // ACKTIMER @ offset=0x00000040
    __IO uint32_t ACKTIMER_reg;

    __IO uint8_t RESERVED0[12];

    // IDMACTRLR @ offset=0x00000050
    union {
        __IO uint32_t IDMACTRLR_reg;

        // bit fields
        struct {
            __IO uint32_t IDMAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMABMODE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMABACT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } IDMACTRLR_bits;
    };

    // IDMABSIZER @ offset=0x00000054
    __IO uint32_t IDMABSIZER_reg;

    // IDMABASE0R @ offset=0x00000058
    __IO uint32_t IDMABASE0R_reg;

    // IDMABASE1R @ offset=0x0000005C
    __IO uint32_t IDMABASE1R_reg;

    __IO uint8_t RESERVED1[32];

    // FIFOR @ offset=0x00000080
    __IO uint32_t FIFOR_reg;

    __IO uint8_t RESERVED2[880];

    // VER @ offset=0x000003F4
    union {
        __IO uint32_t VER_reg;

        // bit fields
        struct {
            __IO uint32_t MINREV_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t MAJREV_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } VER_bits;
    };

    // ID @ offset=0x000003F8
    __IO uint32_t ID_reg;

} sdmmc1_t;

// Peripheral SDMMC2 @ base_addess=0x48022400
typedef struct sdmmc2_t {

    // POWER @ offset=0x00000000
    union {
        __IO uint32_t POWER_reg;

        // bit fields
        struct {
            __IO uint32_t PWRCTRL_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWITCH_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWITCHEN_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIRPOL_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 27;
        } POWER_bits;
    };

    // CLKCR @ offset=0x00000004
    union {
        __IO uint32_t CLKCR_reg;

        // bit fields
        struct {
            __IO uint32_t CLKDIV_bit : 10; // bit offset=0  bit width=10  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PWRSAV_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WIDBUS_bit : 2; // bit offset=14  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t NEGEDGE_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HWFC_EN_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDR_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BUSSPEED_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SELCLKRX_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } CLKCR_bits;
    };

    // ARGR @ offset=0x00000008
    __IO uint32_t ARGR_reg;

    // CMDR @ offset=0x0000000C
    union {
        __IO uint32_t CMDR_reg;

        // bit fields
        struct {
            __IO uint32_t CMDINDEX_bit : 6; // bit offset=0  bit width=6  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDTRANS_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSTOP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITRESP_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITINT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAITPEND_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPSMEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTHOLD_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOTMODE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOTEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSUSPEND_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 15;
        } CMDR_bits;
    };

    // RESPCMDR @ offset=0x00000010
    __IO uint32_t RESPCMDR_reg;

    // RESP1R @ offset=0x00000014
    __IO uint32_t RESP1R_reg;

    // RESP2R @ offset=0x00000018
    __IO uint32_t RESP2R_reg;

    // RESP3R @ offset=0x0000001C
    __IO uint32_t RESP3R_reg;

    // RESP4R @ offset=0x00000020
    __IO uint32_t RESP4R_reg;

    // DTIMER @ offset=0x00000024
    __IO uint32_t DTIMER_reg;

    // DLENR @ offset=0x00000028
    __IO uint32_t DLENR_reg;

    // DCTRL @ offset=0x0000002C
    union {
        __IO uint32_t DCTRL_reg;

        // bit fields
        struct {
            __IO uint32_t DTEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTDIR_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTMODE_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBLOCKSIZE_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWSTART_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWSTOP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RWMOD_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIOEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOTACKEN_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFORST_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 18;
        } DCTRL_bits;
    };

    // DCNTR @ offset=0x00000030
    __IO uint32_t DCNTR_reg;

    // STAR @ offset=0x00000034
    union {
        __IO uint32_t STAR_reg;

        // bit fields
        struct {
            __IO uint32_t CCRCFAIL_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DCRCFAIL_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTIMEOUT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DTIMEOUT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXUNDERR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXOVERR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMDREND_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMDSENT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DATAEND_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DHOLD_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DBCKEND_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DABORT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPSMACT_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CPSMACT_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOHE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFIFOHF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFIFOF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFIFOE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFIFOE_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSYD0_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSYD0END_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SDIOIT_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ACKFAIL_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ACKTIMEOUT_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VSWEND_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CKSTOP_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDMATE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDMABTC_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 3;
        } STAR_bits;
    };

    // ICR @ offset=0x00000038
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CCRCFAILC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRCFAILC_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTIMEOUTC_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTIMEOUTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUNDERRC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVERRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDRENDC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSENTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAENDC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DHOLDC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBCKENDC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DABORTC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 9;
            __IO uint32_t BUSYD0ENDC_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIOITC_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKFAILC_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKTIMEOUTC_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWENDC_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTOPC_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMATEC_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMABTCC_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 3;
        } ICR_bits;
    };

    // MASKR @ offset=0x0000003C
    union {
        __IO uint32_t MASKR_reg;

        // bit fields
        struct {
            __IO uint32_t CCRCFAILIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DCRCFAILIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTIMEOUTIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DTIMEOUTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUNDERRIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVERRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDRENDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMDSENTIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATAENDIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DHOLDIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DBCKENDIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DABORTIE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t TXFIFOHEIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFIFOHFIE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t RXFIFOFIE_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFIFOEIE_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t BUSYD0ENDIE_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SDIOITIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKFAILIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ACKTIMEOUTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VSWENDIE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSTOPIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t IDMABTCIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 3;
        } MASKR_bits;
    };

    // ACKTIMER @ offset=0x00000040
    __IO uint32_t ACKTIMER_reg;

    __IO uint8_t RESERVED0[12];

    // IDMACTRLR @ offset=0x00000050
    union {
        __IO uint32_t IDMACTRLR_reg;

        // bit fields
        struct {
            __IO uint32_t IDMAEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMABMODE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDMABACT_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 29;
        } IDMACTRLR_bits;
    };

    // IDMABSIZER @ offset=0x00000054
    __IO uint32_t IDMABSIZER_reg;

    // IDMABASE0R @ offset=0x00000058
    __IO uint32_t IDMABASE0R_reg;

    // IDMABASE1R @ offset=0x0000005C
    __IO uint32_t IDMABASE1R_reg;

    __IO uint8_t RESERVED1[32];

    // FIFOR @ offset=0x00000080
    __IO uint32_t FIFOR_reg;

    __IO uint8_t RESERVED2[880];

    // VER @ offset=0x000003F4
    union {
        __IO uint32_t VER_reg;

        // bit fields
        struct {
            __IO uint32_t MINREV_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t MAJREV_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } VER_bits;
    };

    // ID @ offset=0x000003F8
    __IO uint32_t ID_reg;

} sdmmc2_t;

// Peripheral SPDIFRX @ base_addess=0x40004000
typedef struct spdifrx_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t SPDIFRXEN_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXSTEO_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DRFMT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t PMSK_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t VMSK_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CUMSK_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PTMSK_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CBDMAEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHSEL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NBTR_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WFA_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t INSEL_bit : 3; // bit offset=16  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CKSEN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKSBKPEN_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } CR_bits;
    };

    // IMR @ offset=0x00000004
    union {
        __IO uint32_t IMR_reg;

        // bit fields
        struct {
            __IO uint32_t RXNEIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSRNEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PERRIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBLKIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SYNCDIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IFEIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 25;
        } IMR_bits;
    };

    // SR @ offset=0x00000008
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXNE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSRNE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t PERR_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBD_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SYNCD_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FERR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SERR_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TERR_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t WIDTH5_bit : 15; // bit offset=16  bit width=15  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 1;
        } SR_bits;
    };

    // IFCR @ offset=0x0000000C
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t PERRCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRCF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBDCF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SYNCDCF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 26;
        } IFCR_bits;
    };

    union {
        // DR_00 @ offset=0x00000010
        union {
            __IO uint32_t DR_00_reg;

            // bit fields
            struct {
                __IO uint32_t DR_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_ONLY
                __IO uint32_t PE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t V_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t U_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t C_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t PT_bit : 2; // bit offset=28  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0 : 2;
            } DR_00_bits;
        };

        // DR_01 @ offset=0x00000010
        union {
            __IO uint32_t DR_01_reg;

            // bit fields
            struct {
                __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t V_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t U_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t C_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
                __IO uint32_t PT_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_ONLY
                __IO uint32_t RESERVED0: 2;
                __IO uint32_t DR_bit : 24; // bit offset=8  bit width=24  access=SVDAccessType.READ_ONLY
            } DR_01_bits;
        };

        // DR_10 @ offset=0x00000010
        union {
            __IO uint32_t DR_10_reg;

            // bit fields
            struct {
                __IO uint32_t DRNL1_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
                __IO uint32_t DRNL2_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
            } DR_10_bits;
        };

    };

    // CSR @ offset=0x00000014
    union {
        __IO uint32_t CSR_reg;

        // bit fields
        struct {
            __IO uint32_t USR_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_ONLY
            __IO uint32_t CS_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t SOB_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 7;
        } CSR_bits;
    };

    // DIR @ offset=0x00000018
    union {
        __IO uint32_t DIR_reg;

        // bit fields
        struct {
            __IO uint32_t THI_bit : 13; // bit offset=0  bit width=13  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t TLO_bit : 13; // bit offset=16  bit width=13  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 3;
        } DIR_bits;
    };

    __IO uint8_t RESERVED0[984];

    // VERR @ offset=0x000003F4
    union {
        __IO uint32_t VERR_reg;

        // bit fields
        struct {
            __IO uint32_t MINREV_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t MAJREV_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } VERR_bits;
    };

    // IDR @ offset=0x000003F8
    __IO uint32_t IDR_reg;

    // SIDR @ offset=0x000003FC
    __IO uint32_t SIDR_reg;

} spdifrx_t;

// Peripheral SPI1 @ base_addess=0x40013000
typedef struct spi1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t SPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t MASRX_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSTART_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t HDDIR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSI_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCRCI_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRCI_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IOLOCK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t TSIZE_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSER_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CR2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t CFG1_reg;

        // bit fields
        struct {
            __IO uint32_t DSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHVL_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRCFG_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRDET_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CRCEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t MBR_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CFG1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t CFG2_reg;

        // bit fields
        struct {
            __IO uint32_t MSSI_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MIDI_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t IOSWP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t COMM_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SP_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTER_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFRST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SSIOP_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFCNTR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFG2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXPIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPXPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTFIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIFREIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODFIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSERFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DXP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CRCE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIFRE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSERF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXC_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXPLVL_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXWNE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t EOTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXTFC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRCEC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIFREC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MODFC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TSERFC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUSPC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 20;
        } IFCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t TXDR_reg;

    __IO uint8_t RESERVED1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t RXDR_reg;

    __IO uint8_t RESERVED2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t CRCPOLY_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t TXCRC_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t RXCRC_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t UDRDR_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t CGFR_reg;

        // bit fields
        struct {
            __IO uint32_t I2SMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SCFG_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SSTD_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PCMSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLEN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHLEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIXCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WSINV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATFMT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t I2SDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } CGFR_bits;
    };

} spi1_t;

// Peripheral SPI2 @ base_addess=0x40003800
typedef struct spi2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t SPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t MASRX_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSTART_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t HDDIR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSI_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCRCI_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRCI_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IOLOCK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t TSIZE_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSER_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CR2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t CFG1_reg;

        // bit fields
        struct {
            __IO uint32_t DSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHVL_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRCFG_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRDET_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CRCEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t MBR_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CFG1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t CFG2_reg;

        // bit fields
        struct {
            __IO uint32_t MSSI_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MIDI_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t IOSWP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t COMM_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SP_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTER_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFRST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SSIOP_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFCNTR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFG2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXPIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPXPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTFIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIFREIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODFIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSERFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DXP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CRCE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIFRE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSERF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXC_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXPLVL_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXWNE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t EOTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXTFC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRCEC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIFREC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MODFC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TSERFC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUSPC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 20;
        } IFCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t TXDR_reg;

    __IO uint8_t RESERVED1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t RXDR_reg;

    __IO uint8_t RESERVED2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t CRCPOLY_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t TXCRC_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t RXCRC_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t UDRDR_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t CGFR_reg;

        // bit fields
        struct {
            __IO uint32_t I2SMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SCFG_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SSTD_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PCMSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLEN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHLEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIXCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WSINV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATFMT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t I2SDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } CGFR_bits;
    };

} spi2_t;

// Peripheral SPI3 @ base_addess=0x40003C00
typedef struct spi3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t SPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t MASRX_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSTART_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t HDDIR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSI_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCRCI_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRCI_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IOLOCK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t TSIZE_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSER_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CR2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t CFG1_reg;

        // bit fields
        struct {
            __IO uint32_t DSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHVL_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRCFG_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRDET_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CRCEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t MBR_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CFG1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t CFG2_reg;

        // bit fields
        struct {
            __IO uint32_t MSSI_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MIDI_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t IOSWP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t COMM_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SP_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTER_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFRST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SSIOP_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFCNTR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFG2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXPIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPXPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTFIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIFREIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODFIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSERFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DXP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CRCE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIFRE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSERF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXC_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXPLVL_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXWNE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t EOTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXTFC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRCEC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIFREC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MODFC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TSERFC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUSPC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 20;
        } IFCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t TXDR_reg;

    __IO uint8_t RESERVED1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t RXDR_reg;

    __IO uint8_t RESERVED2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t CRCPOLY_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t TXCRC_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t RXCRC_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t UDRDR_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t CGFR_reg;

        // bit fields
        struct {
            __IO uint32_t I2SMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SCFG_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SSTD_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PCMSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLEN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHLEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIXCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WSINV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATFMT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t I2SDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } CGFR_bits;
    };

} spi3_t;

// Peripheral SPI4 @ base_addess=0x40013400
typedef struct spi4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t SPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t MASRX_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSTART_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t HDDIR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSI_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCRCI_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRCI_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IOLOCK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t TSIZE_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSER_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CR2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t CFG1_reg;

        // bit fields
        struct {
            __IO uint32_t DSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHVL_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRCFG_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRDET_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CRCEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t MBR_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CFG1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t CFG2_reg;

        // bit fields
        struct {
            __IO uint32_t MSSI_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MIDI_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t IOSWP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t COMM_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SP_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTER_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFRST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SSIOP_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFCNTR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFG2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXPIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPXPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTFIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIFREIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODFIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSERFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DXP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CRCE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIFRE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSERF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXC_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXPLVL_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXWNE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t EOTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXTFC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRCEC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIFREC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MODFC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TSERFC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUSPC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 20;
        } IFCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t TXDR_reg;

    __IO uint8_t RESERVED1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t RXDR_reg;

    __IO uint8_t RESERVED2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t CRCPOLY_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t TXCRC_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t RXCRC_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t UDRDR_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t CGFR_reg;

        // bit fields
        struct {
            __IO uint32_t I2SMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SCFG_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SSTD_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PCMSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLEN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHLEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIXCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WSINV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATFMT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t I2SDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } CGFR_bits;
    };

} spi4_t;

// Peripheral SPI5 @ base_addess=0x40015000
typedef struct spi5_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t SPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t MASRX_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSTART_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t HDDIR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSI_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCRCI_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRCI_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IOLOCK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t TSIZE_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSER_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CR2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t CFG1_reg;

        // bit fields
        struct {
            __IO uint32_t DSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHVL_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRCFG_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRDET_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CRCEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t MBR_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CFG1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t CFG2_reg;

        // bit fields
        struct {
            __IO uint32_t MSSI_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MIDI_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t IOSWP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t COMM_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SP_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTER_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFRST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SSIOP_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFCNTR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFG2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXPIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPXPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTFIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIFREIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODFIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSERFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DXP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CRCE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIFRE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSERF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXC_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXPLVL_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXWNE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t EOTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXTFC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRCEC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIFREC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MODFC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TSERFC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUSPC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 20;
        } IFCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t TXDR_reg;

    __IO uint8_t RESERVED1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t RXDR_reg;

    __IO uint8_t RESERVED2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t CRCPOLY_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t TXCRC_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t RXCRC_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t UDRDR_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t CGFR_reg;

        // bit fields
        struct {
            __IO uint32_t I2SMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SCFG_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SSTD_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PCMSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLEN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHLEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIXCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WSINV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATFMT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t I2SDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } CGFR_bits;
    };

} spi5_t;

// Peripheral SPI6 @ base_addess=0x58001400
typedef struct spi6_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t SPE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t MASRX_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CSTART_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CSUSP_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t HDDIR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSI_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRC33_17_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RCRCI_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCRCI_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IOLOCK_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t TSIZE_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSER_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } CR2_bits;
    };

    // CFG1 @ offset=0x00000008
    union {
        __IO uint32_t CFG1_reg;

        // bit fields
        struct {
            __IO uint32_t DSIZE_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t FTHVL_bit : 4; // bit offset=5  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRCFG_bit : 2; // bit offset=9  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRDET_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RXDMAEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMAEN_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCSIZE_bit : 5; // bit offset=16  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CRCEN_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 5;
            __IO uint32_t MBR_bit : 3; // bit offset=28  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 1;
        } CFG1_bits;
    };

    // CFG2 @ offset=0x0000000C
    union {
        __IO uint32_t CFG2_reg;

        // bit fields
        struct {
            __IO uint32_t MSSI_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t MIDI_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t IOSWP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t COMM_bit : 2; // bit offset=17  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t SP_bit : 3; // bit offset=19  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MASTER_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LSBFRST_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSM_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t SSIOP_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOE_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SSOM_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AFCNTR_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CFG2_bits;
    };

    // IER @ offset=0x00000010
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXPIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXPIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DPXPIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOTIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXTFIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDRIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CRCEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIFREIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MODFIE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TSERFIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 21;
        } IER_bits;
    };

    // SR @ offset=0x00000014
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t RXP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DXP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOT_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXTF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t OVR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CRCE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TIFRE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t MODF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TSERF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXC_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXPLVL_bit : 2; // bit offset=13  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXWNE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIZE_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_ONLY
        } SR_bits;
    };

    // IFCR @ offset=0x00000018
    union {
        __IO uint32_t IFCR_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t EOTC_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXTFC_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRC_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t OVRC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRCEC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TIFREC_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MODFC_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TSERFC_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SUSPC_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 20;
        } IFCR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // TXDR @ offset=0x00000020
    __IO uint32_t TXDR_reg;

    __IO uint8_t RESERVED1[12];

    // RXDR @ offset=0x00000030
    __IO uint32_t RXDR_reg;

    __IO uint8_t RESERVED2[12];

    // CRCPOLY @ offset=0x00000040
    __IO uint32_t CRCPOLY_reg;

    // TXCRC @ offset=0x00000044
    __IO uint32_t TXCRC_reg;

    // RXCRC @ offset=0x00000048
    __IO uint32_t RXCRC_reg;

    // UDRDR @ offset=0x0000004C
    __IO uint32_t UDRDR_reg;

    // CGFR @ offset=0x00000050
    union {
        __IO uint32_t CGFR_reg;

        // bit fields
        struct {
            __IO uint32_t I2SMOD_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SCFG_bit : 3; // bit offset=1  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2SSTD_bit : 2; // bit offset=4  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t PCMSYNC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATLEN_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t CHLEN_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKPOL_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIXCH_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WSINV_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DATFMT_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t I2SDIV_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t ODD_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MCKOE_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 6;
        } CGFR_bits;
    };

} spi6_t;

// Peripheral SWPMI @ base_addess=0x40008800
typedef struct swpmi_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t RXDMA_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXDMA_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXMODE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXMODE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LPBK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPACT_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t DEACT_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWPTEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR_bits;
    };

    // BRR @ offset=0x00000004
    __IO uint32_t BRR_reg;

    __IO uint8_t RESERVED0[4];

    // ISR @ offset=0x0000000C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t RXBFF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXBEF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXBERF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXOVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXUNRF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SRF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SUSP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t DEACTF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RDYF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 20;
        } ISR_bits;
    };

    // ICR @ offset=0x00000010
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t CRXBFF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTXBEF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRXBERF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CRXOVRF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTXUNRF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CTCF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CSRF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CRDYF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 20;
        } ICR_bits;
    };

    // IER @ offset=0x00000014
    union {
        __IO uint32_t IER_reg;

        // bit fields
        struct {
            __IO uint32_t RXBFIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXBEIE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXBERIE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXOVRIE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXUNRIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SRIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t RDYIE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } IER_bits;
    };

    // RFL @ offset=0x00000018
    __IO uint32_t RFL_reg;

    // TDR @ offset=0x0000001C
    __IO uint32_t TDR_reg;

    // RDR @ offset=0x00000020
    __IO uint32_t RDR_reg;

    // OR @ offset=0x00000024
    union {
        __IO uint32_t OR_reg;

        // bit fields
        struct {
            __IO uint32_t SWP_TBYP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWP_CLASS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 30;
        } OR_bits;
    };

} swpmi_t;

// Peripheral SYSCFG @ base_addess=0x58000400
typedef struct syscfg_t {

    __IO uint8_t RESERVED0[4];

    // PMCR @ offset=0x00000004
    union {
        __IO uint32_t PMCR_reg;

        // bit fields
        struct {
            __IO uint32_t I2C1FMP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C2FMP_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C3FMP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t I2C4FMP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PB6FMP_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PB7FMP_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PB8FMP_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PB9FMP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOSTE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BOOSTVDDSEL_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 11;
            __IO uint32_t EPIS_bit : 3; // bit offset=21  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t PA0SO_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PA1SO_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PC2SO_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PC3SO_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 4;
        } PMCR_bits;
    };

    // EXTICR1 @ offset=0x00000008
    union {
        __IO uint32_t EXTICR1_reg;

        // bit fields
        struct {
            __IO uint32_t EXTI0_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI1_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI2_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI3_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } EXTICR1_bits;
    };

    // EXTICR2 @ offset=0x0000000C
    union {
        __IO uint32_t EXTICR2_reg;

        // bit fields
        struct {
            __IO uint32_t EXTI4_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI5_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI6_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI7_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } EXTICR2_bits;
    };

    // EXTICR3 @ offset=0x00000010
    union {
        __IO uint32_t EXTICR3_reg;

        // bit fields
        struct {
            __IO uint32_t EXTI8_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI9_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI10_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI11_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } EXTICR3_bits;
    };

    // EXTICR4 @ offset=0x00000014
    union {
        __IO uint32_t EXTICR4_reg;

        // bit fields
        struct {
            __IO uint32_t EXTI12_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI13_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI14_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t EXTI15_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } EXTICR4_bits;
    };

    __IO uint8_t RESERVED1[8];

    // CCCSR @ offset=0x00000020
    union {
        __IO uint32_t CCCSR_reg;

        // bit fields
        struct {
            __IO uint32_t EN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 6;
            __IO uint32_t READY_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 7;
            __IO uint32_t HSLV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 15;
        } CCCSR_bits;
    };

    // CCVR @ offset=0x00000024
    union {
        __IO uint32_t CCVR_reg;

        // bit fields
        struct {
            __IO uint32_t NCV_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t PCV_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 24;
        } CCVR_bits;
    };

    // CCCR @ offset=0x00000028
    union {
        __IO uint32_t CCCR_reg;

        // bit fields
        struct {
            __IO uint32_t NCC_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCC_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 24;
        } CCCR_bits;
    };

    // PWRCR @ offset=0x0000002C
    __IO uint32_t PWRCR_reg;

    __IO uint8_t RESERVED2[244];

    // PKGR @ offset=0x00000124
    __IO uint32_t PKGR_reg;

    __IO uint8_t RESERVED3[472];

    // UR0 @ offset=0x00000300
    union {
        __IO uint32_t UR0_reg;

        // bit fields
        struct {
            __IO uint32_t BKS_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t RDP_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 8;
        } UR0_bits;
    };

    __IO uint8_t RESERVED4[4];

    // UR2 @ offset=0x00000308
    union {
        __IO uint32_t UR2_reg;

        // bit fields
        struct {
            __IO uint32_t BORH_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t BOOT_ADD0_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } UR2_bits;
    };

    // UR3 @ offset=0x0000030C
    __IO uint32_t UR3_reg;

    // UR4 @ offset=0x00000310
    __IO uint32_t UR4_reg;

    // UR5 @ offset=0x00000314
    union {
        __IO uint32_t UR5_reg;

        // bit fields
        struct {
            __IO uint32_t MESAD_1_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t WRPN_1_bit : 8; // bit offset=16  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 8;
        } UR5_bits;
    };

    // UR6 @ offset=0x00000318
    union {
        __IO uint32_t UR6_reg;

        // bit fields
        struct {
            __IO uint32_t PA_BEG_1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t PA_END_1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 4;
        } UR6_bits;
    };

    // UR7 @ offset=0x0000031C
    union {
        __IO uint32_t UR7_reg;

        // bit fields
        struct {
            __IO uint32_t SA_BEG_1_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SA_END_1_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 4;
        } UR7_bits;
    };

    // UR8 @ offset=0x00000320
    union {
        __IO uint32_t UR8_reg;

        // bit fields
        struct {
            __IO uint32_t MEPAD_2_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t MESAD_2_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } UR8_bits;
    };

    // UR9 @ offset=0x00000324
    union {
        __IO uint32_t UR9_reg;

        // bit fields
        struct {
            __IO uint32_t WRPN_2_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 8;
            __IO uint32_t PA_BEG_2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 4;
        } UR9_bits;
    };

    // UR10 @ offset=0x00000328
    union {
        __IO uint32_t UR10_reg;

        // bit fields
        struct {
            __IO uint32_t PA_END_2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t SA_BEG_2_bit : 12; // bit offset=16  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 4;
        } UR10_bits;
    };

    // UR11 @ offset=0x0000032C
    union {
        __IO uint32_t UR11_reg;

        // bit fields
        struct {
            __IO uint32_t SA_END_2_bit : 12; // bit offset=0  bit width=12  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t IWDG1M_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } UR11_bits;
    };

    // UR12 @ offset=0x00000330
    __IO uint32_t UR12_reg;

    // UR13 @ offset=0x00000334
    union {
        __IO uint32_t UR13_reg;

        // bit fields
        struct {
            __IO uint32_t SDRS_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 14;
            __IO uint32_t D1SBRST_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } UR13_bits;
    };

    // UR14 @ offset=0x00000338
    __IO uint32_t UR14_reg;

    // UR15 @ offset=0x0000033C
    __IO uint32_t UR15_reg;

    // UR16 @ offset=0x00000340
    union {
        __IO uint32_t UR16_reg;

        // bit fields
        struct {
            __IO uint32_t FZIWDGSTP_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t PKP_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED1 : 15;
        } UR16_bits;
    };

    // UR17 @ offset=0x00000344
    __IO uint32_t UR17_reg;

} syscfg_t;

// Peripheral TIM1 @ base_addess=0x40010000
typedef struct tim1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCPC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCUS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1N_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS2N_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS3N_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OIS5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t OIS6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t MMS2_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 8;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMDE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t B2IF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBIF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CC5IF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC6IF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COMG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BG_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t B2G_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 23;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2NE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3NE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC5E_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC5P_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC6E_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC6P_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t RCR_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t CCR1_reg;

    // CCR2 @ offset=0x00000038
    __IO uint32_t CCR2_reg;

    // CCR3 @ offset=0x0000003C
    __IO uint32_t CCR3_reg;

    // CCR4 @ offset=0x00000040
    __IO uint32_t CCR4_reg;

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t BDTR_reg;

        // bit fields
        struct {
            __IO uint32_t DTG_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LOCK_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSI_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AOE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MOE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKF_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2F_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2E_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2P_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 6;
        } BDTR_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED0[4];

    // CCMR3_Output @ offset=0x00000054
    union {
        __IO uint32_t CCMR3_OUTPUT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t OC5FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t OC6FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC6PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC6M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC6CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5M3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t OC6M3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 7;
        } CCMR3_OUTPUT_bits;
    };

    // CCR5 @ offset=0x00000058
    union {
        __IO uint32_t CCR5_reg;

        // bit fields
        struct {
            __IO uint32_t CCR5_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t GC5C1_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GC5C2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GC5C3_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CCR5_bits;
    };

    // CCR6 @ offset=0x0000005C
    __IO uint32_t CCR6_reg;

    // AF1 @ offset=0x00000060
    union {
        __IO uint32_t AF1_reg;

        // bit fields
        struct {
            __IO uint32_t BKINE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BKDF1BK0E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKINP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t ETRSEL_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } AF1_bits;
    };

    // AF2 @ offset=0x00000064
    union {
        __IO uint32_t AF2_reg;

        // bit fields
        struct {
            __IO uint32_t BK2INE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BK2DF1BK1E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2INP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } AF2_bits;
    };

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim1_t;

// Peripheral TIM12 @ base_addess=0x40001800
typedef struct tim12_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim12_t;

// Peripheral TIM13 @ base_addess=0x40001C00
typedef struct tim13_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim13_t;

// Peripheral TIM14 @ base_addess=0x40002000
typedef struct tim14_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim14_t;

// Peripheral TIM15 @ base_addess=0x40014000
typedef struct tim15_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCPC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCUS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1N_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 21;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_2_0_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 8;
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t COMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t COMDE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t COMIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 21;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t COMG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BG_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 24;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 1;
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1: 1;
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED2: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED3 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    __IO uint8_t RESERVED0[4];

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t RCR_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t CCR1_reg;

    // CCR2 @ offset=0x00000038
    __IO uint32_t CCR2_reg;

    __IO uint8_t RESERVED1[8];

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t BDTR_reg;

        // bit fields
        struct {
            __IO uint32_t DTG_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LOCK_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSI_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AOE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MOE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKF_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 12;
        } BDTR_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    union {
        __IO uint32_t AF1_reg;

        // bit fields
        struct {
            __IO uint32_t BKINE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BKDF1BK0E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKINP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } AF1_bits;
    };

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } TISEL_bits;
    };

} tim15_t;

// Peripheral TIM16 @ base_addess=0x40014400
typedef struct tim16_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCPC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCUS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t OIS1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1N_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 22;
        } CR2_bits;
    };

    __IO uint8_t RESERVED0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t COMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t COMDE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t COMIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BIF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 22;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t COMG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BG_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 24;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 9;
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 15;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 24;
            } CCMR1_INPUT_bits;
        };

    };

    __IO uint8_t RESERVED1[4];

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t RCR_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t CCR1_reg;

    __IO uint8_t RESERVED2[12];

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t BDTR_reg;

        // bit fields
        struct {
            __IO uint32_t DTG_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LOCK_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSI_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AOE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MOE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKF_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 12;
        } BDTR_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED3[16];

    // TIM16_AF1 @ offset=0x00000060
    union {
        __IO uint32_t TIM16_AF1_reg;

        // bit fields
        struct {
            __IO uint32_t BKINE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BKDFBK1E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKINP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } TIM16_AF1_bits;
    };

    __IO uint8_t RESERVED4[4];

    // TIM16_TISEL @ offset=0x00000068
    __IO uint32_t TIM16_TISEL_reg;

} tim16_t;

// Peripheral TIM17 @ base_addess=0x40014800
typedef struct tim17_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCPC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCUS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t OIS1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1N_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 22;
        } CR2_bits;
    };

    __IO uint8_t RESERVED0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t COMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 3;
            __IO uint32_t COMDE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 18;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t COMIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BIF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 22;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t COMG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t BG_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2 : 24;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 9;
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 15;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 24;
            } CCMR1_INPUT_bits;
        };

    };

    __IO uint8_t RESERVED1[4];

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 28;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t RCR_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t CCR1_reg;

    __IO uint8_t RESERVED2[12];

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t BDTR_reg;

        // bit fields
        struct {
            __IO uint32_t DTG_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LOCK_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSI_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AOE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MOE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKF_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 12;
        } BDTR_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED3[16];

    // TIM17_AF1 @ offset=0x00000060
    union {
        __IO uint32_t TIM17_AF1_reg;

        // bit fields
        struct {
            __IO uint32_t BKINE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BKDFBK1E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKINP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } TIM17_AF1_bits;
    };

    __IO uint8_t RESERVED4[4];

    // TIM17_TISEL @ offset=0x00000068
    __IO uint32_t TIM17_TISEL_reg;

} tim17_t;

// Peripheral TIM2 @ base_addess=0x40000000
typedef struct tim2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim2_t;

// Peripheral TIM3 @ base_addess=0x40000400
typedef struct tim3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim3_t;

// Peripheral TIM4 @ base_addess=0x40000800
typedef struct tim4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim4_t;

// Peripheral TIM5 @ base_addess=0x40000C00
typedef struct tim5_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 24;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1 : 25;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t ICPCS_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PCS_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t O24CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 16;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CNT_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    union {
        __IO uint32_t ARR_reg;

        // bit fields
        struct {
            __IO uint32_t ARR_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARR_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } ARR_bits;
    };

    __IO uint8_t RESERVED0[4];

    // CCR1 @ offset=0x00000034
    union {
        __IO uint32_t CCR1_reg;

        // bit fields
        struct {
            __IO uint32_t CCR1_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR1_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR1_bits;
    };

    // CCR2 @ offset=0x00000038
    union {
        __IO uint32_t CCR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCR2_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR2_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR2_bits;
    };

    // CCR3 @ offset=0x0000003C
    union {
        __IO uint32_t CCR3_reg;

        // bit fields
        struct {
            __IO uint32_t CCR3_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR3_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR3_bits;
    };

    // CCR4 @ offset=0x00000040
    union {
        __IO uint32_t CCR4_reg;

        // bit fields
        struct {
            __IO uint32_t CCR4_L_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCR4_H_bit : 16; // bit offset=16  bit width=16  access=SVDAccessType.READ_WRITE
        } CCR4_bits;
    };

    __IO uint8_t RESERVED1[4];

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED2[16];

    // AF1 @ offset=0x00000060
    __IO uint32_t AF1_reg;

    __IO uint8_t RESERVED3[4];

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim5_t;

// Peripheral TIM6 @ base_addess=0x40001000
typedef struct tim6_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    __IO uint32_t CR2_reg;

    __IO uint8_t RESERVED0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 23;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    __IO uint32_t SR_reg;

    // EGR @ offset=0x00000014
    __IO uint32_t EGR_reg;

    __IO uint8_t RESERVED1[12];

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

} tim6_t;

// Peripheral TIM7 @ base_addess=0x40001400
typedef struct tim7_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    __IO uint32_t CR2_reg;

    __IO uint8_t RESERVED0[4];

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 7;
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 23;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    __IO uint32_t SR_reg;

    // EGR @ offset=0x00000014
    __IO uint32_t EGR_reg;

    __IO uint8_t RESERVED1[12];

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

} tim7_t;

// Peripheral TIM8 @ base_addess=0x40010400
typedef struct tim8_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t CEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDIS_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t URS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OPM_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DIR_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMS_bit : 2; // bit offset=5  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ARPE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CKD_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t UIFREMAP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t CCPC_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CCUS_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CCDS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MMS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t TI1S_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS1N_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS2_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS2N_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS3_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS3N_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OIS4_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t OIS5_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 1;
            __IO uint32_t OIS6_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3: 1;
            __IO uint32_t MMS2_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED4 : 8;
        } CR2_bits;
    };

    // SMCR @ offset=0x00000008
    union {
        __IO uint32_t SMCR_reg;

        // bit fields
        struct {
            __IO uint32_t SMS_bit : 3; // bit offset=0  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t TS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSM_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETF_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETPS_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t ECE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ETP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SMS_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t TS_4_3_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } SMCR_bits;
    };

    // DIER @ offset=0x0000000C
    union {
        __IO uint32_t DIER_reg;

        // bit fields
        struct {
            __IO uint32_t UIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UDE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1DE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2DE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3DE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4DE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMDE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TDE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 17;
        } DIER_bits;
    };

    // SR @ offset=0x00000010
    union {
        __IO uint32_t SR_reg;

        // bit fields
        struct {
            __IO uint32_t UIF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1IF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2IF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3IF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4IF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t COMIF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TIF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BIF_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t B2IF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1OF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2OF_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3OF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4OF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SBIF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t CC5IF_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC6IF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 14;
        } SR_bits;
    };

    // EGR @ offset=0x00000014
    union {
        __IO uint32_t EGR_reg;

        // bit fields
        struct {
            __IO uint32_t UG_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC1G_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC2G_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC3G_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CC4G_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t COMG_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TG_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t BG_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t B2G_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 23;
        } EGR_bits;
    };

    union {
        // CCMR1_Output @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC2CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC1M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC2M_3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR1_OUTPUT_bits;
        };

        // CCMR1_Input @ offset=0x00000018
        union {
            __IO uint32_t CCMR1_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC1S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC1F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC2S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC2F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR1_INPUT_bits;
        };

    };

    union {
        // CCMR2_Output @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_OUTPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC4CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t OC3M_3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0: 7;
                __IO uint32_t OC4M_4_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED1 : 7;
            } CCMR2_OUTPUT_bits;
        };

        // CCMR2_Input @ offset=0x0000001C
        union {
            __IO uint32_t CCMR2_INPUT_reg;

            // bit fields
            struct {
                __IO uint32_t CC3S_bit : 2; // bit offset=0  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3PSC_bit : 2; // bit offset=2  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC3F_bit : 4; // bit offset=4  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t CC4S_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4PSC_bit : 2; // bit offset=10  bit width=2  access=SVDAccessType.READ_WRITE
                __IO uint32_t IC4F_bit : 4; // bit offset=12  bit width=4  access=SVDAccessType.READ_WRITE
                __IO uint32_t RESERVED0 : 16;
            } CCMR2_INPUT_bits;
        };

    };

    // CCER @ offset=0x00000020
    union {
        __IO uint32_t CCER_reg;

        // bit fields
        struct {
            __IO uint32_t CC1E_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1P_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC1NP_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2E_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2P_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2NE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC2NP_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3P_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3NE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC3NP_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4E_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC4P_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t CC4NP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC5E_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC5P_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t CC6E_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CC6P_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 10;
        } CCER_bits;
    };

    // CNT @ offset=0x00000024
    union {
        __IO uint32_t CNT_reg;

        // bit fields
        struct {
            __IO uint32_t CNT_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 15;
            __IO uint32_t UIFCPY_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_ONLY
        } CNT_bits;
    };

    // PSC @ offset=0x00000028
    __IO uint32_t PSC_reg;

    // ARR @ offset=0x0000002C
    __IO uint32_t ARR_reg;

    // RCR @ offset=0x00000030
    __IO uint32_t RCR_reg;

    // CCR1 @ offset=0x00000034
    __IO uint32_t CCR1_reg;

    // CCR2 @ offset=0x00000038
    __IO uint32_t CCR2_reg;

    // CCR3 @ offset=0x0000003C
    __IO uint32_t CCR3_reg;

    // CCR4 @ offset=0x00000040
    __IO uint32_t CCR4_reg;

    // BDTR @ offset=0x00000044
    union {
        __IO uint32_t BDTR_reg;

        // bit fields
        struct {
            __IO uint32_t DTG_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t LOCK_bit : 2; // bit offset=8  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSI_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OSSR_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKE_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKP_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t AOE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MOE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKF_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2F_bit : 4; // bit offset=20  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2E_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2P_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 6;
        } BDTR_bits;
    };

    // DCR @ offset=0x00000048
    union {
        __IO uint32_t DCR_reg;

        // bit fields
        struct {
            __IO uint32_t DBA_bit : 5; // bit offset=0  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 3;
            __IO uint32_t DBL_bit : 5; // bit offset=8  bit width=5  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 19;
        } DCR_bits;
    };

    // DMAR @ offset=0x0000004C
    __IO uint32_t DMAR_reg;

    __IO uint8_t RESERVED0[4];

    // CCMR3_Output @ offset=0x00000054
    union {
        __IO uint32_t CCMR3_OUTPUT_reg;

        // bit fields
        struct {
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t OC5FE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5PE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5M_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5CE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t OC6FE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC6PE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC6M_bit : 3; // bit offset=12  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC6CE_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OC5M3_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 7;
            __IO uint32_t OC6M3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 7;
        } CCMR3_OUTPUT_bits;
    };

    // CCR5 @ offset=0x00000058
    union {
        __IO uint32_t CCR5_reg;

        // bit fields
        struct {
            __IO uint32_t CCR5_bit : 16; // bit offset=0  bit width=16  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 13;
            __IO uint32_t GC5C1_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GC5C2_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t GC5C3_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CCR5_bits;
    };

    // CCR6 @ offset=0x0000005C
    __IO uint32_t CCR6_reg;

    // AF1 @ offset=0x00000060
    union {
        __IO uint32_t AF1_reg;

        // bit fields
        struct {
            __IO uint32_t BKINE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BKDF1BK0E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKINP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BKCMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 2;
            __IO uint32_t ETRSEL_bit : 4; // bit offset=14  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 14;
        } AF1_bits;
    };

    // AF2 @ offset=0x00000064
    union {
        __IO uint32_t AF2_reg;

        // bit fields
        struct {
            __IO uint32_t BK2INE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP1E_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP2E_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 5;
            __IO uint32_t BK2DF1BK1E_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2INP_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP1P_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t BK2CMP2P_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 20;
        } AF2_bits;
    };

    // TISEL @ offset=0x00000068
    union {
        __IO uint32_t TISEL_reg;

        // bit fields
        struct {
            __IO uint32_t TI1SEL_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 4;
            __IO uint32_t TI2SEL_bit : 4; // bit offset=8  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 4;
            __IO uint32_t TI3SEL_bit : 4; // bit offset=16  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2: 4;
            __IO uint32_t TI4SEL_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED3 : 4;
        } TISEL_bits;
    };

} tim8_t;

// Peripheral UART4 @ base_addess=0x40004C00
typedef struct uart4_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} uart4_t;

// Peripheral UART5 @ base_addess=0x40005000
typedef struct uart5_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} uart5_t;

// Peripheral UART7 @ base_addess=0x40007800
typedef struct uart7_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} uart7_t;

// Peripheral UART8 @ base_addess=0x40007C00
typedef struct uart8_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} uart8_t;

// Peripheral USART1 @ base_addess=0x40011000
typedef struct usart1_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} usart1_t;

// Peripheral USART2 @ base_addess=0x40004400
typedef struct usart2_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} usart2_t;

// Peripheral USART3 @ base_addess=0x40004800
typedef struct usart3_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} usart3_t;

// Peripheral USART6 @ base_addess=0x40011400
typedef struct usart6_t {

    // CR1 @ offset=0x00000000
    union {
        __IO uint32_t CR1_reg;

        // bit fields
        struct {
            __IO uint32_t UE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t UESM_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RE_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IDLEIE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXNEIE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXEIE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PEIE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PS_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t PCE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t WAKE_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M0_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MME_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CMIE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVER8_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT0_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT1_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT2_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT3_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEDT4_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT2_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT3_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEAT4_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOIE_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t EOBIE_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t M1_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t FIFOEN_bit : 1; // bit offset=29  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFEIE_bit : 1; // bit offset=30  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFFIE_bit : 1; // bit offset=31  bit width=1  access=SVDAccessType.READ_WRITE
        } CR1_bits;
    };

    // CR2 @ offset=0x00000004
    union {
        __IO uint32_t CR2_reg;

        // bit fields
        struct {
            __IO uint32_t SLVEN_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t DIS_NSS_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADDM7_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDL_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t LBDIE_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t LBCL_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPHA_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CPOL_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CLKEN_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t STOP_bit : 2; // bit offset=12  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t LINEN_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SWAP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXINV_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXINV_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TAINV_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t MSBFIRST_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABREN_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD0_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ABRMOD1_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTOEN_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD0_3_bit : 4; // bit offset=24  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t ADD4_7_bit : 4; // bit offset=28  bit width=4  access=SVDAccessType.READ_WRITE
        } CR2_bits;
    };

    // CR3 @ offset=0x00000008
    union {
        __IO uint32_t CR3_reg;

        // bit fields
        struct {
            __IO uint32_t EIE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IREN_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t IRLP_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HDSEL_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t NACK_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t SCEN_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAR_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DMAT_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RTSE_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSE_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t CTSIE_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t ONEBIT_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t OVRDIS_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DDRE_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEM_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t DEP_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t SCARCNT_bit : 3; // bit offset=17  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUS_bit : 2; // bit offset=20  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t WUFIE_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTIE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TCBGTIE_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTCFG_bit : 3; // bit offset=25  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RXFTIE_bit : 1; // bit offset=28  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t TXFTCFG_bit : 3; // bit offset=29  bit width=3  access=SVDAccessType.READ_WRITE
        } CR3_bits;
    };

    // BRR @ offset=0x0000000C
    union {
        __IO uint32_t BRR_reg;

        // bit fields
        struct {
            __IO uint32_t BRR_0_3_bit : 4; // bit offset=0  bit width=4  access=SVDAccessType.READ_WRITE
            __IO uint32_t BRR_4_15_bit : 12; // bit offset=4  bit width=12  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } BRR_bits;
    };

    // GTPR @ offset=0x00000010
    union {
        __IO uint32_t GTPR_reg;

        // bit fields
        struct {
            __IO uint32_t PSC_bit : 8; // bit offset=0  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t GT_bit : 8; // bit offset=8  bit width=8  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 16;
        } GTPR_bits;
    };

    // RTOR @ offset=0x00000014
    union {
        __IO uint32_t RTOR_reg;

        // bit fields
        struct {
            __IO uint32_t RTO_bit : 24; // bit offset=0  bit width=24  access=SVDAccessType.READ_WRITE
            __IO uint32_t BLEN_bit : 8; // bit offset=24  bit width=8  access=SVDAccessType.READ_WRITE
        } RTOR_bits;
    };

    // RQR @ offset=0x00000018
    union {
        __IO uint32_t RQR_reg;

        // bit fields
        struct {
            __IO uint32_t ABRRQ_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t SBKRQ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t MMRQ_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RXFRQ_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFRQ_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0 : 27;
        } RQR_bits;
    };

    // ISR @ offset=0x0000001C
    union {
        __IO uint32_t ISR_reg;

        // bit fields
        struct {
            __IO uint32_t PE_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t FE_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t NF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ORE_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t IDLE_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXNE_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TC_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXE_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t LBDF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTSIF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CTS_bit : 1; // bit offset=10  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RTOF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t EOBF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t UDR_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRE_bit : 1; // bit offset=14  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t ABRF_bit : 1; // bit offset=15  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t BUSY_bit : 1; // bit offset=16  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t CMF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t SBKF_bit : 1; // bit offset=18  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RWU_bit : 1; // bit offset=19  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t WUF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TEACK_bit : 1; // bit offset=21  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t REACK_bit : 1; // bit offset=22  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFE_bit : 1; // bit offset=23  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFF_bit : 1; // bit offset=24  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TCBGT_bit : 1; // bit offset=25  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RXFT_bit : 1; // bit offset=26  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t TXFT_bit : 1; // bit offset=27  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t RESERVED0 : 4;
        } ISR_bits;
    };

    // ICR @ offset=0x00000020
    union {
        __IO uint32_t ICR_reg;

        // bit fields
        struct {
            __IO uint32_t PECF_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t FECF_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t NCF_bit : 1; // bit offset=2  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t ORECF_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t IDLECF_bit : 1; // bit offset=4  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TXFECF_bit : 1; // bit offset=5  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCCF_bit : 1; // bit offset=6  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t TCBGTC_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t LBDCF_bit : 1; // bit offset=8  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t CTSCF_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t RTOCF_bit : 1; // bit offset=11  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t EOBCF_bit : 1; // bit offset=12  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t UDRCF_bit : 1; // bit offset=13  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED1: 3;
            __IO uint32_t CMCF_bit : 1; // bit offset=17  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED2: 2;
            __IO uint32_t WUCF_bit : 1; // bit offset=20  bit width=1  access=SVDAccessType.WRITE_ONLY
            __IO uint32_t RESERVED3 : 11;
        } ICR_bits;
    };

    // RDR @ offset=0x00000024
    __IO uint32_t RDR_reg;

    // TDR @ offset=0x00000028
    __IO uint32_t TDR_reg;

    // PRESC @ offset=0x0000002C
    __IO uint32_t PRESC_reg;

} usart6_t;

// Peripheral VREFBUF @ base_addess=0x58003C00
typedef struct vrefbuf_t {

    // CSR @ offset=0x00000000
    union {
        __IO uint32_t CSR_reg;

        // bit fields
        struct {
            __IO uint32_t ENVR_bit : 1; // bit offset=0  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t HIZ_bit : 1; // bit offset=1  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 1;
            __IO uint32_t VRR_bit : 1; // bit offset=3  bit width=1  access=SVDAccessType.READ_ONLY
            __IO uint32_t VRS_bit : 3; // bit offset=4  bit width=3  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1 : 25;
        } CSR_bits;
    };

    // CCR @ offset=0x00000004
    __IO uint32_t CCR_reg;

} vrefbuf_t;

// Peripheral WWDG @ base_addess=0x50003000
typedef struct wwdg_t {

    // CR @ offset=0x00000000
    union {
        __IO uint32_t CR_reg;

        // bit fields
        struct {
            __IO uint32_t T_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t WDGA_bit : 1; // bit offset=7  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0 : 24;
        } CR_bits;
    };

    // CFR @ offset=0x00000004
    union {
        __IO uint32_t CFR_reg;

        // bit fields
        struct {
            __IO uint32_t W_bit : 7; // bit offset=0  bit width=7  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED0: 2;
            __IO uint32_t EWI_bit : 1; // bit offset=9  bit width=1  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED1: 1;
            __IO uint32_t WDGTB_bit : 2; // bit offset=11  bit width=2  access=SVDAccessType.READ_WRITE
            __IO uint32_t RESERVED2 : 19;
        } CFR_bits;
    };

    // SR @ offset=0x00000008
    __IO uint32_t SR_reg;

} wwdg_t;

/*------------------------ Device Macro Define ---------------------*/
// Device STM32H743

#define PERI_ADC1                ((adc1_t *) 0x40022000)
#define PERI_ADC12_COMMON        ((adc12_common_t *) 0x40022300)
#define PERI_ADC2                ((adc2_t *) 0x40022100)
#define PERI_ADC3                ((adc3_t *) 0x58026000)
#define PERI_ADC3_COMMON         ((adc3_common_t *) 0x58026300)
#define PERI_AXI                 ((axi_t *) 0x51000000)
#define PERI_BDMA                ((bdma_t *) 0x58025400)
#define PERI_CAN_CCU             ((can_ccu_t *) 0x4000A800)
#define PERI_CEC                 ((cec_t *) 0x40006C00)
#define PERI_COMP1               ((comp1_t *) 0x58003800)
#define PERI_CRC                 ((crc_t *) 0x58024C00)
#define PERI_CRS                 ((crs_t *) 0x40008400)
#define PERI_DAC                 ((dac_t *) 0x40007400)
#define PERI_DBGMCU              ((dbgmcu_t *) 0x5C001000)
#define PERI_DCMI                ((dcmi_t *) 0x48020000)
#define PERI_DELAY_BLOCK_QUADSPI ((delay_block_quadspi_t *) 0x52006000)
#define PERI_DELAY_BLOCK_SDMMC1  ((delay_block_sdmmc1_t *) 0x52008000)
#define PERI_DELAY_BLOCK_SDMMC2  ((delay_block_sdmmc2_t *) 0x48022800)
#define PERI_DFSDM               ((dfsdm_t *) 0x40017000)
#define PERI_DMA1                ((dma1_t *) 0x40020000)
#define PERI_DMA2                ((dma2_t *) 0x40020400)
#define PERI_DMA2D               ((dma2d_t *) 0x52001000)
#define PERI_DMAMUX1             ((dmamux1_t *) 0x40020800)
#define PERI_DMAMUX2             ((dmamux2_t *) 0x58025800)
#define PERI_EXTI                ((exti_t *) 0x58000000)
#define PERI_ETHERNET_DMA        ((ethernet_dma_t *) 0x40029000)
#define PERI_ETHERNET_MAC        ((ethernet_mac_t *) 0x40028000)
#define PERI_ETHERNET_MTL        ((ethernet_mtl_t *) 0x40028C00)
#define PERI_FDCAN1              ((fdcan1_t *) 0x4000A000)
#define PERI_FDCAN2              ((fdcan2_t *) 0x4000A400)
#define PERI_FMC                 ((fmc_t *) 0x52004000)
#define PERI_FLASH               ((flash_t *) 0x52002000)
#define PERI_GPIOA               ((gpioa_t *) 0x58020000)
#define PERI_GPIOB               ((gpiob_t *) 0x58020400)
#define PERI_GPIOC               ((gpioc_t *) 0x58020800)
#define PERI_GPIOD               ((gpiod_t *) 0x58020C00)
#define PERI_GPIOE               ((gpioe_t *) 0x58021000)
#define PERI_GPIOF               ((gpiof_t *) 0x58021400)
#define PERI_GPIOG               ((gpiog_t *) 0x58021800)
#define PERI_GPIOH               ((gpioh_t *) 0x58021C00)
#define PERI_GPIOI               ((gpioi_t *) 0x58022000)
#define PERI_GPIOJ               ((gpioj_t *) 0x58022400)
#define PERI_GPIOK               ((gpiok_t *) 0x58022800)
#define PERI_HRTIM_COMMON        ((hrtim_common_t *) 0x40017780)
#define PERI_HRTIM_MASTER        ((hrtim_master_t *) 0x40017400)
#define PERI_HRTIM_TIMA          ((hrtim_tima_t *) 0x40017480)
#define PERI_HRTIM_TIMB          ((hrtim_timb_t *) 0x40017500)
#define PERI_HRTIM_TIMC          ((hrtim_timc_t *) 0x40017580)
#define PERI_HRTIM_TIMD          ((hrtim_timd_t *) 0x40017600)
#define PERI_HRTIM_TIME          ((hrtim_time_t *) 0x40017680)
#define PERI_HSEM                ((hsem_t *) 0x58026400)
#define PERI_I2C1                ((i2c1_t *) 0x40005400)
#define PERI_I2C2                ((i2c2_t *) 0x40005800)
#define PERI_I2C3                ((i2c3_t *) 0x40005C00)
#define PERI_I2C4                ((i2c4_t *) 0x58001C00)
#define PERI_IWDG                ((iwdg_t *) 0x58004800)
#define PERI_JPEG                ((jpeg_t *) 0x52003000)
#define PERI_LPTIM1              ((lptim1_t *) 0x40002400)
#define PERI_LPTIM2              ((lptim2_t *) 0x58002400)
#define PERI_LPTIM3              ((lptim3_t *) 0x58002800)
#define PERI_LPTIM4              ((lptim4_t *) 0x58002C00)
#define PERI_LPTIM5              ((lptim5_t *) 0x58003000)
#define PERI_LPUART1             ((lpuart1_t *) 0x58000C00)
#define PERI_LTDC                ((ltdc_t *) 0x50001000)
#define PERI_MDIOS               ((mdios_t *) 0x40009400)
#define PERI_MDMA                ((mdma_t *) 0x52000000)
#define PERI_OPAMP               ((opamp_t *) 0x40009000)
#define PERI_OTG1_HS_DEVICE      ((otg1_hs_device_t *) 0x40040800)
#define PERI_OTG1_HS_GLOBAL      ((otg1_hs_global_t *) 0x40040000)
#define PERI_OTG1_HS_HOST        ((otg1_hs_host_t *) 0x40040400)
#define PERI_OTG1_HS_PWRCLK      ((otg1_hs_pwrclk_t *) 0x40040E00)
#define PERI_OTG2_HS_DEVICE      ((otg2_hs_device_t *) 0x40080800)
#define PERI_OTG2_HS_GLOBAL      ((otg2_hs_global_t *) 0x40080000)
#define PERI_OTG2_HS_HOST        ((otg2_hs_host_t *) 0x40080400)
#define PERI_OTG2_HS_PWRCLK      ((otg2_hs_pwrclk_t *) 0x40080E00)
#define PERI_PWR                 ((pwr_t *) 0x58024800)
#define PERI_QUADSPI             ((quadspi_t *) 0x52005000)
#define PERI_RAMECC1             ((ramecc1_t *) 0x52009000)
#define PERI_RAMECC2             ((ramecc2_t *) 0x48023000)
#define PERI_RAMECC3             ((ramecc3_t *) 0x58027000)
#define PERI_RCC                 ((rcc_t *) 0x58024400)
#define PERI_RNG                 ((rng_t *) 0x48021800)
#define PERI_RTC                 ((rtc_t *) 0x58004000)
#define PERI_SAI1                ((sai1_t *) 0x40015800)
#define PERI_SAI2                ((sai2_t *) 0x40015C00)
#define PERI_SAI3                ((sai3_t *) 0x40016000)
#define PERI_SAI4                ((sai4_t *) 0x58005400)
#define PERI_SDMMC1              ((sdmmc1_t *) 0x52007000)
#define PERI_SDMMC2              ((sdmmc2_t *) 0x48022400)
#define PERI_SPDIFRX             ((spdifrx_t *) 0x40004000)
#define PERI_SPI1                ((spi1_t *) 0x40013000)
#define PERI_SPI2                ((spi2_t *) 0x40003800)
#define PERI_SPI3                ((spi3_t *) 0x40003C00)
#define PERI_SPI4                ((spi4_t *) 0x40013400)
#define PERI_SPI5                ((spi5_t *) 0x40015000)
#define PERI_SPI6                ((spi6_t *) 0x58001400)
#define PERI_SWPMI               ((swpmi_t *) 0x40008800)
#define PERI_SYSCFG              ((syscfg_t *) 0x58000400)
#define PERI_TIM1                ((tim1_t *) 0x40010000)
#define PERI_TIM12               ((tim12_t *) 0x40001800)
#define PERI_TIM13               ((tim13_t *) 0x40001C00)
#define PERI_TIM14               ((tim14_t *) 0x40002000)
#define PERI_TIM15               ((tim15_t *) 0x40014000)
#define PERI_TIM16               ((tim16_t *) 0x40014400)
#define PERI_TIM17               ((tim17_t *) 0x40014800)
#define PERI_TIM2                ((tim2_t *) 0x40000000)
#define PERI_TIM3                ((tim3_t *) 0x40000400)
#define PERI_TIM4                ((tim4_t *) 0x40000800)
#define PERI_TIM5                ((tim5_t *) 0x40000C00)
#define PERI_TIM6                ((tim6_t *) 0x40001000)
#define PERI_TIM7                ((tim7_t *) 0x40001400)
#define PERI_TIM8                ((tim8_t *) 0x40010400)
#define PERI_UART4               ((uart4_t *) 0x40004C00)
#define PERI_UART5               ((uart5_t *) 0x40005000)
#define PERI_UART7               ((uart7_t *) 0x40007800)
#define PERI_UART8               ((uart8_t *) 0x40007C00)
#define PERI_USART1              ((usart1_t *) 0x40011000)
#define PERI_USART2              ((usart2_t *) 0x40004400)
#define PERI_USART3              ((usart3_t *) 0x40004800)
#define PERI_USART6              ((usart6_t *) 0x40011400)
#define PERI_VREFBUF             ((vrefbuf_t *) 0x58003C00)
#define PERI_WWDG                ((wwdg_t *) 0x50003000)


#endif